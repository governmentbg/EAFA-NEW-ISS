<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="errCrossCheckExecution" xml:space="preserve">
    <value>Error executing cross check: {0}</value>
  </data>
  <data name="failedCrossCheckExecution" xml:space="preserve">
    <value>Failed to execute cross check: {0}</value>
  </data>
  <data name="invalidCrossCheckResult" xml:space="preserve">
    <value>Invalid cross check result</value>
  </data>
  <data name="lblValue" xml:space="preserve">
    <value>value:</value>
  </data>
  <data name="msgEgnLnchDoesntExist" xml:space="preserve">
    <value>No user with this EGN/LNCH exists in the system</value>
  </data>
  <data name="msgEgnLnchExists" xml:space="preserve">
    <value>A user with this EGN/LNCH already exists</value>
  </data>
  <data name="msgEmailExists" xml:space="preserve">
    <value>A user with this email already exists</value>
  </data>
  <data name="msgEmptyRegixDataReceived" xml:space="preserve">
    <value>Empty result received from Regix</value>
  </data>
  <data name="msgExistingEmail" xml:space="preserve">
    <value>This email is already registered</value>
  </data>
  <data name="msgFluxFailedReceive" xml:space="preserve">
    <value>Failed to send to Flux Central node</value>
  </data>
  <data name="msgInvalidApplicationFileType" xml:space="preserve">
    <value>Invalid application file type</value>
  </data>
  <data name="msgInvalidApplicationID" xml:space="preserve">
    <value>Invalid pdf document for this application</value>
  </data>
  <data name="msgInvalidApplicationVersion" xml:space="preserve">
    <value>Uploaded invalid application file version</value>
  </data>
  <data name="msgInvalidPDF" xml:space="preserve">
    <value>Invalid pdf document</value>
  </data>
  <data name="msgInvalidSubmitter" xml:space="preserve">
    <value>Invalid application submitter</value>
  </data>
  <data name="msgListMinLength" xml:space="preserve">
    <value>Minimum length of list {0} is {1}</value>
  </data>
  <data name="msgLocationNotSent" xml:space="preserve">
    <value>Location not sent</value>
  </data>
  <data name="msgMaxLength" xml:space="preserve">
    <value>Maximum length of field {0} is {1}</value>
  </data>
  <data name="msgMissingOwners" xml:space="preserve">
    <value>Inconsistent number of owners in IAMA register</value>
  </data>
  <data name="msgMissingPerson" xml:space="preserve">
    <value>No person found with that data!</value>
  </data>
  <data name="msgPatternNotMatching" xml:space="preserve">
    <value>Field not matching the required pattern</value>
  </data>
  <data name="msgPositiveIntegerValue" xml:space="preserve">
    <value>The field {0} value must be positive integer value</value>
  </data>
  <data name="msgRequired" xml:space="preserve">
    <value>The field {0} is required</value>
  </data>
  <data name="msgUnsignedFile" xml:space="preserve">
    <value>Unsigned file!</value>
  </data>
  <data name="msgVesselNotFoundInRegister" xml:space="preserve">
    <value>Vessel not found in register</value>
  </data>
  <data name="msgWrongPassword" xml:space="preserve">
    <value>Wrong Password</value>
  </data>
  <data name="passwordChangeErr" xml:space="preserve">
    <value>Error while change password for token {0}</value>
  </data>
</root>