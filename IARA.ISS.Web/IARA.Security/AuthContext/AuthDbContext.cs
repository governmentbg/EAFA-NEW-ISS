// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using IARA.EntityModels.Entities;
using Microsoft.EntityFrameworkCore;

#nullable disable

namespace IARA.Security.AuthContext
{
    public partial class AuthDbContext : DbContext
    {
        public AuthDbContext(DbContextOptions<AuthDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Legal> Legals { get; set; }
        public virtual DbSet<NauditLogActionType> NauditLogActionTypes { get; set; }
        public virtual DbSet<NauditLogTable> NauditLogTables { get; set; }
        public virtual DbSet<NnotificationTemplate> NnotificationTemplates { get; set; }
        public virtual DbSet<Npermission> Npermissions { get; set; }
        public virtual DbSet<NpermissionGroup> NpermissionGroups { get; set; }
        public virtual DbSet<NpermissionType> NpermissionTypes { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserInfo> UserInfos { get; set; }
        public virtual DbSet<UserLegal> UserLegals { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AuditLog>(entity =>
            {
                entity.HasComment("Детайлен лог на промените по обектите в базата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"auditlog_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Action).HasComment("Действие (контролер/метод)");

                entity.Property(e => e.ActionType).HasComment("Тип действие (Insert/Update/Delete)");

                entity.Property(e => e.Application).HasComment("Приложение в системата (Area)");

                entity.Property(e => e.BrowserInfo).HasComment("Информация за браузера на потребителя");

                entity.Property(e => e.Ipaddress).HasComment("IP адрес на потребителя");

                entity.Property(e => e.LogDate).HasComment("Дата на действие");

                entity.Property(e => e.NewValue).HasComment("Нова стойност");

                entity.Property(e => e.OldValue).HasComment("Стара стойност");

                entity.Property(e => e.SchemaName).HasComment("Име на схема в базата");

                entity.Property(e => e.TableId).HasComment("Първичен ключ на записа, който е променен");

                entity.Property(e => e.TableName).HasComment("Таблица, в която е направена промяната");

                entity.Property(e => e.Username).HasComment("Потребител");
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasComment("Лог на възникналите грешки в работата на системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"errorlog_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Class).HasComment("Клас");

                entity.Property(e => e.Client).HasComment("Идентификатор на клиента (Angular, Xamarin ver...)");

                entity.Property(e => e.ExceptionSource).HasComment("Източник (Exception Source)");

                entity.Property(e => e.LogDate).HasComment("Дата и час на събитие");

                entity.Property(e => e.Message).HasComment("Съобщение на грешката");

                entity.Property(e => e.Method).HasComment("Метод");

                entity.Property(e => e.Severity).HasComment("Критичност (Info/Warn/Error/Debug)");

                entity.Property(e => e.StackTrace).HasComment("StackTrace на грешката");

                entity.Property(e => e.Username).HasComment("Потребител");
            });

            modelBuilder.Entity<Legal>(entity =>
            {
                entity.HasComment("Юридически лица - историческа таблица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legals_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Eik).HasComment("ЕИК/БУЛСТАТ");

                entity.Property(e => e.LegalOwnerId).HasComment("Собственик");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.LegalOwner)
                    .WithMany(p => p.Legals)
                    .HasForeignKey(d => d.LegalOwnerId)
                    .HasConstraintName("FK_Legals_Persons");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_Legals_Legals");
            });

            modelBuilder.Entity<NauditLogActionType>(entity =>
            {
                entity.HasComment("Типове действия, за които се пази детайлен одит лог");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"nauditlogactiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Таблица");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NauditLogTable>(entity =>
            {
                entity.HasComment("Списък с таблици, за които да се пази детайлен лог");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"nauditlogtables_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание на таблицата");

                entity.Property(e => e.IsActive)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsAuditLogEnabled)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали е разрешено детайлното логване на действия");

                entity.Property(e => e.SchemaName).HasComment("Модул на системата (схема)");

                entity.Property(e => e.TableName).HasComment("Таблица");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<NnotificationTemplate>(entity =>
            {
                entity.HasComment("Шаблони за съобщения по мейл/мобилно, които да се изпращат");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"nnotificationtemplates_id_seq\"'::text)::regclass)")
                    .HasComment("Идентификатор на съобщение");

                entity.Property(e => e.Body).HasComment("Текст на съобщението");

                entity.Property(e => e.Code).HasComment("Код на шаблон");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.SubCode).HasComment("Под-тип на шаблон - използва се за вариации на едно и също съобщение като код");

                entity.Property(e => e.Subject).HasComment("Заглавие на съобщението");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Npermission>(entity =>
            {
                entity.HasComment("Права за достъп");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"permissions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.PermissionGroupId).HasComment("Група");

                entity.Property(e => e.PermissionTypeId).HasComment("Тип на правото (Read/Add/Edit/Delete/Restore/Other)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.PermissionGroup)
                    .WithMany(p => p.Npermissions)
                    .HasForeignKey(d => d.PermissionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_NPermissions_UsrMgmt_NPermissionGroups");

                entity.HasOne(d => d.PermissionType)
                    .WithMany(p => p.Npermissions)
                    .HasForeignKey(d => d.PermissionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NPermissions_NPermissionTypes");
            });

            modelBuilder.Entity<NpermissionGroup>(entity =>
            {
                entity.HasComment("Групи права за достъп");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"permissiongroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.ParentGroupId).HasComment("Група родител - за йерархия в UI");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.ParentGroup)
                    .WithMany(p => p.InverseParentGroup)
                    .HasForeignKey(d => d.ParentGroupId)
                    .HasConstraintName("FK_NPermissionGroups_NPermissionGroups");
            });

            modelBuilder.Entity<NpermissionType>(entity =>
            {
                entity.HasComment("Типове права за достъп (Read/Add/Edit/Delete/Restore/Other)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"npermissiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasComment("Физически лица - историческа таблица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"persons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BirthDate).HasComment("Дата на раждане");

                entity.Property(e => e.CitizenshipCountryId).HasComment("Гражданство - държава");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EgnLnc).HasComment("Идентификатор на лицето - ЕГН / ЛНЧ");

                entity.Property(e => e.FirstName).HasComment("Име");

                entity.Property(e => e.GenderId).HasComment("Пол");

                entity.Property(e => e.HasBulgarianAddressRegistration).HasComment("Флаг дали притежава булгарска адресна регистрация");

                entity.Property(e => e.IdentifierType)
                    .HasDefaultValueSql("'EGN'::character varying")
                    .HasComment("Тип на идентификатора (ЕГН=EGN / ЛНЧ=LNC / Чужденец=FORID)");

                entity.Property(e => e.LastName).HasComment("Фамилия");

                entity.Property(e => e.MiddleName).HasComment("Бащино име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasComment("Роли в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"roles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.ConcurrencyStamp).HasComment("A random value that must change whenever a user is persisted to the store");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.HasInternalAccess).HasComment("Флаг дали ролята е за вътрешни потребители");

                entity.Property(e => e.HasPublicAccess).HasComment("Флаг дали ролята е за публични потребители");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<RolePermission>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.PermissionId })
                    .HasName("PK_UsrMgmt_RolePermissions");

                entity.HasComment("Права за достъп за роля");

                entity.Property(e => e.RoleId).HasComment("Роля");

                entity.Property(e => e.PermissionId).HasComment("Право за достъп");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_RolePermissions_UsrMgmt_Permissions");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_RolePermissions_UsrMgmt_Roles");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasComment("Потребители");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"users_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Email).HasComment("E-mail");

                entity.Property(e => e.HasEauthLogin).HasComment("Флаг дали потребителя влиза през eAuth");

                entity.Property(e => e.HasUserPassLogin).HasComment("Флаг дали потребителя влиза с Username/Password");

                entity.Property(e => e.IsInternalUser).HasComment("Флаг дали портебителят в вътрешен за ИАРА или публичен посетител");

                entity.Property(e => e.Password).HasComment("Парола (хеш) - a salted and hashed representation of the password for this user.");

                entity.Property(e => e.PersonId).HasComment("Физическо лице за този потребител");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Username).HasComment("Потребителско име");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Person)
                    .WithOne(p => p.User)
                    .HasForeignKey<User>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_Users_ISS_Persons");
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_UsrMgmt_UserInfos");

                entity.HasComment("Допълнителна информация за потребители");

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasComment("Потребител");

                entity.Property(e => e.ConfirmEmailKey).HasComment("GUID за потвръждение на мейла");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DepartmentId).HasComment("Отдел в ИАРА (за вътрешни потребители)");

                entity.Property(e => e.EmailKeyValidTo).HasComment("Краен срок за потвърждаване на мейла");

                entity.Property(e => e.FailedLoginCount).HasComment("Брой неуспешни опити за вход");

                entity.Property(e => e.HasFishLawConfirmation)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали потвърждава, че е запознат със ЗРА");

                entity.Property(e => e.HasTermsAgreementConfirmation)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали потвърждава, че е запознат с общите условия");

                entity.Property(e => e.IsEmailConfirmed).HasComment("Флаг дали мейл адреса на потребителя е потвърден");

                entity.Property(e => e.IsLocked).HasComment("Флаг дали достъпа на потребителя до системата е спрян (акаунта е заключен)");

                entity.Property(e => e.LastFailedLoginAttempt).HasComment("Последен неуспешен опит за вход");

                entity.Property(e => e.LastLoginDate).HasComment("Дата на последен успешен опит за вход");

                entity.Property(e => e.NewsSubscriptionType)
                    .HasDefaultValueSql("'None'::character varying")
                    .HasComment("Тип абонамент за новини през мобилното приложение (None/Districts/ALL)");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация на потребителя");

                entity.Property(e => e.SectorId).HasComment("Сектор в ИАРА (за вътрешни потребители)");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено (за вътрешни потребители)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserMustChangePassword).HasComment("Флаг дали потребителят трябва да смени паролата си за вход");

                entity.Property(e => e.UserMustResetProfileData).HasComment("Флаг дали целия профил на user-a трябва да се въведе наново - вкл. смяна на email, ЕГН и т.н.");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserInfo)
                    .HasForeignKey<UserInfo>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserInfos_Users");
            });

            modelBuilder.Entity<UserLegal>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LegalId, e.RoleId })
                    .HasName("PK_UsrMgmt_UserLegals");

                entity.HasComment("Потребители за юридическо лице");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице");

                entity.Property(e => e.RoleId).HasComment("Роля в юридическото лице");

                entity.Property(e => e.AccessValidFrom).HasComment("Начална дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.AccessValidTo).HasComment("Крайна дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Status).HasComment("Статус на лицето във фирмата (Requested/Approved/Blocked)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.LegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Legals_Hist");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Users");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasComment("Роли на потребители");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"userroles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AccessValidFrom).HasComment("Начална дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.AccessValidTo).HasComment("Крайна дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RoleId).HasComment("Роля");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRoles_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_UserRoles_UsrMgmt_Users");
            });

            modelBuilder.HasSequence("acquiredcapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("addresses_id_seq", "Legals");

            modelBuilder.HasSequence("admissionlogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("admissionlogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("applicationchangehistory_id_seq", "Appl");

            modelBuilder.HasSequence("applicationchangehistoryfiles_id_seq", "Appl");

            modelBuilder.HasSequence("applicationchangeofcircumstances_id_seq", "Appl");

            modelBuilder.HasSequence("applicationdelivery_id_seq", "Appl");

            modelBuilder.HasSequence("applicationfiles_id_seq", "Appl");

            modelBuilder.HasSequence("applicationpayments_id_seq", "Appl");

            modelBuilder.HasSequence("applicationpaymenttariffs_id_seq", "Appl");

            modelBuilder.HasSequence("applicationregixcache_id_seq", "Appl");

            modelBuilder.HasSequence("applicationregixchecks_id_seq", "Appl");

            modelBuilder.HasSequence("applications_id_seq", "Appl");

            modelBuilder.HasSequence("aquaculturefacilitycoordinates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityfishes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityinstallations_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityregister_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityregisterfiles_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureformfullsysteminstallations_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacultureformnonfullsysteminstallations_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquaculturehatcheryequipment_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationbasins_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationcollectors_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationnetcages_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationrafts_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationrecirculatorysystems_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturelogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("aquaculturelogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("aquacultureovoscertificates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureusagedocuments_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturewaterlawcertificates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacutlureformbroodstocks_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureformgivenmedicines_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureformstockingmaterials_id_seq", "RInfStat");

            modelBuilder.HasSequence("auanconfiscatedfish_id_seq", "RInsp");

            modelBuilder.HasSequence("auanconfiscatedfishinggear_id_seq", "RInsp");

            modelBuilder.HasSequence("auandelivery_id_seq", "RInsp");

            modelBuilder.HasSequence("auanregister_id_seq", "RInsp");

            modelBuilder.HasSequence("auanregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("auanviolatedregulations_id_seq", "RInsp");

            modelBuilder.HasSequence("auditlog_id_seq", "SysLog");

            modelBuilder.HasSequence("buyerenvironmentlicensefiles_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerenvironmentlicenses_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerlogbooks_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerpremiseusagedocuments_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerregisterfiles_id_seq", "RCPP");

            modelBuilder.HasSequence("buyersregister_id_seq", "RCPP");

            modelBuilder.HasSequence("buyersregister_id_seq", "RInfStat");

            modelBuilder.HasSequence("canceledlogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("cancellationdetails_id_seq", "iss");

            modelBuilder.HasSequence("capacitycertificatesregister_id_seq", "RCap");

            modelBuilder.HasSequence("capacitychangehistory_id_seq", "RCap");

            modelBuilder.HasSequence("capacitychangehistorycertificates_id_seq", "RCap");

            modelBuilder.HasSequence("catchquotafiles_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotas_hist_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotas_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotaunloadports_id_seq", "RQuo");

            modelBuilder.HasSequence("catchrecordfishes_id_seq", "CatchSales");

            modelBuilder.HasSequence("catchrecords_id_seq", "CatchSales");

            modelBuilder.HasSequence("constprotocols_id_seq", "RInsp");

            modelBuilder.HasSequence("countrycapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("crosscheckresults_id_seq", "Checks");

            modelBuilder.HasSequence("crosschecks_id_seq", "Checks");

            modelBuilder.HasSequence("DataProtectionKeys_SEQ", "SysIDSrv");

            modelBuilder.HasSequence("emailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("employeestatcounts_id_seq", "RInfStat");

            modelBuilder.HasSequence("employeestatnumericvalues_id_seq", "RInfStat");

            modelBuilder.HasSequence("errorlog_id_seq", "SysLog");

            modelBuilder.HasSequence("files_id_seq", "iss");

            modelBuilder.HasSequence("firstsalelogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("firstsalelogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("fishermenregister_id_seq", "RPravRib");

            modelBuilder.HasSequence("fishermenregister_registrationnum_seq", "RPravRib");

            modelBuilder.HasSequence("fishermenregisterfiles_id_seq", "RPravRib");

            modelBuilder.HasSequence("fishingassociationfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingassociationmembers_id_seq", "LRib");

            modelBuilder.HasSequence("fishingassociations_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecordfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecordfishes_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecords_id_seq", "LRib");

            modelBuilder.HasSequence("fishinggearmarks_id_seq", "RStRib");

            modelBuilder.HasSequence("fishinggearpingers_id_seq", "RStRib");

            modelBuilder.HasSequence("fishinggearregister_id_seq", "RStRib");

            modelBuilder.HasSequence("fishingticketfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingtickets_id_seq", "LRib");

            modelBuilder.HasSequence("fishvesselsforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("fluxfvmsrequests_id_seq", "iss");

            modelBuilder.HasSequence("fvmsfishngactivityreportlogbookpage_id_seq", "CatchSales");

            modelBuilder.HasSequence("fvmsfishngactivityreports_id_seq", "CatchSales");

            modelBuilder.HasSequence("holdergroundsforuse_id_seq", "RStRib");

            modelBuilder.HasSequence("inspectedfishinggears_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectedpersons_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectioncatchmeasures_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionchecks_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionengines_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectioninspectors_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionlastportvisits_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionlogbookpages_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionobservationtexts_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionobservationtools_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionpatrolvehicles_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionpermitlicences_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionregister_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionvesselactivities_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionvessels_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectors_id_seq", "RInsp");

            modelBuilder.HasSequence("installationaquariums_id_seq", "RAquaSt");

            modelBuilder.HasSequence("installationbasins_id_seq", "RAquaSt");

            modelBuilder.HasSequence("installationdams_id_seq", "RAquaSt");

            modelBuilder.HasSequence("legalemailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("legalfiles_id_seq", "Legals");

            modelBuilder.HasSequence("legalphonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("legals_id_seq", "Legals");

            modelBuilder.HasSequence("legalsaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("letterofattorney_id_seq", "Appl");

            modelBuilder.HasSequence("logbookpageproducts_id_seq", "CatchSales");

            modelBuilder.HasSequence("logbookpermitlicenses_id_seq", "CatchSales");

            modelBuilder.HasSequence("logbooks_id_seq", "CatchSales");

            modelBuilder.HasSequence("mapapplicationtypedeliverytypes_id_seq", "Appl");

            modelBuilder.HasSequence("mapstatformtypesemployeestattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("mapstatformtypesnumericstattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("maptarifffishes_id_seq", "Appl");

            modelBuilder.HasSequence("maptarifffishinggears_id_seq", "Appl");

            modelBuilder.HasSequence("mapwatertypepermittypes_id_seq", "RStRib");

            modelBuilder.HasSequence("MDR_ACDR_Catch_Status_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Agreement_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Boolean_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Chartering_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Comm_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Conversion_Factor_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Country_Currency_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_CR_Fishing_Category_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Land_Indicator_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Report_Type_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Sov_Waters_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Unit_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Data_Type_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_Deck_Machinery_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Effort_Zone_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Bait_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BFT_Size_Category_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BR_Def_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BR_EU_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Catch_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Characteristic_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Device_Gear_Attachment_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Fishery_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Characteristic_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Problem_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Recovery_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Role_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_NEAFC_Stock_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Query_Parameter_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Query_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Arrival_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Departure_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Discard_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Entry_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Trip_Id_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Vessel_Role_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FAO_Fishing_Area_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FAO_species_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FAR_Fish_Category_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FARM_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Fish_Freshness_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Packaging_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Fish_Presentation_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Preservation_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Size_Category_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Fish_Size_Class_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FishFinder_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Fishing_Trip_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLAP_Characteristic_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Coastal_Party_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Doc_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Flag_State_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Id_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLAP_Quota_type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Request_Purpose_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_WF_Steps_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLUX_Contact_Role_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_FA_FMC_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_FA_Report_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_FA_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_GP_Message_Id_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Party_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Purpose_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Response_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Val_Level_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Val_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Location_Char_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_Location_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_MDR_Query_type_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_FLUX_Process_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Party_Id_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Party_Role_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Query_Param_Role_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Query_Param_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Telecom_Use_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Unit_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Vehicle_Id_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Admin_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Constr_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Dim_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Engine_Role_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Gear_Role_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Hist_Char_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Id_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Position_Type_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Query_Param_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Query_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Regstr_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Report_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Tech_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Gear_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Gender_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_GFCM_GSA_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Location_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Management_Area_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_MDM_BR_Def_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_MDM_BR_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_Member_State_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Navig_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Product_Destination_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Propeller_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Quota_Location_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Quota_Object_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_RFMOs_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Sales_BR_Def_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Sales_BR_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Stat_Rect_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Storage_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Target_Species_Group_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Territory_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_UN_Data_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Vehicle_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Vessel_Activity_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Vessel_BR_Def_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_BR_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Category_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Crew_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Vessel_Event_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Export_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Hull_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Photo_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Port_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Public_Aid_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Segment_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Storage_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Vessel_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_VMS_BR_Def_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_BR_Param_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_BR_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_Satellite_Oper_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Weight_Measure_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("mobileversions_id_seq", "Admin");

            modelBuilder.HasSequence("naddresstypes_id_seq", "Legals");

            modelBuilder.HasSequence("nakpostanovleniaregister_id_seq", "RInsp");

            modelBuilder.HasSequence("napplicationstatuses_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationstatushierarchy_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationstatushierarchytypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypegroups_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypehiertypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypesubmittedbyroles_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationтypetariff_id_seq", "Appl");

            modelBuilder.HasSequence("naquacultureinstallationtypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("naquaculturepowersupplytypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("naquaculturewaterareatypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nauandeliveryconfirmationtypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nauandeliverytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nauditlogactiontypes_id_seq", "SysLog");

            modelBuilder.HasSequence("nauditlogtables_id_seq", "SysLog");

            modelBuilder.HasSequence("nbuyerlicensetypes_id_seq", "RCPP");

            modelBuilder.HasSequence("nbuyerstatuses_id_seq", "RCPP");

            modelBuilder.HasSequence("nbuyertypes_id_seq", "RCPP");

            modelBuilder.HasSequence("ncancellationreasons_id_seq", "iss");

            modelBuilder.HasSequence("ncatchfishunloadtypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("ncatchinspectiontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ncatchtypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("ncatchzones_id_seq", "CatchSales");

            modelBuilder.HasSequence("nchangeofcircumstancestypes_id_seq", "Appl");

            modelBuilder.HasSequence("ncheckresolutions_id_seq", "Checks");

            modelBuilder.HasSequence("ncommercialfishingpermitlicensetypes_id_seq", "RStRib");

            modelBuilder.HasSequence("ncommercialfishingpermittypes_id_seq", "RStRib");

            modelBuilder.HasSequence("nconfiscationactions_id_seq", "RInsp");

            modelBuilder.HasSequence("nconfiscationinstitutions_id_seq", "RInsp");

            modelBuilder.HasSequence("ncountries_id_seq", "Noms");

            modelBuilder.HasSequence("ncourts_id_seq", "RInsp");

            modelBuilder.HasSequence("ndeliverytypes_id_seq", "Appl");

            modelBuilder.HasSequence("ndepartments_id_seq", "Noms");

            modelBuilder.HasSequence("ndistricts_id_seq", "Noms");

            modelBuilder.HasSequence("ndocumenttypes_id_seq", "Legals");

            modelBuilder.HasSequence("nemployeestattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("nemployeestattypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("neventtypegroups_id_seq", "RShips");

            modelBuilder.HasSequence("neventtypes_id_seq", "RShips");

            modelBuilder.HasSequence("news_id_seq", "News");

            modelBuilder.HasSequence("newsdistricts_id_seq", "News");

            modelBuilder.HasSequence("newsdistrictusersubscriptions_id_seq", "News");

            modelBuilder.HasSequence("newsfiles_id_seq", "News");

            modelBuilder.HasSequence("nfiletypes_id_seq", "iss");

            modelBuilder.HasSequence("nfishes_id_seq", "Noms");

            modelBuilder.HasSequence("nfishfamilies_id_seq", "Noms");

            modelBuilder.HasSequence("nfishfreshness_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishgroups_id_seq", "Noms");

            modelBuilder.HasSequence("nfishinggearmarkstatuses_id_seq", "RStRib");

            modelBuilder.HasSequence("nfishinggearpingerstatuses_id_seq", "RStRib");

            modelBuilder.HasSequence("nfishinggears_id_seq", "Noms");

            modelBuilder.HasSequence("nfishinggeartypes_id_seq", "Noms");

            modelBuilder.HasSequence("nfishpresentations_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsalepurpose_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsizecategories_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsizes_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfleettypes_id_seq", "RShips");

            modelBuilder.HasSequence("nfueltypes_id_seq", "Noms");

            modelBuilder.HasSequence("ngenders_id_seq", "Legals");

            modelBuilder.HasSequence("ngrosstonagestatintervals_id_seq", "RInfStat");

            modelBuilder.HasSequence("nhatcheryequipmenttypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nholdergroundsforusetypes_id_seq", "RStRib");

            modelBuilder.HasSequence("nhullmaterials_id_seq", "RShips");

            modelBuilder.HasSequence("ninspectedpersontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionchecktypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionobservationtextcategories_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionstates_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectiontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninstallationbasinmaterialtypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationbasinpurposetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationcollectortypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationnetcagetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstitutions_id_seq", "RInsp");

            modelBuilder.HasSequence("nlogbookstatuses_id_seq", "CatchSales");

            modelBuilder.HasSequence("nlogbooktypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("nmunicipalities_id_seq", "Noms");

            modelBuilder.HasSequence("nnomenclaturegroups_id_seq", "Noms");

            modelBuilder.HasSequence("nnomenclaturetables_id_seq", "Noms");

            modelBuilder.HasSequence("nnotificationtemplates_id_seq", "Admin");

            modelBuilder.HasSequence("nnumericstattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("nnumericstattypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nobservationtools_id_seq", "RInsp");

            modelBuilder.HasSequence("npatrolvehicletypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npaymentstatuses_id_seq", "Appl");

            modelBuilder.HasSequence("npaymenttypes_id_seq", "Appl");

            modelBuilder.HasSequence("npenalauthoritytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npenaldecreestatustypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npermissiontypes_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("npermitreasons_id_seq", "RNauR");

            modelBuilder.HasSequence("npermitstatuses_id_seq", "RNauR");

            modelBuilder.HasSequence("npopulatedareas_id_seq", "Noms");

            modelBuilder.HasSequence("nportgroups_id_seq", "Noms");

            modelBuilder.HasSequence("nports_id_seq", "Noms");

            modelBuilder.HasSequence("npoundnetcategorytype_id_seq", "RDal");

            modelBuilder.HasSequence("npoundnetseasontype_id_seq", "RDal");

            modelBuilder.HasSequence("npoundnetstatuses_id_seq", "RDal");

            modelBuilder.HasSequence("npublicaidtypes_id_seq", "RShips");

            modelBuilder.HasSequence("nreportparameters_id_seq", "Rep");

            modelBuilder.HasSequence("nrequiredfiletypes_id_seq", "iss");

            modelBuilder.HasSequence("nreworkproducttypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nsailareas_id_seq", "RShips");

            modelBuilder.HasSequence("nsectors_id_seq", "Noms");

            modelBuilder.HasSequence("nsegments_id_seq", "RShips");

            modelBuilder.HasSequence("nshipassociations_id_seq", "RShips");

            modelBuilder.HasSequence("nstatisticalformtypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nsubmittedbyroles_id_seq", "Appl");

            modelBuilder.HasSequence("nsuspensionreasons_id_seq", "RStRib");

            modelBuilder.HasSequence("nsuspensiontypes_id_seq", "RStRib");

            modelBuilder.HasSequence("ntariff_id_seq", "Appl");

            modelBuilder.HasSequence("nterritoryunits_id_seq", "Noms");

            modelBuilder.HasSequence("nticketperiods_id_seq", "LRib");

            modelBuilder.HasSequence("nticketstatuses_id_seq", "LRib");

            modelBuilder.HasSequence("ntickettypes_id_seq", "LRib");

            modelBuilder.HasSequence("ntranslationgroups_id_seq", "Admin");

            modelBuilder.HasSequence("ntranslationresources_id_seq", "Admin");

            modelBuilder.HasSequence("ntransportvehicletypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nturbotsizegroups_id_seq", "CatchSales");

            modelBuilder.HasSequence("nusagedocumenttypes_id_seq", "iss");

            modelBuilder.HasSequence("nvesselactivities_id_seq", "RInsp");

            modelBuilder.HasSequence("nvessellengthstatintervals_id_seq", "RInfStat");

            modelBuilder.HasSequence("nvesseltypes_id_seq", "RShips");

            modelBuilder.HasSequence("nviolationsignaltypes_id_seq", "Noms");

            modelBuilder.HasSequence("nwaterbodytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nwaterlawcertificatetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nwatertypes_id_seq", "RStRib");

            modelBuilder.HasSequence("origindeclarationfishes_id_seq", "CatchSales");

            modelBuilder.HasSequence("origindeclarations_id_seq", "CatchSales");

            modelBuilder.HasSequence("penaldecreepaymentschedule_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreeseizedfish_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreeseizedfishinggear_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreesregister_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreesregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreestatuses_id_seq", "RInsp");

            modelBuilder.HasSequence("permissiongroups_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("permissions_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("permitlicenseregisterfishes_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicenseregisterfishinggears_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesregister_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesregisterfiles_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesuspensionchangehistory_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregister_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfiles_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfishes_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfishinggears_id_seq", "RStRib");

            modelBuilder.HasSequence("permitsuspensionchangehistory_id_seq", "RStRib");

            modelBuilder.HasSequence("personaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("persondocuments_id_seq", "Legals");

            modelBuilder.HasSequence("personemailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("personfiles_id_seq", "Legals");

            modelBuilder.HasSequence("personphonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("persons_id_seq", "Legals");

            modelBuilder.HasSequence("phonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("poundnetcoordinates_id_seq", "RDal");

            modelBuilder.HasSequence("poundnetregister_id_seq", "RDal");

            modelBuilder.HasSequence("reportgroups_id_seq", "Rep");

            modelBuilder.HasSequence("reportparameters_id_seq", "Rep");

            modelBuilder.HasSequence("reportrolepermissions_id_seq", "Rep");

            modelBuilder.HasSequence("reports_id_seq", "Rep");

            modelBuilder.HasSequence("reportuserpermissions_id_seq", "Rep");

            modelBuilder.HasSequence("reworkformfiles_id_seq", "RInfStat");

            modelBuilder.HasSequence("reworkforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("reworkproducts_id_seq", "RInfStat");

            modelBuilder.HasSequence("reworkrawmaterials_id_seq", "RInfStat");

            modelBuilder.HasSequence("roles_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("scientificpermitoutingcatches_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitoutings_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitowners_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitregister_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitregisterfiles_id_seq", "RNauR");

            modelBuilder.HasSequence("shipcapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("shipcatchquotas_hist_id_seq", "RQuo");

            modelBuilder.HasSequence("shipcatchquotas_id_seq", "RQuo");

            modelBuilder.HasSequence("shipinspections_id_seq", "RInsp");

            modelBuilder.HasSequence("shiplogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("shiplogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("shipowners_id_seq", "RShips");

            modelBuilder.HasSequence("shipregister_id_seq", "RShips");

            modelBuilder.HasSequence("shipregister_shipuid_seq", "RShips");

            modelBuilder.HasSequence("shipregisterfiles_id_seq", "RShips");

            modelBuilder.HasSequence("SigningKeys_SEQ", "SysIDSrv");

            modelBuilder.HasSequence("statisticalformfiles_id_seq", "RInfStat");

            modelBuilder.HasSequence("statisticalformsregister_id_seq", "RInfStat");

            modelBuilder.HasSequence("systemparameters_id_seq", "Admin");

            modelBuilder.HasSequence("transportationlogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("transportationlogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("unregisteredpersons_id_seq", "RInsp");

            modelBuilder.HasSequence("unregisteredvessels_id_seq", "RInsp");

            modelBuilder.HasSequence("usagedocuments_id_seq", "iss");

            modelBuilder.HasSequence("userloginproviders_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("userlogintokens_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("usermobiledevices_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("userroles_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("users_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("vesseldaysatsea_id_seq", "RInfStat");

            modelBuilder.HasSequence("workerqueues_id_seq", "Admin");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
