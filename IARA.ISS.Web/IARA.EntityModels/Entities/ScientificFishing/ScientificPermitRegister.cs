// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър разрешителни за научен риболов
    /// </summary>
    [Table("ScientificPermitRegister", Schema = "RNauR")]
    [Index(nameof(ApplicationId), Name = "IXFK_ScientificPermitRegister_Applications")]
    [Index(nameof(CancellationDetailsId), Name = "IXFK_ScientificPermitRegister_CancellationDetails")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_ScientificPermitRegister_Legals_Hist")]
    [Index(nameof(PermitStatusId), Name = "IXFK_ScientificPermitRegister_NPermitStatuses")]
    [Index(nameof(ShipId), Name = "IXFK_ScientificPermitRegister_RS_ShipRegister")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_ScientificPermitRegister_ScientificPermitRegister")]
    [Index(nameof(SubmittedForLegalId), nameof(RecordType), nameof(PermitValidTo), Name = "UK_RNauR_ScientificPermitRegister", IsUnique = true)]
    public partial class ScientificPermitRegister
    {
        public ScientificPermitRegister()
        {
            InverseRegisterApplication = new HashSet<ScientificPermitRegister>();
            ScientificPermitOutings = new HashSet<ScientificPermitOuting>();
            ScientificPermitOwners = new HashSet<ScientificPermitOwner>();
            ScientificPermitReasons = new HashSet<ScientificPermitReason>();
            ScientificPermitRegisterFiles = new HashSet<ScientificPermitRegisterFile>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Дата на регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime PermitRegistrationDateTime { get; set; }
        /// <summary>
        /// Статус на заявлението (Application/Requested/Approved/Canceled/Expired)
        /// </summary>
        [Column("PermitStatusID")]
        public int PermitStatusId { get; set; }
        /// <summary>
        /// Разрешително валидно от
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime PermitValidFrom { get; set; }
        /// <summary>
        /// Разрешително валидно до
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime PermitValidTo { get; set; }
        /// <summary>
        /// Заявител - Научна организация
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int SubmittedForLegalId { get; set; }
        /// <summary>
        /// Заявител - длъжност в организацията
        /// </summary>
        [Required]
        [StringLength(500)]
        public string SubmittedByPersonPosition { get; set; }
        /// <summary>
        /// Начало на период на изследването
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime ResearchPeriodFrom { get; set; }
        /// <summary>
        /// Край на период на изследването
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime ResearchPeriodTo { get; set; }
        /// <summary>
        /// Водни обекти
        /// </summary>
        [Required]
        [StringLength(4000)]
        public string ResearchWaterAreas { get; set; }
        /// <summary>
        /// Цели на изследването
        /// </summary>
        [Required]
        [StringLength(4000)]
        public string ResearchGoalsDesc { get; set; }
        /// <summary>
        /// Видове водни организми
        /// </summary>
        [StringLength(4000)]
        public string FishTypesDesc { get; set; }
        /// <summary>
        /// Видове водни организми от Приложение 4 на ЗБР
        /// </summary>
        [Column("FishTypesApp4ZBRDesc")]
        [StringLength(4000)]
        public string FishTypesApp4Zbrdesc { get; set; }
        /// <summary>
        /// Речни раци и каменнти (поточни) раци
        /// </summary>
        [StringLength(4000)]
        public string FishTypesCrayFish { get; set; }
        /// <summary>
        /// Уреди
        /// </summary>
        [StringLength(4000)]
        public string FishingGearDescr { get; set; }
        /// <summary>
        /// Флаг дали корабът е регистриран в корабния регистър
        /// </summary>
        public bool IsShipRegistered { get; set; }
        /// <summary>
        /// Регистриран кораб
        /// </summary>
        [Column("ShipID")]
        public int? ShipId { get; set; }
        /// <summary>
        /// Име на кораба (ако не е регистриран в регистъра)
        /// </summary>
        [StringLength(500)]
        public string ShipName { get; set; }
        /// <summary>
        /// Външна маркировка на кораба (ако не е регистриран в регистъра)
        /// </summary>
        [StringLength(50)]
        public string ShipExternalMark { get; set; }
        /// <summary>
        /// Име на капитан на кораба (ако не е регистриран в регистъра)
        /// </summary>
        [StringLength(500)]
        public string ShipCaptainName { get; set; }
        /// <summary>
        /// Съгласуващ орган
        /// </summary>
        [StringLength(500)]
        public string CoordinationCommittee { get; set; }
        /// <summary>
        /// Номер на съгласувателно писмо
        /// </summary>
        [StringLength(50)]
        public string CoordinationLetterNo { get; set; }
        /// <summary>
        /// Дата на съгласуване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? CoordinationDate { get; set; }
        /// <summary>
        /// Бележки и коментари от съгласуващия орган
        /// </summary>
        [StringLength(4000)]
        public string CoordinationComments { get; set; }
        /// <summary>
        /// Детайли за анулиране
        /// </summary>
        [Column("CancellationDetailsID")]
        public int? CancellationDetailsId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("ScientificPermitRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(CancellationDetailsId))]
        [InverseProperty(nameof(CancellationDetail.ScientificPermitRegisters))]
        public virtual CancellationDetail CancellationDetails { get; set; }
        [ForeignKey(nameof(PermitStatusId))]
        [InverseProperty(nameof(NpermitStatus.ScientificPermitRegisters))]
        public virtual NpermitStatus PermitStatus { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(ScientificPermitRegister.InverseRegisterApplication))]
        public virtual ScientificPermitRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(ShipId))]
        [InverseProperty(nameof(ShipRegister.ScientificPermitRegisters))]
        public virtual ShipRegister Ship { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.ScientificPermitRegisters))]
        public virtual Legal SubmittedForLegal { get; set; }
        [InverseProperty(nameof(ScientificPermitRegister.RegisterApplication))]
        public virtual ICollection<ScientificPermitRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(ScientificPermitOuting.ScientificPermit))]
        public virtual ICollection<ScientificPermitOuting> ScientificPermitOutings { get; set; }
        [InverseProperty(nameof(ScientificPermitOwner.ScientificPermit))]
        public virtual ICollection<ScientificPermitOwner> ScientificPermitOwners { get; set; }
        [InverseProperty(nameof(ScientificPermitReason.ScientificPermit))]
        public virtual ICollection<ScientificPermitReason> ScientificPermitReasons { get; set; }
        [InverseProperty(nameof(ScientificPermitRegisterFile.Record))]
        public virtual ICollection<ScientificPermitRegisterFile> ScientificPermitRegisterFiles { get; set; }
    }
}