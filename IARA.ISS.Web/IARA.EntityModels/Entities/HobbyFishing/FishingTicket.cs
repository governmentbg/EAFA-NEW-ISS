// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Билети за любителски риболов
    /// </summary>
    [Table("FishingTickets", Schema = "LRib")]
    [Index(nameof(CreatedOn), Name = "IDX_LRib_FishingTickets_CreatedOn")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_LRib_FishingTickets_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_FishingTickets_Applications")]
    [Index(nameof(CreatedByUserId), Name = "IXFK_FishingTickets_CreatedBy_Users")]
    [Index(nameof(DuplicateOfTicketId), Name = "IXFK_FishingTickets_DuplicateFishingTickets")]
    [Index(nameof(AssociationMemberId), Name = "IXFK_FishingTickets_FishingAssociationMembers")]
    [Index(nameof(CreatedByFishingAssociationId), Name = "IXFK_FishingTickets_FishingAssociations")]
    [Index(nameof(TicketStatusId), Name = "IXFK_FishingTickets_NTicketStatuses")]
    [Index(nameof(PersonRepresentativeId), Name = "IXFK_FishingTickets_Persons_Hist_PersonRepresentative")]
    [Index(nameof(PersonId), Name = "IXFK_LRib_FishingTickets_ISS_Persons")]
    [Index(nameof(TicketPeriodId), Name = "IXFK_LRib_FishingTickets_LRib_NTicketPeriods")]
    [Index(nameof(TicketTypeId), Name = "IXFK_LRib_FishingTickets_LRib_NTicketTypes")]
    [Index(nameof(PersonId), nameof(TicketPeriodId), nameof(TicketTypeId), nameof(TicketValidTo), Name = "UK_LRib_FishingTickets", IsUnique = true)]
    public partial class FishingTicket
    {
        public FishingTicket()
        {
            FishingCatchRecords = new HashSet<FishingCatchRecord>();
            FishingTicketFiles = new HashSet<FishingTicketFile>();
            InverseDuplicateOfTicket = new HashSet<FishingTicket>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип на билета (стандартен, до 14г и др.)
        /// </summary>
        [Column("TicketTypeID")]
        public int TicketTypeId { get; set; }
        /// <summary>
        /// Период на билета
        /// </summary>
        [Column("TicketPeriodID")]
        public int TicketPeriodId { get; set; }
        /// <summary>
        /// Лице, за което е билета
        /// </summary>
        [Column("PersonID")]
        public int PersonId { get; set; }
        /// <summary>
        /// Цена на билета
        /// </summary>
        public decimal Price { get; set; }
        /// <summary>
        /// Статус на билет (Заявен/Издаден/Потвърден/Анулиран/Дубликат)
        /// </summary>
        [Column("TicketStatusID")]
        public int TicketStatusId { get; set; }
        /// <summary>
        /// Начална дата и час на валидност на билета
        /// </summary>
        public DateTime TicketValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на билета
        /// </summary>
        public DateTime TicketValidTo { get; set; }
        /// <summary>
        /// Уникален номер на билет
        /// </summary>
        [StringLength(50)]
        public string TicketNum { get; set; }
        /// <summary>
        /// Представител (за непълнолетни лица)
        /// </summary>
        [Column("PersonRepresentativeID")]
        public int? PersonRepresentativeId { get; set; }
        /// <summary>
        /// Издаден от потребител
        /// </summary>
        [Column("CreatedByUserID")]
        public int CreatedByUserId { get; set; }
        /// <summary>
        /// Членство в сдружение
        /// </summary>
        [Column("AssociationMemberID")]
        public int? AssociationMemberId { get; set; }
        /// <summary>
        /// Издаден от сдружение
        /// </summary>
        [Column("CreatedByFishingAssociationID")]
        public int? CreatedByFishingAssociationId { get; set; }
        /// <summary>
        /// Коментари
        /// </summary>
        [StringLength(4000)]
        public string Comment { get; set; }
        /// <summary>
        /// Билет, за който текущия е дубликат
        /// </summary>
        [Column("DuplicateOfTicketID")]
        public int? DuplicateOfTicketId { get; set; }
        /// <summary>
        /// Флаг дали билета е подаден онлайн (и само подателя може да редактира данните по заявлението) или е подаден на хартия (и служител на ИАРА може да го редактира)
        /// </summary>
        public bool IsOnlineTicket { get; set; }
        /// <summary>
        /// Флаг че лицето е съгласно със ЗРА
        /// </summary>
        [Required]
        public bool? HasUserConfirmed { get; set; }
        /// <summary>
        /// Номер на експертно решение за ТЕЛК
        /// </summary>
        [Column("TELKNum")]
        [StringLength(50)]
        public string Telknum { get; set; }
        /// <summary>
        /// Дата на валидност на експертно решение от ТЕЛК
        /// </summary>
        [Column("TELKValidTo", TypeName = "date")]
        public DateTime? TelkvalidTo { get; set; }
        /// <summary>
        /// Флаг дали решението на ТЕЛК е безсрочно
        /// </summary>
        [Column("TELKIsIndefinite")]
        public bool? TelkisIndefinite { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("FishingTickets")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(AssociationMemberId))]
        [InverseProperty(nameof(FishingAssociationMember.FishingTickets))]
        public virtual FishingAssociationMember AssociationMember { get; set; }
        [ForeignKey(nameof(CreatedByFishingAssociationId))]
        [InverseProperty(nameof(FishingAssociation.FishingTickets))]
        public virtual FishingAssociation CreatedByFishingAssociation { get; set; }
        [ForeignKey(nameof(CreatedByUserId))]
        [InverseProperty(nameof(User.FishingTickets))]
        public virtual User CreatedByUser { get; set; }
        [ForeignKey(nameof(DuplicateOfTicketId))]
        [InverseProperty(nameof(FishingTicket.InverseDuplicateOfTicket))]
        public virtual FishingTicket DuplicateOfTicket { get; set; }
        [ForeignKey(nameof(PersonId))]
        [InverseProperty("FishingTicketPeople")]
        public virtual Person Person { get; set; }
        [ForeignKey(nameof(PersonRepresentativeId))]
        [InverseProperty("FishingTicketPersonRepresentatives")]
        public virtual Person PersonRepresentative { get; set; }
        [ForeignKey(nameof(TicketPeriodId))]
        [InverseProperty(nameof(NticketPeriod.FishingTickets))]
        public virtual NticketPeriod TicketPeriod { get; set; }
        [ForeignKey(nameof(TicketStatusId))]
        [InverseProperty(nameof(NticketStatus.FishingTickets))]
        public virtual NticketStatus TicketStatus { get; set; }
        [ForeignKey(nameof(TicketTypeId))]
        [InverseProperty(nameof(NticketType.FishingTickets))]
        public virtual NticketType TicketType { get; set; }
        [InverseProperty(nameof(FishingCatchRecord.Ticket))]
        public virtual ICollection<FishingCatchRecord> FishingCatchRecords { get; set; }
        [InverseProperty(nameof(FishingTicketFile.Record))]
        public virtual ICollection<FishingTicketFile> FishingTicketFiles { get; set; }
        [InverseProperty(nameof(FishingTicket.DuplicateOfTicket))]
        public virtual ICollection<FishingTicket> InverseDuplicateOfTicket { get; set; }
    }
}