// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Юридически лица - историческа таблица
    /// </summary>
    [Table("Legals", Schema = "Legals")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), nameof(RecordType), Name = "IDX_Legals_Legals_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_Legals_Applications")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_Legals_Legals")]
    [Index(nameof(LegalOwnerId), Name = "IXFK_Legals_Persons")]
    [Index(nameof(Eik), nameof(RecordType), nameof(ValidTo), Name = "UK_Legals", IsUnique = true)]
    public partial class Legal
    {
        public Legal()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            Applications = new HashSet<Application>();
            AquacultureFacilityRegisters = new HashSet<AquacultureFacilityRegister>();
            AquacultureLogBookPages = new HashSet<AquacultureLogBookPage>();
            Auanregisters = new HashSet<Auanregister>();
            BuyerRegisters = new HashSet<BuyerRegister>();
            CapacityCertificatesRegisters = new HashSet<CapacityCertificatesRegister>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            InspectedPeople = new HashSet<InspectedPerson>();
            InverseRegisterApplication = new HashSet<Legal>();
            LegalEmailAddresses = new HashSet<LegalEmailAddress>();
            LegalFiles = new HashSet<LegalFile>();
            LegalPhoneNumbers = new HashSet<LegalPhoneNumber>();
            LegalsAddresses = new HashSet<LegalsAddress>();
            LogBooks = new HashSet<LogBook>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisters = new HashSet<PermitRegister>();
            ScientificPermitRegisters = new HashSet<ScientificPermitRegister>();
            ShipOwners = new HashSet<ShipOwner>();
            StatisticalFormsRegisters = new HashSet<StatisticalFormsRegister>();
            UsageDocuments = new HashSet<UsageDocument>();
            UserLegals = new HashSet<UserLegal>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int? ApplicationId { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// ЕИК/БУЛСТАТ
        /// </summary>
        [Required]
        [Column("EIK")]
        [StringLength(50)]
        public string Eik { get; set; }
        /// <summary>
        /// Забележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Собственик/Материално отговорно лице
        /// </summary>
        [Column("LegalOwnerID")]
        public int? LegalOwnerId { get; set; }
        /// <summary>
        /// Флаг дали МОЛ съвпада със заявителя на услугата
        /// </summary>
        public bool IsLegalOwnerSameAsApplicant { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("Legals")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(LegalOwnerId))]
        [InverseProperty(nameof(Person.Legals))]
        public virtual Person LegalOwner { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(Legal.InverseRegisterApplication))]
        public virtual Legal RegisterApplication { get; set; }
        [InverseProperty("AssociationLegal")]
        public virtual FishingAssociation FishingAssociation { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Legal))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty("SubmittedForLegal")]
        public virtual ICollection<Application> Applications { get; set; }
        [InverseProperty(nameof(AquacultureFacilityRegister.SubmittedForLegal))]
        public virtual ICollection<AquacultureFacilityRegister> AquacultureFacilityRegisters { get; set; }
        [InverseProperty(nameof(AquacultureLogBookPage.LegalBuyer))]
        public virtual ICollection<AquacultureLogBookPage> AquacultureLogBookPages { get; set; }
        [InverseProperty(nameof(Auanregister.InspectedLegal))]
        public virtual ICollection<Auanregister> Auanregisters { get; set; }
        [InverseProperty(nameof(BuyerRegister.SubmittedForLegal))]
        public virtual ICollection<BuyerRegister> BuyerRegisters { get; set; }
        [InverseProperty(nameof(CapacityCertificatesRegister.Legal))]
        public virtual ICollection<CapacityCertificatesRegister> CapacityCertificatesRegisters { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.SubmittedForLegal))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(InspectedPerson.Legal))]
        public virtual ICollection<InspectedPerson> InspectedPeople { get; set; }
        [InverseProperty(nameof(Legal.RegisterApplication))]
        public virtual ICollection<Legal> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(LegalEmailAddress.Legal))]
        public virtual ICollection<LegalEmailAddress> LegalEmailAddresses { get; set; }
        [InverseProperty(nameof(LegalFile.Record))]
        public virtual ICollection<LegalFile> LegalFiles { get; set; }
        [InverseProperty(nameof(LegalPhoneNumber.Legal))]
        public virtual ICollection<LegalPhoneNumber> LegalPhoneNumbers { get; set; }
        [InverseProperty(nameof(LegalsAddress.Legal))]
        public virtual ICollection<LegalsAddress> LegalsAddresses { get; set; }
        [InverseProperty(nameof(LogBook.Legal))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.PointsOwnerLegal))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.SubmittedForLegal))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.SubmittedForLegal))]
        public virtual ICollection<PermitRegister> PermitRegisters { get; set; }
        [InverseProperty(nameof(ScientificPermitRegister.SubmittedForLegal))]
        public virtual ICollection<ScientificPermitRegister> ScientificPermitRegisters { get; set; }
        [InverseProperty(nameof(ShipOwner.OwnerLegal))]
        public virtual ICollection<ShipOwner> ShipOwners { get; set; }
        [InverseProperty(nameof(StatisticalFormsRegister.SubmittedForLegal))]
        public virtual ICollection<StatisticalFormsRegister> StatisticalFormsRegisters { get; set; }
        [InverseProperty(nameof(UsageDocument.LessorLegal))]
        public virtual ICollection<UsageDocument> UsageDocuments { get; set; }
        [InverseProperty(nameof(UserLegal.Legal))]
        public virtual ICollection<UserLegal> UserLegals { get; set; }
    }
}