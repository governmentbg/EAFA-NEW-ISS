// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Физически лица - историческа таблица
    /// </summary>
    [Table("Persons", Schema = "Legals")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_Legals_Persons_Migration")]
    [Index(nameof(CitizenshipCountryId), Name = "IXFK_Legals_PersonsCitizenship_ISS_Countries")]
    [Index(nameof(GenderId), Name = "IXFK_Persons_NGenders")]
    [Index(nameof(EgnLnc), nameof(IdentifierType), nameof(ValidTo), Name = "UK_Persons", IsUnique = true)]
    public partial class Person
    {
        public Person()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            ApplicationSubmittedByPeople = new HashSet<Application>();
            ApplicationSubmittedForPeople = new HashSet<Application>();
            AquacultureFacilityRegisters = new HashSet<AquacultureFacilityRegister>();
            AquacultureLogBookPages = new HashSet<AquacultureLogBookPage>();
            Auanregisters = new HashSet<Auanregister>();
            BuyerRegisterAgents = new HashSet<BuyerRegister>();
            BuyerRegisterOrganizingPeople = new HashSet<BuyerRegister>();
            BuyerRegisterSubmittedForPeople = new HashSet<BuyerRegister>();
            CapacityCertificatesRegisters = new HashSet<CapacityCertificatesRegister>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            FishermenRegisters = new HashSet<FishermenRegister>();
            FishingAssociationMembers = new HashSet<FishingAssociationMember>();
            FishingTicketPeople = new HashSet<FishingTicket>();
            FishingTicketPersonRepresentatives = new HashSet<FishingTicket>();
            InspectedPeople = new HashSet<InspectedPerson>();
            Legals = new HashSet<Legal>();
            LogBooks = new HashSet<LogBook>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisters = new HashSet<PermitRegister>();
            PersonAddresses = new HashSet<PersonAddress>();
            PersonDocuments = new HashSet<PersonDocument>();
            PersonEmailAddresses = new HashSet<PersonEmailAddress>();
            PersonFiles = new HashSet<PersonFile>();
            PersonPhoneNumbers = new HashSet<PersonPhoneNumber>();
            ScientificPermitOwners = new HashSet<ScientificPermitOwner>();
            ShipOwners = new HashSet<ShipOwner>();
            StatisticalFormsRegisters = new HashSet<StatisticalFormsRegister>();
            UsageDocuments = new HashSet<UsageDocument>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(200)]
        public string FirstName { get; set; }
        /// <summary>
        /// Бащино име
        /// </summary>
        [StringLength(200)]
        public string MiddleName { get; set; }
        /// <summary>
        /// Фамилия
        /// </summary>
        [Required]
        [StringLength(200)]
        public string LastName { get; set; }
        /// <summary>
        /// Идентификатор на лицето - ЕГН / ЛНЧ
        /// </summary>
        [Required]
        [Column("EGN_LNC")]
        [StringLength(20)]
        public string EgnLnc { get; set; }
        /// <summary>
        /// Тип на идентификатора (ЕГН=EGN / ЛНЧ=LNC / Чужденец=FORID)
        /// </summary>
        [Required]
        [StringLength(20)]
        public string IdentifierType { get; set; }
        /// <summary>
        /// Пол
        /// </summary>
        [Column("GenderID")]
        public int? GenderId { get; set; }
        /// <summary>
        /// Дата на раждане
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? BirthDate { get; set; }
        /// <summary>
        /// Гражданство - държава
        /// </summary>
        [Column("CitizenshipCountryID")]
        public int? CitizenshipCountryId { get; set; }
        /// <summary>
        /// Флаг дали притежава булгарска адресна регистрация
        /// </summary>
        public bool? HasBulgarianAddressRegistration { get; set; }
        /// <summary>
        /// Забележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CitizenshipCountryId))]
        [InverseProperty(nameof(Ncountry.People))]
        public virtual Ncountry CitizenshipCountry { get; set; }
        [ForeignKey(nameof(GenderId))]
        [InverseProperty(nameof(Ngender.People))]
        public virtual Ngender Gender { get; set; }
        [InverseProperty("Person")]
        public virtual User User { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Person))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(Application.SubmittedByPerson))]
        public virtual ICollection<Application> ApplicationSubmittedByPeople { get; set; }
        [InverseProperty(nameof(Application.SubmittedForPerson))]
        public virtual ICollection<Application> ApplicationSubmittedForPeople { get; set; }
        [InverseProperty(nameof(AquacultureFacilityRegister.SubmittedForPerson))]
        public virtual ICollection<AquacultureFacilityRegister> AquacultureFacilityRegisters { get; set; }
        [InverseProperty(nameof(AquacultureLogBookPage.PersonBuyer))]
        public virtual ICollection<AquacultureLogBookPage> AquacultureLogBookPages { get; set; }
        [InverseProperty(nameof(Auanregister.InspectedPerson))]
        public virtual ICollection<Auanregister> Auanregisters { get; set; }
        [InverseProperty(nameof(BuyerRegister.Agent))]
        public virtual ICollection<BuyerRegister> BuyerRegisterAgents { get; set; }
        [InverseProperty(nameof(BuyerRegister.OrganizingPerson))]
        public virtual ICollection<BuyerRegister> BuyerRegisterOrganizingPeople { get; set; }
        [InverseProperty(nameof(BuyerRegister.SubmittedForPerson))]
        public virtual ICollection<BuyerRegister> BuyerRegisterSubmittedForPeople { get; set; }
        [InverseProperty(nameof(CapacityCertificatesRegister.Person))]
        public virtual ICollection<CapacityCertificatesRegister> CapacityCertificatesRegisters { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.SubmittedForPerson))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(FishermenRegister.Person))]
        public virtual ICollection<FishermenRegister> FishermenRegisters { get; set; }
        [InverseProperty(nameof(FishingAssociationMember.Person))]
        public virtual ICollection<FishingAssociationMember> FishingAssociationMembers { get; set; }
        [InverseProperty(nameof(FishingTicket.Person))]
        public virtual ICollection<FishingTicket> FishingTicketPeople { get; set; }
        [InverseProperty(nameof(FishingTicket.PersonRepresentative))]
        public virtual ICollection<FishingTicket> FishingTicketPersonRepresentatives { get; set; }
        [InverseProperty(nameof(InspectedPerson.Person))]
        public virtual ICollection<InspectedPerson> InspectedPeople { get; set; }
        [InverseProperty(nameof(Legal.LegalOwner))]
        public virtual ICollection<Legal> Legals { get; set; }
        [InverseProperty(nameof(LogBook.Person))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.PointsOwnerPerson))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.SubmittedForPerson))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.SubmittedForPerson))]
        public virtual ICollection<PermitRegister> PermitRegisters { get; set; }
        [InverseProperty(nameof(PersonAddress.Person))]
        public virtual ICollection<PersonAddress> PersonAddresses { get; set; }
        [InverseProperty(nameof(PersonDocument.Person))]
        public virtual ICollection<PersonDocument> PersonDocuments { get; set; }
        [InverseProperty(nameof(PersonEmailAddress.Person))]
        public virtual ICollection<PersonEmailAddress> PersonEmailAddresses { get; set; }
        [InverseProperty(nameof(PersonFile.Record))]
        public virtual ICollection<PersonFile> PersonFiles { get; set; }
        [InverseProperty(nameof(PersonPhoneNumber.Person))]
        public virtual ICollection<PersonPhoneNumber> PersonPhoneNumbers { get; set; }
        [InverseProperty(nameof(ScientificPermitOwner.Owner))]
        public virtual ICollection<ScientificPermitOwner> ScientificPermitOwners { get; set; }
        [InverseProperty(nameof(ShipOwner.OwnerPerson))]
        public virtual ICollection<ShipOwner> ShipOwners { get; set; }
        [InverseProperty(nameof(StatisticalFormsRegister.SubmittedForPerson))]
        public virtual ICollection<StatisticalFormsRegister> StatisticalFormsRegisters { get; set; }
        [InverseProperty(nameof(UsageDocument.LessorPerson))]
        public virtual ICollection<UsageDocument> UsageDocuments { get; set; }
    }
}