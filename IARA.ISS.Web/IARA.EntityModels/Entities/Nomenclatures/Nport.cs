// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Пристанища
    /// </summary>
    [Table("NPorts", Schema = "Noms")]
    [Index(nameof(PortGroupId), Name = "IXFK_ISS_NPorts_ISS_NPortGroups")]
    [Index(nameof(MdrLocationId), Name = "IXFK_NPorts_MDR_Location")]
    [Index(nameof(Code), nameof(ValidTo), Name = "UK_ISS_NPorts_Code", IsUnique = true)]
    [Index(nameof(Name), nameof(ValidTo), Name = "UK_ISS_NPorts_Name", IsUnique = true)]
    public partial class Nport
    {
        public Nport()
        {
            CatchQuotaUnloadPorts = new HashSet<CatchQuotaUnloadPort>();
            InspectionLastPortVisits = new HashSet<InspectionLastPortVisit>();
            OriginDeclarationFishTransboardTargetPorts = new HashSet<OriginDeclarationFish>();
            OriginDeclarationFishUnloadPorts = new HashSet<OriginDeclarationFish>();
            PermitLicenseRegisterFishes = new HashSet<PermitLicenseRegisterFish>();
            ShipLogBookPageArrivePorts = new HashSet<ShipLogBookPage>();
            ShipLogBookPageDepartPorts = new HashSet<ShipLogBookPage>();
            ShipRegisterPorts = new HashSet<ShipRegister>();
            ShipRegisterStayPorts = new HashSet<ShipRegister>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Код
        /// </summary>
        [StringLength(50)]
        public string Code { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Група на пристанище
        /// </summary>
        [Column("PortGroupID")]
        public int? PortGroupId { get; set; }
        /// <summary>
        /// Връзка към FLUX
        /// </summary>
        [Column("MDR_Location_ID")]
        public int? MdrLocationId { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(MdrLocationId))]
        [InverseProperty("Nports")]
        public virtual MdrLocation MdrLocation { get; set; }
        [ForeignKey(nameof(PortGroupId))]
        [InverseProperty(nameof(NportGroup.Nports))]
        public virtual NportGroup PortGroup { get; set; }
        [InverseProperty(nameof(CatchQuotaUnloadPort.Port))]
        public virtual ICollection<CatchQuotaUnloadPort> CatchQuotaUnloadPorts { get; set; }
        [InverseProperty(nameof(InspectionLastPortVisit.Port))]
        public virtual ICollection<InspectionLastPortVisit> InspectionLastPortVisits { get; set; }
        [InverseProperty(nameof(OriginDeclarationFish.TransboardTargetPort))]
        public virtual ICollection<OriginDeclarationFish> OriginDeclarationFishTransboardTargetPorts { get; set; }
        [InverseProperty(nameof(OriginDeclarationFish.UnloadPort))]
        public virtual ICollection<OriginDeclarationFish> OriginDeclarationFishUnloadPorts { get; set; }
        [InverseProperty(nameof(PermitLicenseRegisterFish.PortOfUnloading))]
        public virtual ICollection<PermitLicenseRegisterFish> PermitLicenseRegisterFishes { get; set; }
        [InverseProperty(nameof(ShipLogBookPage.ArrivePort))]
        public virtual ICollection<ShipLogBookPage> ShipLogBookPageArrivePorts { get; set; }
        [InverseProperty(nameof(ShipLogBookPage.DepartPort))]
        public virtual ICollection<ShipLogBookPage> ShipLogBookPageDepartPorts { get; set; }
        [InverseProperty(nameof(ShipRegister.Port))]
        public virtual ICollection<ShipRegister> ShipRegisterPorts { get; set; }
        [InverseProperty(nameof(ShipRegister.StayPort))]
        public virtual ICollection<ShipRegister> ShipRegisterStayPorts { get; set; }
    }
}