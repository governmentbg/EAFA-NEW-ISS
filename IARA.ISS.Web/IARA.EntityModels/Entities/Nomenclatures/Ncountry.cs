// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Държави
    /// </summary>
    [Table("NCountries", Schema = "Noms")]
    [Index(nameof(MdrTerritoryId), Name = "IXFK_NCountries_MDR_Territory")]
    [Index(nameof(Code), nameof(ValidTo), Name = "UK_Noms_NCountries", IsUnique = true)]
    public partial class Ncountry
    {
        public Ncountry()
        {
            Addresses = new HashSet<Address>();
            InspectionLastPortVisits = new HashSet<InspectionLastPortVisit>();
            People = new HashSet<Person>();
            ShipRegisterExportCountries = new HashSet<ShipRegister>();
            ShipRegisterFlagCountries = new HashSet<ShipRegister>();
            ShipRegisterImportCountries = new HashSet<ShipRegister>();
            TransportVehicleInspections = new HashSet<TransportVehicleInspection>();
            UnregisteredPeople = new HashSet<UnregisteredPerson>();
            UnregisteredVessels = new HashSet<UnregisteredVessel>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Трибуквен код
        /// </summary>
        [Required]
        [StringLength(3)]
        public string Code { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Връзка с FLUX
        /// </summary>
        [Column("MDR_Territory_ID")]
        public int? MdrTerritoryId { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(MdrTerritoryId))]
        [InverseProperty("Ncountries")]
        public virtual MdrTerritory MdrTerritory { get; set; }
        [InverseProperty(nameof(Address.Country))]
        public virtual ICollection<Address> Addresses { get; set; }
        [InverseProperty(nameof(InspectionLastPortVisit.UnregisteredPortCountry))]
        public virtual ICollection<InspectionLastPortVisit> InspectionLastPortVisits { get; set; }
        [InverseProperty(nameof(Person.CitizenshipCountry))]
        public virtual ICollection<Person> People { get; set; }
        [InverseProperty(nameof(ShipRegister.ExportCountry))]
        public virtual ICollection<ShipRegister> ShipRegisterExportCountries { get; set; }
        [InverseProperty(nameof(ShipRegister.FlagCountry))]
        public virtual ICollection<ShipRegister> ShipRegisterFlagCountries { get; set; }
        [InverseProperty(nameof(ShipRegister.ImportCountry))]
        public virtual ICollection<ShipRegister> ShipRegisterImportCountries { get; set; }
        [InverseProperty(nameof(TransportVehicleInspection.Country))]
        public virtual ICollection<TransportVehicleInspection> TransportVehicleInspections { get; set; }
        [InverseProperty(nameof(UnregisteredPerson.CitizenshipCountry))]
        public virtual ICollection<UnregisteredPerson> UnregisteredPeople { get; set; }
        [InverseProperty(nameof(UnregisteredVessel.FlagCountry))]
        public virtual ICollection<UnregisteredVessel> UnregisteredVessels { get; set; }
    }
}