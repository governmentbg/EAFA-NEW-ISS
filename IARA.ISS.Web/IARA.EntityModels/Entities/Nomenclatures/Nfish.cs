// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Водни организми/Риби
    /// </summary>
    [Table("NFishes", Schema = "Noms")]
    [Index(nameof(FishFamilyId), Name = "IXFK_ISS_NFishes_ISS_NFishFamilies")]
    [Index(nameof(FishGroupId), Name = "IXFK_ISS_NFishes_ISS_NFishGroups")]
    [Index(nameof(MdrFaoSpeciesId), Name = "IXFK_NFishes_MDR_FAO_species")]
    [Index(nameof(Code), nameof(ValidTo), Name = "UK_ISS_NFishes", IsUnique = true)]
    public partial class Nfish
    {
        public Nfish()
        {
            AquacultureFacilityFishes = new HashSet<AquacultureFacilityFish>();
            AquacutlureFormBroodstocks = new HashSet<AquacutlureFormBroodstock>();
            AquacutlureFormStockingMaterials = new HashSet<AquacutlureFormStockingMaterial>();
            AuanconfiscatedFishes = new HashSet<AuanconfiscatedFish>();
            CatchQuota = new HashSet<CatchQuota>();
            CatchRecordFishes = new HashSet<CatchRecordFish>();
            FishingCatchRecordFishes = new HashSet<FishingCatchRecordFish>();
            InspectionCatchMeasures = new HashSet<InspectionCatchMeasure>();
            LogBookPageProducts = new HashSet<LogBookPageProduct>();
            MapTariffFishes = new HashSet<MapTariffFish>();
            OriginDeclarationFishes = new HashSet<OriginDeclarationFish>();
            PenalDecreeFishCompensations = new HashSet<PenalDecreeFishCompensation>();
            PermitLicenseRegisterFishes = new HashSet<PermitLicenseRegisterFish>();
            PermitRegisterFishes = new HashSet<PermitRegisterFish>();
            ReworkRawMaterials = new HashSet<ReworkRawMaterial>();
            ScientificPermitOutingCatches = new HashSet<ScientificPermitOutingCatch>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Код на рибата
        /// </summary>
        [Required]
        [StringLength(20)]
        public string Code { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Име на английски
        /// </summary>
        [Column("NameEN")]
        [StringLength(500)]
        public string NameEn { get; set; }
        /// <summary>
        /// Име на латински
        /// </summary>
        [StringLength(500)]
        public string NameLatin { get; set; }
        /// <summary>
        /// Семейство водни организми/Риби
        /// </summary>
        [Column("FishFamilyID")]
        public int? FishFamilyId { get; set; }
        /// <summary>
        /// Група водни организми/Риби
        /// </summary>
        [Column("FishGroupID")]
        public int? FishGroupId { get; set; }
        /// <summary>
        /// Идентификатор във FLUX
        /// </summary>
        [Column("MDR_FAO_Species_ID")]
        public int? MdrFaoSpeciesId { get; set; }
        /// <summary>
        /// Флаг дали рибата се среща в р. Дунав
        /// </summary>
        public bool IsDanube { get; set; }
        /// <summary>
        /// Флаг дали рибата се среща в Черно море
        /// </summary>
        public bool IsBlackSea { get; set; }
        /// <summary>
        /// Флаг дали рибата се среща във въртешни водоеми
        /// </summary>
        public bool IsInternal { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(FishFamilyId))]
        [InverseProperty(nameof(NfishFamily.Nfishes))]
        public virtual NfishFamily FishFamily { get; set; }
        [ForeignKey(nameof(FishGroupId))]
        [InverseProperty(nameof(NfishGroup.Nfishes))]
        public virtual NfishGroup FishGroup { get; set; }
        [ForeignKey(nameof(MdrFaoSpeciesId))]
        [InverseProperty(nameof(MdrFaoSpecy.Nfishes))]
        public virtual MdrFaoSpecy MdrFaoSpecies { get; set; }
        [InverseProperty(nameof(AquacultureFacilityFish.FishType))]
        public virtual ICollection<AquacultureFacilityFish> AquacultureFacilityFishes { get; set; }
        [InverseProperty(nameof(AquacutlureFormBroodstock.Fish))]
        public virtual ICollection<AquacutlureFormBroodstock> AquacutlureFormBroodstocks { get; set; }
        [InverseProperty(nameof(AquacutlureFormStockingMaterial.Fish))]
        public virtual ICollection<AquacutlureFormStockingMaterial> AquacutlureFormStockingMaterials { get; set; }
        [InverseProperty(nameof(AuanconfiscatedFish.Fish))]
        public virtual ICollection<AuanconfiscatedFish> AuanconfiscatedFishes { get; set; }
        [InverseProperty("Fish")]
        public virtual ICollection<CatchQuota> CatchQuota { get; set; }
        [InverseProperty(nameof(CatchRecordFish.Fish))]
        public virtual ICollection<CatchRecordFish> CatchRecordFishes { get; set; }
        [InverseProperty(nameof(FishingCatchRecordFish.Fish))]
        public virtual ICollection<FishingCatchRecordFish> FishingCatchRecordFishes { get; set; }
        [InverseProperty(nameof(InspectionCatchMeasure.Fish))]
        public virtual ICollection<InspectionCatchMeasure> InspectionCatchMeasures { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.Fish))]
        public virtual ICollection<LogBookPageProduct> LogBookPageProducts { get; set; }
        [InverseProperty(nameof(MapTariffFish.Fish))]
        public virtual ICollection<MapTariffFish> MapTariffFishes { get; set; }
        [InverseProperty(nameof(OriginDeclarationFish.Fish))]
        public virtual ICollection<OriginDeclarationFish> OriginDeclarationFishes { get; set; }
        [InverseProperty(nameof(PenalDecreeFishCompensation.Fish))]
        public virtual ICollection<PenalDecreeFishCompensation> PenalDecreeFishCompensations { get; set; }
        [InverseProperty(nameof(PermitLicenseRegisterFish.Fish))]
        public virtual ICollection<PermitLicenseRegisterFish> PermitLicenseRegisterFishes { get; set; }
        [InverseProperty(nameof(PermitRegisterFish.Fish))]
        public virtual ICollection<PermitRegisterFish> PermitRegisterFishes { get; set; }
        [InverseProperty(nameof(ReworkRawMaterial.Fish))]
        public virtual ICollection<ReworkRawMaterial> ReworkRawMaterials { get; set; }
        [InverseProperty(nameof(ScientificPermitOutingCatch.Fish))]
        public virtual ICollection<ScientificPermitOutingCatch> ScientificPermitOutingCatches { get; set; }
    }
}