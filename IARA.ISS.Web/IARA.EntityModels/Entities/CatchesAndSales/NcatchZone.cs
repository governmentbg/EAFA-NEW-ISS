// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Зони за улов
    /// </summary>
    [Table("NCatchZones", Schema = "CatchSales")]
    [Index(nameof(MdrStatRectId), Name = "IXFK_NCatchZones_MDR_Stat_Rect")]
    [Index(nameof(ZoneNum), nameof(ValidTo), nameof(Gfcmquadrant), Name = "UK_CatchSales_NCatchZones", IsUnique = true)]
    public partial class NcatchZone
    {
        public NcatchZone()
        {
            CatchRecordFishes = new HashSet<CatchRecordFish>();
            FishermanInspections = new HashSet<FishermanInspection>();
            InspectionCatchMeasures = new HashSet<InspectionCatchMeasure>();
            ObservationAtSeas = new HashSet<ObservationAtSea>();
            ShipInspections = new HashSet<ShipInspection>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Номер на зона
        /// </summary>
        public int ZoneNum { get; set; }
        /// <summary>
        /// Квадрант по GFCM
        /// </summary>
        [Required]
        [Column("GFCMQuadrant")]
        [StringLength(50)]
        public string Gfcmquadrant { get; set; }
        /// <summary>
        /// Координати на квадранта
        /// </summary>
        [Column(TypeName = "geometry(MultiPolygon)")]
        public MultiPolygon QuadrantCoodtinates { get; set; }
        [Column("MDR_Stat_Rect_ID")]
        public int? MdrStatRectId { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(MdrStatRectId))]
        [InverseProperty("NcatchZones")]
        public virtual MdrStatRect MdrStatRect { get; set; }
        [InverseProperty(nameof(CatchRecordFish.CatchZone))]
        public virtual ICollection<CatchRecordFish> CatchRecordFishes { get; set; }
        [InverseProperty(nameof(FishermanInspection.InspectionLocationZone))]
        public virtual ICollection<FishermanInspection> FishermanInspections { get; set; }
        [InverseProperty(nameof(InspectionCatchMeasure.CatchZone))]
        public virtual ICollection<InspectionCatchMeasure> InspectionCatchMeasures { get; set; }
        [InverseProperty(nameof(ObservationAtSea.ObservedShipCatchZone))]
        public virtual ICollection<ObservationAtSea> ObservationAtSeas { get; set; }
        [InverseProperty(nameof(ShipInspection.InspectedShipCatchZone))]
        public virtual ICollection<ShipInspection> ShipInspections { get; set; }
    }
}