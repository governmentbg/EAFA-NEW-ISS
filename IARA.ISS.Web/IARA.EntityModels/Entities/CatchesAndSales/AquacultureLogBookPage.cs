// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Страници от дневник на аквакултурно стопанство
    /// </summary>
    [Table("AquacultureLogBookPages", Schema = "CatchSales")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_CatchSales_AquacultureLogBookPages_Migration")]
    [Index(nameof(RegisteredBuyerId), Name = "IXFK_AquacultureLogBookPages_BuyerRegister")]
    [Index(nameof(LegalBuyerId), Name = "IXFK_AquacultureLogBookPages_Legals")]
    [Index(nameof(LogBookId), Name = "IXFK_AquacultureLogBookPages_LogBooks")]
    [Index(nameof(PersonBuyerId), Name = "IXFK_AquacultureLogBookPages_Persons")]
    [Index(nameof(PageNum), Name = "UK_CatchSales_AquacultureLogBookPages_Num", IsUnique = true)]
    public partial class AquacultureLogBookPage
    {
        public AquacultureLogBookPage()
        {
            AquacultureLogBookPageFiles = new HashSet<AquacultureLogBookPageFile>();
            LogBookPageProducts = new HashSet<LogBookPageProduct>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Дневник
        /// </summary>
        [Column("LogBookID")]
        public int LogBookId { get; set; }
        /// <summary>
        /// Номер на страница
        /// </summary>
        public decimal PageNum { get; set; }
        /// <summary>
        /// Статус на страницата (InProgress, Submitted, Canceled, Missing)
        /// </summary>
        [Required]
        [StringLength(50)]
        public string Status { get; set; }
        /// <summary>
        /// Дата на попълване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? FillingDate { get; set; }
        /// <summary>
        /// Дата и час на приемане в ИАРА
        /// </summary>
        [Column("IARAAcceptanceDateTime")]
        public DateTime? IaraacceptanceDateTime { get; set; }
        /// <summary>
        /// Тип на купувача - физическо лице, юридическо лице или регистриран купувач/ЦПП
        /// </summary>
        [StringLength(50)]
        public string BuyerPersonType { get; set; }
        /// <summary>
        /// Регистриран купувач/ЦПП
        /// </summary>
        [Column("RegisteredBuyerID")]
        public int? RegisteredBuyerId { get; set; }
        /// <summary>
        /// Купувач - физическо лице
        /// </summary>
        [Column("PersonBuyerID")]
        public int? PersonBuyerId { get; set; }
        /// <summary>
        /// Купувач - юридическо лице
        /// </summary>
        [Column("LegalBuyerID")]
        public int? LegalBuyerId { get; set; }
        /// <summary>
        /// Причина за анулиране (при статус Canceled)
        /// </summary>
        [StringLength(4000)]
        public string CancelationReason { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(LegalBuyerId))]
        [InverseProperty(nameof(Legal.AquacultureLogBookPages))]
        public virtual Legal LegalBuyer { get; set; }
        [ForeignKey(nameof(LogBookId))]
        [InverseProperty("AquacultureLogBookPages")]
        public virtual LogBook LogBook { get; set; }
        [ForeignKey(nameof(PersonBuyerId))]
        [InverseProperty(nameof(Person.AquacultureLogBookPages))]
        public virtual Person PersonBuyer { get; set; }
        [ForeignKey(nameof(RegisteredBuyerId))]
        [InverseProperty(nameof(BuyerRegister.AquacultureLogBookPages))]
        public virtual BuyerRegister RegisteredBuyer { get; set; }
        [InverseProperty(nameof(AquacultureLogBookPageFile.Record))]
        public virtual ICollection<AquacultureLogBookPageFile> AquacultureLogBookPageFiles { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.AquacultureLogBookPage))]
        public virtual ICollection<LogBookPageProduct> LogBookPageProducts { get; set; }
    }
}