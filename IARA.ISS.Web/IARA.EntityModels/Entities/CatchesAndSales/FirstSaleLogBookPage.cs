// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Страници от дневник за първа продажба (декларации за ПП)
    /// </summary>
    [Table("FirstSaleLogBookPages", Schema = "CatchSales")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_CatchSales_FirstSaleLogBookPages_Migration")]
    [Index(nameof(AdmissionLogBookPageId), Name = "IXFK_FirstSaleLogBookPages_AdmissionLogBookPages")]
    [Index(nameof(BuyerId), Name = "IXFK_FirstSaleLogBookPages_BuyerRegister")]
    [Index(nameof(LogBookId), Name = "IXFK_FirstSaleLogBookPages_LogBooks")]
    [Index(nameof(OriginDeclarationId), Name = "IXFK_FirstSaleLogBookPages_OriginDeclarations")]
    [Index(nameof(TransportationDocumentId), Name = "IXFK_FirstSaleLogBookPages_TransportationLogBookPages")]
    [Index(nameof(PageNum), Name = "UK_CatchSales_FirstSaleLogBookPages_Num", IsUnique = true)]
    public partial class FirstSaleLogBookPage
    {
        public FirstSaleLogBookPage()
        {
            FirstSaleLogBookPageFiles = new HashSet<FirstSaleLogBookPageFile>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            LogBookPageProducts = new HashSet<LogBookPageProduct>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Дневник
        /// </summary>
        [Column("LogBookID")]
        public int LogBookId { get; set; }
        /// <summary>
        /// Номер на страница
        /// </summary>
        public decimal PageNum { get; set; }
        /// <summary>
        /// Уникален идентификатор във FLUX
        /// </summary>
        public Guid FluxIdentifier { get; set; }
        /// <summary>
        /// Статус на страницата (InProgress, Submitted, Canceled, Missing)
        /// </summary>
        [Required]
        [StringLength(50)]
        public string Status { get; set; }
        /// <summary>
        /// Декларация за произход
        /// </summary>
        [Column("OriginDeclarationID")]
        public int? OriginDeclarationId { get; set; }
        /// <summary>
        /// Документ за превоз
        /// </summary>
        [Column("TransportationDocumentID")]
        public int? TransportationDocumentId { get; set; }
        /// <summary>
        /// Страницa от дневник за приемане (декларации за Приемане)
        /// </summary>
        [Column("AdmissionLogBookPageID")]
        public int? AdmissionLogBookPageId { get; set; }
        /// <summary>
        /// Дата на продажба
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? SaleDate { get; set; }
        /// <summary>
        /// Номер на договор за продажба
        /// </summary>
        [StringLength(100)]
        public string SaleContractNumber { get; set; }
        /// <summary>
        /// Дата на договор за продажба
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? SaleContractDate { get; set; }
        /// <summary>
        /// Място на продажба
        /// </summary>
        [StringLength(500)]
        public string SaleLocation { get; set; }
        /// <summary>
        /// Купувач - регистриран купувач или Център за първа продажба
        /// </summary>
        [Column("BuyerID")]
        public int? BuyerId { get; set; }
        /// <summary>
        /// Причина за анулиране (при статус Canceled)
        /// </summary>
        [StringLength(4000)]
        public string CancelationReason { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AdmissionLogBookPageId))]
        [InverseProperty("FirstSaleLogBookPages")]
        public virtual AdmissionLogBookPage AdmissionLogBookPage { get; set; }
        [ForeignKey(nameof(BuyerId))]
        [InverseProperty(nameof(BuyerRegister.FirstSaleLogBookPages))]
        public virtual BuyerRegister Buyer { get; set; }
        [ForeignKey(nameof(LogBookId))]
        [InverseProperty("FirstSaleLogBookPages")]
        public virtual LogBook LogBook { get; set; }
        [ForeignKey(nameof(OriginDeclarationId))]
        [InverseProperty("FirstSaleLogBookPages")]
        public virtual OriginDeclaration OriginDeclaration { get; set; }
        [ForeignKey(nameof(TransportationDocumentId))]
        [InverseProperty(nameof(TransportationLogBookPage.FirstSaleLogBookPages))]
        public virtual TransportationLogBookPage TransportationDocument { get; set; }
        [InverseProperty(nameof(FirstSaleLogBookPageFile.Record))]
        public virtual ICollection<FirstSaleLogBookPageFile> FirstSaleLogBookPageFiles { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.FirstSaleLogBookPage))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.FirstSaleLogBookPage))]
        public virtual ICollection<LogBookPageProduct> LogBookPageProducts { get; set; }
    }
}
