// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Страници от дневник за превоз (докуемнт за Превоз)
    /// </summary>
    [Table("TransportationLogBookPages", Schema = "CatchSales")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_CatchSales_TransportationLogBookPages_Migration")]
    [Index(nameof(LogBookPermitLicenseId), Name = "IXFK_TransportationLogBookPages_LogBookPermitLicenses")]
    [Index(nameof(LogBookId), Name = "IXFK_TransportationLogBookPages_LogBooks")]
    [Index(nameof(OriginDeclarationId), Name = "IXFK_TransportationLogBookPages_OriginDeclarations")]
    [Index(nameof(PageNum), Name = "UK_CatchSales_TransportationLogBookPages_Num", IsUnique = true)]
    public partial class TransportationLogBookPage
    {
        public TransportationLogBookPage()
        {
            AdmissionLogBookPages = new HashSet<AdmissionLogBookPage>();
            FirstSaleLogBookPages = new HashSet<FirstSaleLogBookPage>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            LogBookPageProducts = new HashSet<LogBookPageProduct>();
            TransportationLogBookPageFiles = new HashSet<TransportationLogBookPageFile>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Дневник
        /// </summary>
        [Column("LogBookID")]
        public int LogBookId { get; set; }
        /// <summary>
        /// Удостоверение към дневник
        /// </summary>
        [Column("LogBookPermitLicenseID")]
        public int? LogBookPermitLicenseId { get; set; }
        /// <summary>
        /// Номер на страница
        /// </summary>
        public decimal PageNum { get; set; }
        /// <summary>
        /// Уникален идентификатор във FLUX
        /// </summary>
        public Guid FluxIdentifier { get; set; }
        /// <summary>
        /// Статус на страницата (InProgress, Submitted, Canceled, Missing)
        /// </summary>
        [Required]
        [StringLength(50)]
        public string Status { get; set; }
        /// <summary>
        /// Декларация за произход
        /// </summary>
        [Column("OriginDeclarationID")]
        public int? OriginDeclarationId { get; set; }
        /// <summary>
        /// Идентификатор на превозно средство
        /// </summary>
        [StringLength(50)]
        public string VehicleNumber { get; set; }
        /// <summary>
        /// Място на товарене
        /// </summary>
        [StringLength(500)]
        public string LoadingLocation { get; set; }
        /// <summary>
        /// Дата на товарене
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? LoadingDate { get; set; }
        /// <summary>
        /// Място на доставка
        /// </summary>
        [StringLength(500)]
        public string DeliveryLocation { get; set; }
        /// <summary>
        /// Флаг дали вносът е осъществен по начин, различен от внос с кораб
        /// </summary>
        public bool? IsImportNotByShip { get; set; }
        /// <summary>
        /// Място на внос (когато вносът е осъществен по начин, различен от внос с кораб)
        /// </summary>
        [StringLength(500)]
        public string ImportPlace { get; set; }
        /// <summary>
        /// Причина за анулиране (при статус Canceled)
        /// </summary>
        [StringLength(4000)]
        public string CancelationReason { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(LogBookId))]
        [InverseProperty("TransportationLogBookPages")]
        public virtual LogBook LogBook { get; set; }
        [ForeignKey(nameof(LogBookPermitLicenseId))]
        [InverseProperty("TransportationLogBookPages")]
        public virtual LogBookPermitLicense LogBookPermitLicense { get; set; }
        [ForeignKey(nameof(OriginDeclarationId))]
        [InverseProperty("TransportationLogBookPages")]
        public virtual OriginDeclaration OriginDeclaration { get; set; }
        [InverseProperty(nameof(AdmissionLogBookPage.TransportationDocument))]
        public virtual ICollection<AdmissionLogBookPage> AdmissionLogBookPages { get; set; }
        [InverseProperty(nameof(FirstSaleLogBookPage.TransportationDocument))]
        public virtual ICollection<FirstSaleLogBookPage> FirstSaleLogBookPages { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.TransportationLogBookPage))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.TransportationLogBookPage))]
        public virtual ICollection<LogBookPageProduct> LogBookPageProducts { get; set; }
        [InverseProperty(nameof(TransportationLogBookPageFile.Record))]
        public virtual ICollection<TransportationLogBookPageFile> TransportationLogBookPageFiles { get; set; }
    }
}
