// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Продукти към страница от дневник (за превоз, първа продажба, приемане и стопанство)
    /// </summary>
    [Table("LogBookPageProducts", Schema = "CatchSales")]
    [Index(nameof(AdmissionLogBookPageId), Name = "IXFK_LogBookPageProducts_AdmissionLogBookPages")]
    [Index(nameof(AquacultureLogBookPageId), Name = "IXFK_LogBookPageProducts_AquacultureLogBookPages")]
    [Index(nameof(FirstSaleLogBookPageId), Name = "IXFK_LogBookPageProducts_FirstSaleLogBookPages")]
    [Index(nameof(OriginProductId), Name = "IXFK_LogBookPageProducts_LogBookPageProducts")]
    [Index(nameof(ProductFreshnessId), Name = "IXFK_LogBookPageProducts_NFishFreshness")]
    [Index(nameof(ProductPresentationId), Name = "IXFK_LogBookPageProducts_NFishPresentations")]
    [Index(nameof(ProductPurposeId), Name = "IXFK_LogBookPageProducts_NFishSalePurpose")]
    [Index(nameof(FishSizeCategoryId), Name = "IXFK_LogBookPageProducts_NFishSizeCategories")]
    [Index(nameof(FishId), Name = "IXFK_LogBookPageProducts_NFishes")]
    [Index(nameof(TurbotSizeGroupId), Name = "IXFK_LogBookPageProducts_NTurbotSizeGroups")]
    [Index(nameof(OriginDeclarationFishId), Name = "IXFK_LogBookPageProducts_OriginDeclarationFishes")]
    [Index(nameof(TransportationLogBookPageId), Name = "IXFK_LogBookPageProducts_TransportationLogBookPages")]
    public partial class LogBookPageProduct
    {
        public LogBookPageProduct()
        {
            InverseOriginProduct = new HashSet<LogBookPageProduct>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Страница от дневник за Първа продажба
        /// </summary>
        [Column("FirstSaleLogBookPageID")]
        public int? FirstSaleLogBookPageId { get; set; }
        /// <summary>
        /// Страница от дневник за Приемане
        /// </summary>
        [Column("AdmissionLogBookPageID")]
        public int? AdmissionLogBookPageId { get; set; }
        /// <summary>
        /// Страница от дненвик за Превоз
        /// </summary>
        [Column("TransportationLogBookPageID")]
        public int? TransportationLogBookPageId { get; set; }
        /// <summary>
        /// Страница от дневник за Аквакултурно стопанство
        /// </summary>
        [Column("AquacultureLogBookPageID")]
        public int? AquacultureLogBookPageId { get; set; }
        /// <summary>
        /// Воден организъм
        /// </summary>
        [Column("FishID")]
        public int FishId { get; set; }
        /// <summary>
        /// Първообраз на продукта (от свързан документ)
        /// </summary>
        [Column("OriginProductID")]
        public int? OriginProductId { get; set; }
        /// <summary>
        /// От коя разтоварена вече риба идва този продукт (когато имаме продукт, който идва от улов на кораб)
        /// </summary>
        [Column("OriginDeclarationFishID")]
        public int? OriginDeclarationFishId { get; set; }
        /// <summary>
        /// Място на улова
        /// </summary>
        [StringLength(500)]
        public string CatchLocation { get; set; }
        /// <summary>
        /// Представяне
        /// </summary>
        [Column("ProductPresentationID")]
        public int ProductPresentationId { get; set; }
        /// <summary>
        /// Категория свежест
        /// </summary>
        [Column("ProductFreshnessID")]
        public int? ProductFreshnessId { get; set; }
        /// <summary>
        /// Предназначение
        /// </summary>
        [Column("ProductPurposeID")]
        public int ProductPurposeId { get; set; }
        /// <summary>
        /// Минимален размер
        /// </summary>
        public decimal? MinSize { get; set; }
        /// <summary>
        /// Количество в килограми
        /// </summary>
        public decimal QuantityKg { get; set; }
        /// <summary>
        /// Единична цена
        /// </summary>
        public decimal UnitPrice { get; set; }
        /// <summary>
        /// Средно единично тегло в кг
        /// </summary>
        public decimal? AverageUnitWeightKg { get; set; }
        /// <summary>
        /// Размерна група на водния организъм (не се отнася за Калкан)
        /// </summary>
        [Column("FishSizeCategoryID")]
        public int? FishSizeCategoryId { get; set; }
        /// <summary>
        /// Размерна група за калкан
        /// </summary>
        [Column("TurbotSizeGroupID")]
        public int? TurbotSizeGroupId { get; set; }
        /// <summary>
        /// Брой екземпляри 
        /// </summary>
        public int? UnitCount { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AdmissionLogBookPageId))]
        [InverseProperty("LogBookPageProducts")]
        public virtual AdmissionLogBookPage AdmissionLogBookPage { get; set; }
        [ForeignKey(nameof(AquacultureLogBookPageId))]
        [InverseProperty("LogBookPageProducts")]
        public virtual AquacultureLogBookPage AquacultureLogBookPage { get; set; }
        [ForeignKey(nameof(FirstSaleLogBookPageId))]
        [InverseProperty("LogBookPageProducts")]
        public virtual FirstSaleLogBookPage FirstSaleLogBookPage { get; set; }
        [ForeignKey(nameof(FishId))]
        [InverseProperty(nameof(Nfish.LogBookPageProducts))]
        public virtual Nfish Fish { get; set; }
        [ForeignKey(nameof(FishSizeCategoryId))]
        [InverseProperty(nameof(NfishSizeCategory.LogBookPageProducts))]
        public virtual NfishSizeCategory FishSizeCategory { get; set; }
        [ForeignKey(nameof(OriginDeclarationFishId))]
        [InverseProperty("LogBookPageProducts")]
        public virtual OriginDeclarationFish OriginDeclarationFish { get; set; }
        [ForeignKey(nameof(OriginProductId))]
        [InverseProperty(nameof(LogBookPageProduct.InverseOriginProduct))]
        public virtual LogBookPageProduct OriginProduct { get; set; }
        [ForeignKey(nameof(ProductFreshnessId))]
        [InverseProperty(nameof(NfishFreshness.LogBookPageProducts))]
        public virtual NfishFreshness ProductFreshness { get; set; }
        [ForeignKey(nameof(ProductPresentationId))]
        [InverseProperty(nameof(NfishPresentation.LogBookPageProducts))]
        public virtual NfishPresentation ProductPresentation { get; set; }
        [ForeignKey(nameof(ProductPurposeId))]
        [InverseProperty(nameof(NfishSalePurpose.LogBookPageProducts))]
        public virtual NfishSalePurpose ProductPurpose { get; set; }
        [ForeignKey(nameof(TransportationLogBookPageId))]
        [InverseProperty("LogBookPageProducts")]
        public virtual TransportationLogBookPage TransportationLogBookPage { get; set; }
        [ForeignKey(nameof(TurbotSizeGroupId))]
        [InverseProperty(nameof(NturbotSizeGroup.LogBookPageProducts))]
        public virtual NturbotSizeGroup TurbotSizeGroup { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.OriginProduct))]
        public virtual ICollection<LogBookPageProduct> InverseOriginProduct { get; set; }
    }
}