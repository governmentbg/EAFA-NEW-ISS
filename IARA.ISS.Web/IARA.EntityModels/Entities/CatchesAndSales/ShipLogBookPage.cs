// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Страници от корабни риболовни дневници
    /// </summary>
    [Table("ShipLogBookPages", Schema = "CatchSales")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_CatchSales_ShipLogBookPages_Migration")]
    [Index(nameof(ArrivePortId), Name = "IXFK_CatchSales_ShipLogBookPages_ISS_NPortArrive")]
    [Index(nameof(DepartPortId), Name = "IXFK_CatchSales_ShipLogBookPages_ISS_NPortDepart")]
    [Index(nameof(FishingGearRegisterId), Name = "IXFK_ShipLogBookPages_FishingGearRegister")]
    [Index(nameof(LogBookPermitLicenceId), Name = "IXFK_ShipLogBookPages_LogBookPermitLicenses")]
    [Index(nameof(LogBookId), Name = "IXFK_ShipLogBookPages_LogBooks")]
    [Index(nameof(PartnerShipId), Name = "IXFK_ShipLogBookPages_ShipRegister")]
    [Index(nameof(PageNum), Name = "UK_CatchSales_ShipLogBookPages", IsUnique = true)]
    public partial class ShipLogBookPage
    {
        public ShipLogBookPage()
        {
            CatchRecords = new HashSet<CatchRecord>();
            FvmsfishingActivityReportLogBookPages = new HashSet<FvmsfishingActivityReportLogBookPage>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            ShipLogBookPageFiles = new HashSet<ShipLogBookPageFile>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        [Column("LogBookID")]
        public int LogBookId { get; set; }
        /// <summary>
        /// Удостоверение към дневник
        /// </summary>
        [Column("LogBookPermitLicenceID")]
        public int? LogBookPermitLicenceId { get; set; }
        /// <summary>
        /// Номер на страница от дневник
        /// </summary>
        [Required]
        [StringLength(50)]
        public string PageNum { get; set; }
        /// <summary>
        /// Статус на страницата (InProgress, Submitted, Canceled, Missing)
        /// </summary>
        [Required]
        [StringLength(50)]
        public string Status { get; set; }
        /// <summary>
        /// Дата на попълване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? PageFillDate { get; set; }
        /// <summary>
        /// Дата на приемане в ИАРА
        /// </summary>
        [Column("IARAAcceptanceDateTime")]
        public DateTime? IaraacceptanceDateTime { get; set; }
        /// <summary>
        /// Дата и час на тръгване на риболовен излет
        /// </summary>
        public DateTime? FishTripStartDateTime { get; set; }
        /// <summary>
        /// Дата и час на връщане на риболовен излет
        /// </summary>
        public DateTime? FishTripEndDateTime { get; set; }
        /// <summary>
        /// Пристанище на тръгване
        /// </summary>
        [Column("DepartPortID")]
        public int? DepartPortId { get; set; }
        /// <summary>
        /// Пристанище на връщане
        /// </summary>
        [Column("ArrivePortID")]
        public int? ArrivePortId { get; set; }
        /// <summary>
        /// Риболовен уред
        /// </summary>
        [Column("FishingGearRegisterID")]
        public int? FishingGearRegisterId { get; set; }
        /// <summary>
        /// Брой риболовни уреди от посочения тип.
        /// </summary>
        public int? FishingGearCount { get; set; }
        /// <summary>
        /// Брой куки, закачени за риболовния уред, ако е приложимо за съответния тип уред.
        /// </summary>
        public int? FishingGearHooksCount { get; set; }
        /// <summary>
        /// Партниращ кораб при съвместен риболов
        /// </summary>
        [Column("PartnerShipID")]
        public int? PartnerShipId { get; set; }
        /// <summary>
        /// Причина за анулиране на страницата
        /// </summary>
        [StringLength(4000)]
        public string CancelationReason { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ArrivePortId))]
        [InverseProperty(nameof(Nport.ShipLogBookPageArrivePorts))]
        public virtual Nport ArrivePort { get; set; }
        [ForeignKey(nameof(DepartPortId))]
        [InverseProperty(nameof(Nport.ShipLogBookPageDepartPorts))]
        public virtual Nport DepartPort { get; set; }
        [ForeignKey(nameof(FishingGearRegisterId))]
        [InverseProperty("ShipLogBookPages")]
        public virtual FishingGearRegister FishingGearRegister { get; set; }
        [ForeignKey(nameof(LogBookId))]
        [InverseProperty("ShipLogBookPages")]
        public virtual LogBook LogBook { get; set; }
        [ForeignKey(nameof(LogBookPermitLicenceId))]
        [InverseProperty(nameof(LogBookPermitLicense.ShipLogBookPages))]
        public virtual LogBookPermitLicense LogBookPermitLicence { get; set; }
        [ForeignKey(nameof(PartnerShipId))]
        [InverseProperty(nameof(ShipRegister.ShipLogBookPages))]
        public virtual ShipRegister PartnerShip { get; set; }
        [InverseProperty("LogBookPage")]
        public virtual OriginDeclaration OriginDeclaration { get; set; }
        [InverseProperty(nameof(CatchRecord.LogBookPage))]
        public virtual ICollection<CatchRecord> CatchRecords { get; set; }
        [InverseProperty(nameof(FvmsfishingActivityReportLogBookPage.ShipLogBookPage))]
        public virtual ICollection<FvmsfishingActivityReportLogBookPage> FvmsfishingActivityReportLogBookPages { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.ShipLogBookPage))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(ShipLogBookPageFile.Record))]
        public virtual ICollection<ShipLogBookPageFile> ShipLogBookPageFiles { get; set; }
    }
}