// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Декларации за произход
    /// </summary>
    [Table("OriginDeclarationFishes", Schema = "CatchSales")]
    [Index(nameof(CatchFishFreshnessId), Name = "IXFK_CatchSales_OriginDeclarationFishes_CatchSales_NCatchFishSt")]
    [Index(nameof(UnloadTypeId), Name = "IXFK_CatchSales_OriginDeclarationFishes_CatchSales_NCatchFishUn")]
    [Index(nameof(TransboardTargetPortId), Name = "IXFK_CatchSales_OriginDeclarationFishes_ISS_NPortsTransboardTar")]
    [Index(nameof(UnloadPortId), Name = "IXFK_CatchSales_OriginDeclarationFishes_ISS_NPortsUnload")]
    [Index(nameof(CatchRecordFishId), Name = "IXFK_OriginDeclarationFishes_CatchRecordFishes")]
    [Index(nameof(CatchFishPresentationId), Name = "IXFK_OriginDeclarationFishes_NFishPresentations")]
    [Index(nameof(FishId), Name = "IXFK_OriginDeclarationFishes_NFishes")]
    [Index(nameof(OriginDeclarationId), Name = "IXFK_OriginDeclarationFishes_OriginDeclarations")]
    [Index(nameof(TransboardShipId), Name = "IXFK_OriginDeclarationFishes_ShipRegister")]
    public partial class OriginDeclarationFish
    {
        public OriginDeclarationFish()
        {
            LogBookPageProducts = new HashSet<LogBookPageProduct>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Декларация за произход
        /// </summary>
        [Column("OriginDeclarationID")]
        public int OriginDeclarationId { get; set; }
        /// <summary>
        /// Вид риба / морски организъм
        /// </summary>
        [Column("FishID")]
        public int FishId { get; set; }
        /// <summary>
        /// Състояние на улов
        /// </summary>
        [Column("CatchFishFreshnessID")]
        public int? CatchFishFreshnessId { get; set; }
        /// <summary>
        /// Произхождащ запис от улов в риболовен дневник
        /// </summary>
        [Column("CatchRecordFishID")]
        public int? CatchRecordFishId { get; set; }
        /// <summary>
        /// Представяне на улов
        /// </summary>
        [Column("CatchFishPresentationID")]
        public int CatchFishPresentationId { get; set; }
        /// <summary>
        /// Флаг дали е преработена на кораба
        /// </summary>
        public bool IsProcessedOnBoard { get; set; }
        /// <summary>
        /// Количество улов в КГ
        /// </summary>
        public decimal Quantity { get; set; }
        /// <summary>
        /// Коефициент за приравняване на теглото, ако рибата не е цяла (WHL)
        /// </summary>
        public decimal QuantityConversionFactor { get; set; }
        /// <summary>
        /// Разтоварен преработен улов в КГ
        /// </summary>
        public decimal? UnloadedProcessedQuantity { get; set; }
        /// <summary>
        /// Вид разтоварване на улов (разтоварено, трансбордиране и др.)
        /// </summary>
        [Column("UnloadTypeID")]
        public int UnloadTypeId { get; set; }
        /// <summary>
        /// Дата и час на разтоварване
        /// </summary>
        public DateTime? UnloadDateTime { get; set; }
        /// <summary>
        /// Пристанище на разтоварване
        /// </summary>
        [Column("UnloadPortID")]
        public int? UnloadPortId { get; set; }
        /// <summary>
        /// Дата и час на трансбордиране
        /// </summary>
        public DateTime? TransboardDateTime { get; set; }
        /// <summary>
        /// Кораб, на който е извършено трансбордирането
        /// </summary>
        [Column("TransboardShipID")]
        public int? TransboardShipId { get; set; }
        /// <summary>
        /// Пристанище цел за трансбордиране
        /// </summary>
        [Column("TransboardTargetPortID")]
        public int? TransboardTargetPortId { get; set; }
        /// <summary>
        /// Забележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CatchFishFreshnessId))]
        [InverseProperty(nameof(NfishFreshness.OriginDeclarationFishes))]
        public virtual NfishFreshness CatchFishFreshness { get; set; }
        [ForeignKey(nameof(CatchFishPresentationId))]
        [InverseProperty(nameof(NfishPresentation.OriginDeclarationFishes))]
        public virtual NfishPresentation CatchFishPresentation { get; set; }
        [ForeignKey(nameof(CatchRecordFishId))]
        [InverseProperty("OriginDeclarationFishes")]
        public virtual CatchRecordFish CatchRecordFish { get; set; }
        [ForeignKey(nameof(FishId))]
        [InverseProperty(nameof(Nfish.OriginDeclarationFishes))]
        public virtual Nfish Fish { get; set; }
        [ForeignKey(nameof(OriginDeclarationId))]
        [InverseProperty("OriginDeclarationFishes")]
        public virtual OriginDeclaration OriginDeclaration { get; set; }
        [ForeignKey(nameof(TransboardShipId))]
        [InverseProperty(nameof(ShipRegister.OriginDeclarationFishes))]
        public virtual ShipRegister TransboardShip { get; set; }
        [ForeignKey(nameof(TransboardTargetPortId))]
        [InverseProperty(nameof(Nport.OriginDeclarationFishTransboardTargetPorts))]
        public virtual Nport TransboardTargetPort { get; set; }
        [ForeignKey(nameof(UnloadPortId))]
        [InverseProperty(nameof(Nport.OriginDeclarationFishUnloadPorts))]
        public virtual Nport UnloadPort { get; set; }
        [ForeignKey(nameof(UnloadTypeId))]
        [InverseProperty(nameof(NcatchFishUnloadType.OriginDeclarationFishes))]
        public virtual NcatchFishUnloadType UnloadType { get; set; }
        [InverseProperty(nameof(LogBookPageProduct.OriginDeclarationFish))]
        public virtual ICollection<LogBookPageProduct> LogBookPageProducts { get; set; }
    }
}