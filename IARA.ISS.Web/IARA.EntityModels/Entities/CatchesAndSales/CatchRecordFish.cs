// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Данни за улов за вид риба
    /// </summary>
    [Table("CatchRecordFishes", Schema = "CatchSales")]
    [Index(nameof(CatchTypeId), Name = "IXFK_CatchRecordFishes_NCatchTypes")]
    [Index(nameof(CatchSizeId), Name = "IXFK_CatchRecordFishes_NFishSizes")]
    [Index(nameof(TurbotSizeGroupId), Name = "IXFK_CatchRecordFishes_NTurbotSizeGroups")]
    [Index(nameof(CatchRecordId), Name = "IXFK_CatchSales_CatchRecordFishes_CatchSales_CatchRecords")]
    [Index(nameof(CatchZoneId), Name = "IXFK_CatchSales_CatchRecordFishes_CatchSales_NCatchZones")]
    [Index(nameof(FishId), Name = "IXFK_CatchSales_CatchRecordFishes_ISS_NFishes")]
    public partial class CatchRecordFish
    {
        public CatchRecordFish()
        {
            OriginDeclarationFishes = new HashSet<OriginDeclarationFish>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Данни за улов
        /// </summary>
        [Column("CatchRecordID")]
        public int CatchRecordId { get; set; }
        /// <summary>
        /// Вид риба / морски организъм
        /// </summary>
        [Column("FishID")]
        public int FishId { get; set; }
        /// <summary>
        /// Квадрант на улова
        /// </summary>
        [Column("CatchZoneID")]
        public int CatchZoneId { get; set; }
        /// <summary>
        /// Количество улов в КГ
        /// </summary>
        public decimal Quantity { get; set; }
        /// <summary>
        /// Разтоварено/трансбордирано количество улов (участващ вече в декларация за произход)
        /// </summary>
        public decimal UnloadedQuantity { get; set; }
        /// <summary>
        /// Брой калкани
        /// </summary>
        public int? TurbotCount { get; set; }
        /// <summary>
        /// Размерна група на калкан
        /// </summary>
        [Column("TurbotSizeGroupID")]
        public int? TurbotSizeGroupId { get; set; }
        /// <summary>
        /// Пол за есетровите риби
        /// </summary>
        [StringLength(50)]
        public string SturgeonGender { get; set; }
        /// <summary>
        /// Тегло на есетровите риби в килограми
        /// </summary>
        public decimal? SturgeonWeightKg { get; set; }
        /// <summary>
        /// Размер за есетровите риби
        /// </summary>
        public decimal? SturgeonSize { get; set; }
        /// <summary>
        /// Флаг дали е континентален риболов
        /// </summary>
        public bool IsContinentalCatch { get; set; }
        /// <summary>
        /// Риболовна зона на трета държава
        /// </summary>
        [StringLength(50)]
        public string ThirdCountryCatchZone { get; set; }
        /// <summary>
        /// Тип на действието, направено с уова - задържан на борда, изхвърлен..
        /// </summary>
        [Column("CatchTypeID")]
        public int? CatchTypeId { get; set; }
        /// <summary>
        /// Размер на рибата - LSC, BMS
        /// </summary>
        [Column("CatchSizeID")]
        public int? CatchSizeId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CatchRecordId))]
        [InverseProperty("CatchRecordFishes")]
        public virtual CatchRecord CatchRecord { get; set; }
        [ForeignKey(nameof(CatchSizeId))]
        [InverseProperty(nameof(NfishSize.CatchRecordFishes))]
        public virtual NfishSize CatchSize { get; set; }
        [ForeignKey(nameof(CatchTypeId))]
        [InverseProperty(nameof(NcatchType.CatchRecordFishes))]
        public virtual NcatchType CatchType { get; set; }
        [ForeignKey(nameof(CatchZoneId))]
        [InverseProperty(nameof(NcatchZone.CatchRecordFishes))]
        public virtual NcatchZone CatchZone { get; set; }
        [ForeignKey(nameof(FishId))]
        [InverseProperty(nameof(Nfish.CatchRecordFishes))]
        public virtual Nfish Fish { get; set; }
        [ForeignKey(nameof(TurbotSizeGroupId))]
        [InverseProperty(nameof(NturbotSizeGroup.CatchRecordFishes))]
        public virtual NturbotSizeGroup TurbotSizeGroup { get; set; }
        [InverseProperty(nameof(OriginDeclarationFish.CatchRecordFish))]
        public virtual ICollection<OriginDeclarationFish> OriginDeclarationFishes { get; set; }
    }
}