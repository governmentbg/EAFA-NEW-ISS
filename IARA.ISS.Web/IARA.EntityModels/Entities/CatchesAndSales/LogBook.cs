// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Риболовни дневници
    /// </summary>
    [Table("LogBooks", Schema = "CatchSales")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_CatchSales_LogBooks_Migration")]
    [Index(nameof(AquacultureFacilityId), Name = "IXFK_LogBooks_AquacultureFacilityRegister")]
    [Index(nameof(RegisteredBuyerId), Name = "IXFK_LogBooks_BuyerRegister")]
    [Index(nameof(LegalId), Name = "IXFK_LogBooks_Legals")]
    [Index(nameof(StatusId), Name = "IXFK_LogBooks_NLogBookStatuses")]
    [Index(nameof(LogBookTypeId), Name = "IXFK_LogBooks_NLogBookTypes")]
    [Index(nameof(CurrentPermitLicenseId), Name = "IXFK_LogBooks_PermitLicensesRegister")]
    [Index(nameof(PersonId), Name = "IXFK_LogBooks_Persons")]
    [Index(nameof(ShipId), Name = "IXFK_LogBooks_ShipRegister")]
    [Index(nameof(LogNum), nameof(LogBookTypeId), Name = "UK_CatchSales_LogBooks", IsUnique = true)]
    public partial class LogBook
    {
        public LogBook()
        {
            AdmissionLogBookPages = new HashSet<AdmissionLogBookPage>();
            AquacultureLogBookPages = new HashSet<AquacultureLogBookPage>();
            FirstSaleLogBookPages = new HashSet<FirstSaleLogBookPage>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            LogBookPermitLicenses = new HashSet<LogBookPermitLicense>();
            ShipLogBookPages = new HashSet<ShipLogBookPage>();
            TransportationLogBookPages = new HashSet<TransportationLogBookPage>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        [Column("LogBookTypeID")]
        public int LogBookTypeId { get; set; }
        /// <summary>
        /// Номер на дневник (генерира се от системата)
        /// </summary>
        [StringLength(50)]
        public string LogNum { get; set; }
        /// <summary>
        /// Флаг дали дневникът е електронен, или е на хартия
        /// </summary>
        public bool IsOnline { get; set; }
        /// <summary>
        /// Дата на предоставяне
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime IssueDate { get; set; }
        /// <summary>
        /// Дата на приключване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? FinishDate { get; set; }
        /// <summary>
        /// Начална страница
        /// </summary>
        public long StartPageNum { get; set; }
        /// <summary>
        /// Последен (използван) номер на страница
        /// </summary>
        public long LastPageNum { get; set; }
        /// <summary>
        /// Крайна страница
        /// </summary>
        public long EndPageNum { get; set; }
        /// <summary>
        /// Статус на дневника (нов, прекратен, презаверен)
        /// </summary>
        [Column("StatusID")]
        public int StatusId { get; set; }
        /// <summary>
        /// Цена
        /// </summary>
        public decimal Price { get; set; }
        /// <summary>
        /// Коментари
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Тип на притежателя на дневника - person, legal, registeredBuyer (не важи за риболовен и аквакултурно)
        /// </summary>
        [StringLength(50)]
        public string LogBookOwnerType { get; set; }
        /// <summary>
        /// Кораб, за който е дневникът - при риболовен дневник
        /// </summary>
        [Column("ShipID")]
        public int? ShipId { get; set; }
        /// <summary>
        /// Текущо удостоверение към този дневник (ако е корабен)
        /// </summary>
        [Column("CurrentPermitLicenseID")]
        public int? CurrentPermitLicenseId { get; set; }
        /// <summary>
        /// Аквакултурно стопанство, за което е дневникът - при днев. за аквакултурно стопанство
        /// </summary>
        [Column("AquacultureFacilityID")]
        public int? AquacultureFacilityId { get; set; }
        /// <summary>
        /// Регистриран купувач, за когото е дневникът - при днев. за ПП, приемане и превоз
        /// </summary>
        [Column("RegisteredBuyerID")]
        public int? RegisteredBuyerId { get; set; }
        /// <summary>
        /// Физ. лице, за което е дневникът - при днев. за приемане и превоз
        /// </summary>
        [Column("PersonID")]
        public int? PersonId { get; set; }
        /// <summary>
        /// Юрид. лице, за което е дневникът - при днев. за приемане и превоз
        /// </summary>
        [Column("LegalID")]
        public int? LegalId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(4000)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AquacultureFacilityId))]
        [InverseProperty(nameof(AquacultureFacilityRegister.LogBooks))]
        public virtual AquacultureFacilityRegister AquacultureFacility { get; set; }
        [ForeignKey(nameof(CurrentPermitLicenseId))]
        [InverseProperty(nameof(PermitLicensesRegister.LogBooks))]
        public virtual PermitLicensesRegister CurrentPermitLicense { get; set; }
        [ForeignKey(nameof(LegalId))]
        [InverseProperty("LogBooks")]
        public virtual Legal Legal { get; set; }
        [ForeignKey(nameof(LogBookTypeId))]
        [InverseProperty(nameof(NlogBookType.LogBooks))]
        public virtual NlogBookType LogBookType { get; set; }
        [ForeignKey(nameof(PersonId))]
        [InverseProperty("LogBooks")]
        public virtual Person Person { get; set; }
        [ForeignKey(nameof(RegisteredBuyerId))]
        [InverseProperty(nameof(BuyerRegister.LogBooks))]
        public virtual BuyerRegister RegisteredBuyer { get; set; }
        [ForeignKey(nameof(ShipId))]
        [InverseProperty(nameof(ShipRegister.LogBooks))]
        public virtual ShipRegister Ship { get; set; }
        [ForeignKey(nameof(StatusId))]
        [InverseProperty(nameof(NlogBookStatus.LogBooks))]
        public virtual NlogBookStatus Status { get; set; }
        [InverseProperty(nameof(AdmissionLogBookPage.LogBook))]
        public virtual ICollection<AdmissionLogBookPage> AdmissionLogBookPages { get; set; }
        [InverseProperty(nameof(AquacultureLogBookPage.LogBook))]
        public virtual ICollection<AquacultureLogBookPage> AquacultureLogBookPages { get; set; }
        [InverseProperty(nameof(FirstSaleLogBookPage.LogBook))]
        public virtual ICollection<FirstSaleLogBookPage> FirstSaleLogBookPages { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.LogBook))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(LogBookPermitLicense.LogBook))]
        public virtual ICollection<LogBookPermitLicense> LogBookPermitLicenses { get; set; }
        [InverseProperty(nameof(ShipLogBookPage.LogBook))]
        public virtual ICollection<ShipLogBookPage> ShipLogBookPages { get; set; }
        [InverseProperty(nameof(TransportationLogBookPage.LogBook))]
        public virtual ICollection<TransportationLogBookPage> TransportationLogBookPages { get; set; }
    }
}