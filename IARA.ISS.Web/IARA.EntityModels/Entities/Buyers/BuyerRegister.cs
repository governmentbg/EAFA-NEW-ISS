// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър купувачи и центрове за първа продажба
    /// </summary>
    [Table("BuyerRegister", Schema = "RCPP")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RCPP_BuyerRegister_Migration")]
    [Index(nameof(BuyerStatusId), Name = "IXFK_BuyerRegister_NBuyerStatuses")]
    [Index(nameof(TerritoryUnitId), Name = "IXFK_BuyerRegister_NTerritoryUnits")]
    [Index(nameof(SubmittedForPersonId), Name = "IXFK_BuyerRegister_Persons")]
    [Index(nameof(AgentId), Name = "IXFK_BuyerRegister_Persons_AgentID")]
    [Index(nameof(UtilityAddressId), Name = "IXFK_BuyersRegister_Addresses")]
    [Index(nameof(ApplicationId), Name = "IXFK_BuyersRegister_Applications")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_BuyersRegister_BuyersRegister")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_RCPP_BuyersRegister_ISS_Legals")]
    [Index(nameof(OrganizingPersonId), Name = "IXFK_RCPP_BuyersRegister_ISS_Persons")]
    [Index(nameof(BuyerTypeId), Name = "IXFK_RCPP_BuyersRegister_RCPP_NBuyerTypes")]
    [Index(nameof(RecordType), nameof(RegistrationNum), Name = "UK_RCPP_BuyersRegister_RegistrationNum", IsUnique = true)]
    public partial class BuyerRegister
    {
        public BuyerRegister()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            AquacultureLogBookPages = new HashSet<AquacultureLogBookPage>();
            BuyerLicenses = new HashSet<BuyerLicense>();
            BuyerPremiseUsageDocuments = new HashSet<BuyerPremiseUsageDocument>();
            BuyerRegisterFiles = new HashSet<BuyerRegisterFile>();
            BuyerRegisterStatuses = new HashSet<BuyerRegisterStatus>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            FirstSaleLogBookPages = new HashSet<FirstSaleLogBookPage>();
            InspectedPeople = new HashSet<InspectedPerson>();
            InverseRegisterApplication = new HashSet<BuyerRegister>();
            LogBooks = new HashSet<LogBook>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тип купувач (регистриран, ЦПП)
        /// </summary>
        [Column("BuyerTypeID")]
        public int BuyerTypeId { get; set; }
        /// <summary>
        /// Статус на купувач (Заявен, Активен, Прекратен)
        /// </summary>
        [Column("BuyerStatusID")]
        public int BuyerStatusId { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Регистрационен номер 
        /// </summary>
        [StringLength(50)]
        public string RegistrationNum { get; set; }
        /// <summary>
        /// Номер по УРОР генериран по формата на наредбата
        /// </summary>
        [StringLength(50)]
        public string UrrorNum { get; set; }
        /// <summary>
        /// Титуляр - юридическо  лице
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int? SubmittedForLegalId { get; set; }
        /// <summary>
        /// Титуляр, ако е физическо лице
        /// </summary>
        [Column("SubmittedForPersonID")]
        public int? SubmittedForPersonId { get; set; }
        /// <summary>
        /// Дата на регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? RegistrationDate { get; set; }
        /// <summary>
        /// Флаг дали организаторът (при ЦПП) съвпада със заявителя на услугата)
        /// </summary>
        public bool? IsOrganizingPersonSameAsSubmittedBy { get; set; }
        /// <summary>
        /// Организатор (за ЦПП)
        /// </summary>
        [Column("OrganizingPersonID")]
        public int? OrganizingPersonId { get; set; }
        /// <summary>
        /// Флаг дали агентът (при купувач) съвпада със заявителя на услугата
        /// </summary>
        public bool? IsAgentSameAsSubmittedBy { get; set; }
        /// <summary>
        /// Флаг дали агентът (при купувач) съвпада с материално отговорното лице на получателя на услугата
        /// </summary>
        public bool? IsAgentSameAsSubmittedForCustodianOfProperty { get; set; }
        /// <summary>
        /// Агент (за рег. купувач)
        /// </summary>
        [Column("AgentID")]
        public int? AgentId { get; set; }
        /// <summary>
        /// Флаг дали купувачът има магазин
        /// </summary>
        public bool? HasUtility { get; set; }
        /// <summary>
        /// Наименование на обект/магазин
        /// </summary>
        [StringLength(500)]
        public string UtilityName { get; set; }
        /// <summary>
        /// Адрес на помещението
        /// </summary>
        [Column("UtilityAddressID")]
        public int? UtilityAddressId { get; set; }
        /// <summary>
        /// Флаг дали купувачът има транспортно средство
        /// </summary>
        public bool? HasVehicle { get; set; }
        /// <summary>
        /// Номер на транспортно средство, при налично такова
        /// </summary>
        [StringLength(50)]
        public string VehicleNumber { get; set; }
        /// <summary>
        /// Териториално звено, към което е регистриран купувачът
        /// </summary>
        [Column("TerritoryUnitID")]
        public int? TerritoryUnitId { get; set; }
        /// <summary>
        /// Годишен оборот (използва се за кръстосани проверки)
        /// </summary>
        [Column("AnnualTurnoverBGN")]
        public decimal? AnnualTurnoverBgn { get; set; }
        /// <summary>
        /// Коментари и бележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AgentId))]
        [InverseProperty(nameof(Person.BuyerRegisterAgents))]
        public virtual Person Agent { get; set; }
        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("BuyerRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(BuyerStatusId))]
        [InverseProperty(nameof(NbuyerStatus.BuyerRegisters))]
        public virtual NbuyerStatus BuyerStatus { get; set; }
        [ForeignKey(nameof(BuyerTypeId))]
        [InverseProperty(nameof(NbuyerType.BuyerRegisters))]
        public virtual NbuyerType BuyerType { get; set; }
        [ForeignKey(nameof(OrganizingPersonId))]
        [InverseProperty(nameof(Person.BuyerRegisterOrganizingPeople))]
        public virtual Person OrganizingPerson { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(BuyerRegister.InverseRegisterApplication))]
        public virtual BuyerRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.BuyerRegisters))]
        public virtual Legal SubmittedForLegal { get; set; }
        [ForeignKey(nameof(SubmittedForPersonId))]
        [InverseProperty(nameof(Person.BuyerRegisterSubmittedForPeople))]
        public virtual Person SubmittedForPerson { get; set; }
        [ForeignKey(nameof(TerritoryUnitId))]
        [InverseProperty(nameof(NterritoryUnit.BuyerRegisters))]
        public virtual NterritoryUnit TerritoryUnit { get; set; }
        [ForeignKey(nameof(UtilityAddressId))]
        [InverseProperty(nameof(Address.BuyerRegisters))]
        public virtual Address UtilityAddress { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Buyer))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(AquacultureLogBookPage.RegisteredBuyer))]
        public virtual ICollection<AquacultureLogBookPage> AquacultureLogBookPages { get; set; }
        [InverseProperty(nameof(BuyerLicense.Buyer))]
        public virtual ICollection<BuyerLicense> BuyerLicenses { get; set; }
        [InverseProperty(nameof(BuyerPremiseUsageDocument.Buyer))]
        public virtual ICollection<BuyerPremiseUsageDocument> BuyerPremiseUsageDocuments { get; set; }
        [InverseProperty(nameof(BuyerRegisterFile.Record))]
        public virtual ICollection<BuyerRegisterFile> BuyerRegisterFiles { get; set; }
        [InverseProperty(nameof(BuyerRegisterStatus.BuyersRegister))]
        public virtual ICollection<BuyerRegisterStatus> BuyerRegisterStatuses { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.Buyer))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(FirstSaleLogBookPage.Buyer))]
        public virtual ICollection<FirstSaleLogBookPage> FirstSaleLogBookPages { get; set; }
        [InverseProperty(nameof(InspectedPerson.Buyer))]
        public virtual ICollection<InspectedPerson> InspectedPeople { get; set; }
        [InverseProperty(nameof(BuyerRegister.RegisterApplication))]
        public virtual ICollection<BuyerRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(LogBook.RegisteredBuyer))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
    }
}