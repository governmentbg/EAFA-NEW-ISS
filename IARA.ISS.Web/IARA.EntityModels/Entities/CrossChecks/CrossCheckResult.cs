// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Резултати от кръстосани проверки
    /// </summary>
    [Table("CrossCheckResults", Schema = "Checks")]
    [Index(nameof(CheckId), Name = "IXFK_Check_CrossCheckResults_Check_CrossChecks")]
    [Index(nameof(ResolutionId), Name = "IXFK_CrossCheckResults_NCheckResolutions")]
    [Index(nameof(AssignedUserId), Name = "IXFK_CrossCheckResults_Users")]
    [Index(nameof(PageCode), nameof(TableId), nameof(CheckId), nameof(RecordUid), nameof(ValidTo), Name = "UK_Check_CrossCheckResults", IsUnique = true)]
    public partial class CrossCheckResult
    {         public CrossCheckResult()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Кръстосана проверка
        /// </summary>
        [Column("CheckID")]
        public int CheckId { get; set; }
        /// <summary>
        /// Име на таблица за проверка
        /// </summary>
        [Required]
        [StringLength(255)]
        public string PageCode { get; set; }
        /// <summary>
        /// Идентификатор на записа с резултат от проверка
        /// </summary>
        [Column("TableID")]
        public int TableId { get; set; }
        /// <summary>
        /// Уникален идентификатор в рамките на TableID (може да е null, ако в рамките на TableID има само един запис)
        /// </summary>
        [Column("RecordUID")]
        [StringLength(50)]
        public string RecordUid { get; set; }
        /// <summary>
        /// Описание на грешката
        /// </summary>
        [StringLength(4000)]
        public string ErrorDescription { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Статус на резултат от кръстосана проверка
        /// </summary>
        [Column("ResolutionID")]
        public int ResolutionId { get; set; }
        /// <summary>
        /// Пояснения по разрешаването на проверката (коригирана декларация, издаден АУАН и др.)
        /// </summary>
        [StringLength(4000)]
        public string ResolutionDetails { get; set; }
        /// <summary>
        /// Потребител, отговорен за корекцията на грешката
        /// </summary>
        [Column("AssignedUserID")]
        public int? AssignedUserId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит (май е излишно тук)
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AssignedUserId))]
        [InverseProperty(nameof(User.CrossCheckResults))]
        public virtual User AssignedUser { get; set; }
        [ForeignKey(nameof(CheckId))]
        [InverseProperty(nameof(CrossCheck.CrossCheckResults))]
        public virtual CrossCheck Check { get; set; }
        [ForeignKey(nameof(ResolutionId))]
        [InverseProperty(nameof(NcheckResolution.CrossCheckResults))]
        public virtual NcheckResolution Resolution { get; set; }
    }
}
