// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Кръстосани проверки
    /// </summary>
    [Table("CrossChecks", Schema = "Checks")]
    [Index(nameof(ReportId), Name = "IXFK_CrossChecks_Reports")]
    [Index(nameof(ReportId), Name = "UK_Check_CrossChecks", IsUnique = true)]
    public partial class CrossCheck
    {
        public CrossCheck()
        {
            CrossCheckResults = new HashSet<CrossCheckResult>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Данни за справка за изпълнение
        /// </summary>
        [Column("ReportID")]
        public int ReportId { get; set; }
        /// <summary>
        /// Цел на проверката
        /// </summary>
        [StringLength(1000)]
        public string Puprose { get; set; }
        /// <summary>
        /// Ниво на грешката
        /// </summary>
        public short ErrorLevel { get; set; }
        /// <summary>
        /// Източник на данни за задействане (описание)
        /// </summary>
        [StringLength(500)]
        public string DataSource { get; set; }
        /// <summary>
        /// Описание на колони за полета за задействане
        /// </summary>
        [StringLength(1000)]
        public string DataSourceColumns { get; set; }
        /// <summary>
        /// Проверка на източника на данни (описание)
        /// </summary>
        [StringLength(500)]
        public string CheckSource { get; set; }
        /// <summary>
        /// Проверка на полета с данни (описание)
        /// </summary>
        [StringLength(1000)]
        public string CheckSourceColumns { get; set; }
        /// <summary>
        /// Име на таблица за проверяване
        /// </summary>
        [Required]
        [StringLength(255)]
        public string CheckTableName { get; set; }
        /// <summary>
        /// Описание на проверката
        /// </summary>
        [StringLength(4000)]
        public string CheckDescription { get; set; }
        /// <summary>
        /// Честота на автоматично изпълнение (Repeating=на интервал минути / Daily= веднъж на ден / Weekly=веднъж на седмица / Monthly= веднъж на месец / Manual= само ръчно изпълнение / Manual-ISS= само ИСС може да я изпълнява като валидация).
        /// </summary>
        [Required]
        [StringLength(20)]
        public string AutoExecFrequency { get; set; }
        /// <summary>
        /// Дата и час на последно изпълнение
        /// </summary>
        public DateTime? LastExecDateTime { get; set; }
        /// <summary>
        /// Брой намерени редове от последното изпъление
        /// </summary>
        public int? LastExecRowCount { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ReportId))]
        [InverseProperty("CrossCheck")]
        public virtual Report Report { get; set; }
        [InverseProperty(nameof(CrossCheckResult.Check))]
        public virtual ICollection<CrossCheckResult> CrossCheckResults { get; set; }
    }
}