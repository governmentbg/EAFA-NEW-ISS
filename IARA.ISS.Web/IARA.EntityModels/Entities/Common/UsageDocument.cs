// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Документи за ползване
    /// </summary>
    [Table("UsageDocuments", Schema = "iss")]
    [Index(nameof(LessorLegalId), Name = "IXFK_UsageDocuments_Legals")]
    [Index(nameof(DocumentTypeId), Name = "IXFK_UsageDocuments_NUsageDocumentTypes")]
    [Index(nameof(LessorPersonId), Name = "IXFK_UsageDocuments_Persons")]
    public partial class UsageDocument
    {
        public UsageDocument()
        {
            AquacultureUsageDocuments = new HashSet<AquacultureUsageDocument>();
            BuyerPremiseUsageDocuments = new HashSet<BuyerPremiseUsageDocument>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тип на документа
        /// </summary>
        [Column("DocumentTypeID")]
        public int DocumentTypeId { get; set; }
        /// <summary>
        /// Номер на документа
        /// </summary>
        [Required]
        [StringLength(50)]
        public string DocumentNum { get; set; }
        /// <summary>
        /// Начална дата на валидност на документа
        /// </summary>
        public DateTime DocumentValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на документа
        /// </summary>
        public DateTime? DocumentValidTo { get; set; }
        /// <summary>
        /// Дали наемодателят/концесионерът е физическо лице (NULL, ако няма такъв)
        /// </summary>
        public bool? IsLessorPerson { get; set; }
        /// <summary>
        /// Физическо лице - наемодател
        /// </summary>
        [Column("LessorPersonID")]
        public int? LessorPersonId { get; set; }
        /// <summary>
        /// Юридическо лице - наемодател или концесионер
        /// </summary>
        [Column("LessorLegalID")]
        public int? LessorLegalId { get; set; }
        /// <summary>
        /// Коментар
        /// </summary>
        [StringLength(1000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(DocumentTypeId))]
        [InverseProperty(nameof(NusageDocumentType.UsageDocuments))]
        public virtual NusageDocumentType DocumentType { get; set; }
        [ForeignKey(nameof(LessorLegalId))]
        [InverseProperty(nameof(Legal.UsageDocuments))]
        public virtual Legal LessorLegal { get; set; }
        [ForeignKey(nameof(LessorPersonId))]
        [InverseProperty(nameof(Person.UsageDocuments))]
        public virtual Person LessorPerson { get; set; }
        [InverseProperty(nameof(AquacultureUsageDocument.UsageDocument))]
        public virtual ICollection<AquacultureUsageDocument> AquacultureUsageDocuments { get; set; }
        [InverseProperty(nameof(BuyerPremiseUsageDocument.UsageDocument))]
        public virtual ICollection<BuyerPremiseUsageDocument> BuyerPremiseUsageDocuments { get; set; }
    }
}