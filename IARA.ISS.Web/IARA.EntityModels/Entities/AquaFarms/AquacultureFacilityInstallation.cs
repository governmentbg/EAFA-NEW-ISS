// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Съоръжения към аквакултурно стопанство
    /// </summary>
    [Table("AquacultureFacilityInstallations", Schema = "RAquaSt")]
    [Index(nameof(AquacultureFacilityId), Name = "IXFK_AquaFacilityInstalls_AquacultureFacilityInstalls")]
    [Index(nameof(InstallationAquariumId), Name = "IXFK_AquaFacilityInstalls_InstallationAquariums")]
    [Index(nameof(InstallationDamId), Name = "IXFK_AquaFacilityInstalls_InstallationDams")]
    [Index(nameof(InstallationTypeId), Name = "IXFK_AquaFacilityInstalls_NAquacultureInstallationTypes")]
    public partial class AquacultureFacilityInstallation
    {
        public AquacultureFacilityInstallation()
        {
            AquacultureInstallationBasins = new HashSet<AquacultureInstallationBasin>();
            AquacultureInstallationCollectors = new HashSet<AquacultureInstallationCollector>();
            AquacultureInstallationNetCages = new HashSet<AquacultureInstallationNetCage>();
            AquacultureInstallationRafts = new HashSet<AquacultureInstallationRaft>();
            AquacultureInstallationRecirculatorySystems = new HashSet<AquacultureInstallationRecirculatorySystem>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Уникален идентификатор на аквакултурно стопанство
        /// </summary>
        [Column("AquacultureFacilityID")]
        public int AquacultureFacilityId { get; set; }
        /// <summary>
        /// Вид съоръжение
        /// </summary>
        [Column("InstallationTypeID")]
        public int InstallationTypeId { get; set; }
        /// <summary>
        /// Аквариум
        /// </summary>
        [Column("InstallationAquariumID")]
        public int? InstallationAquariumId { get; set; }
        /// <summary>
        /// Язовир
        /// </summary>
        [Column("InstallationDamID")]
        public int? InstallationDamId { get; set; }
        /// <summary>
        /// Бележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AquacultureFacilityId))]
        [InverseProperty(nameof(AquacultureFacilityRegister.AquacultureFacilityInstallations))]
        public virtual AquacultureFacilityRegister AquacultureFacility { get; set; }
        [ForeignKey(nameof(InstallationAquariumId))]
        [InverseProperty("AquacultureFacilityInstallations")]
        public virtual InstallationAquarium InstallationAquarium { get; set; }
        [ForeignKey(nameof(InstallationDamId))]
        [InverseProperty("AquacultureFacilityInstallations")]
        public virtual InstallationDam InstallationDam { get; set; }
        [ForeignKey(nameof(InstallationTypeId))]
        [InverseProperty(nameof(NaquacultureInstallationType.AquacultureFacilityInstallations))]
        public virtual NaquacultureInstallationType InstallationType { get; set; }
        [InverseProperty(nameof(AquacultureInstallationBasin.AquacutureInstallation))]
        public virtual ICollection<AquacultureInstallationBasin> AquacultureInstallationBasins { get; set; }
        [InverseProperty(nameof(AquacultureInstallationCollector.AquacultureInstallation))]
        public virtual ICollection<AquacultureInstallationCollector> AquacultureInstallationCollectors { get; set; }
        [InverseProperty(nameof(AquacultureInstallationNetCage.AquacultureInstallation))]
        public virtual ICollection<AquacultureInstallationNetCage> AquacultureInstallationNetCages { get; set; }
        [InverseProperty(nameof(AquacultureInstallationRaft.AquacultureInstallation))]
        public virtual ICollection<AquacultureInstallationRaft> AquacultureInstallationRafts { get; set; }
        [InverseProperty(nameof(AquacultureInstallationRecirculatorySystem.AquacultureInstallation))]
        public virtual ICollection<AquacultureInstallationRecirculatorySystem> AquacultureInstallationRecirculatorySystems { get; set; }
    }
}