// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър аквакултурни стопанства
    /// </summary>
    [Table("AquacultureFacilityRegister", Schema = "RAquaSt")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RAquaSt_AquacultureFacilityRegister_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_AquaFacilityRegister_Applications")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_AquaFacilityRegister_AquacultureFacilityRegister")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_AquaFacilityRegister_Legals")]
    [Index(nameof(PowerSupplyTypeId), Name = "IXFK_AquaFacilityRegister_NAquaculturePowerSupplyTypes")]
    [Index(nameof(WaterAreaTypeId), Name = "IXFK_AquaFacilityRegister_NAquacultureWaterAreaTypes")]
    [Index(nameof(PopulatedAreaId), Name = "IXFK_AquaFacilityRegister_NPopulatedAreas")]
    [Index(nameof(TerritoryUnitId), Name = "IXFK_AquaFacilityRegister_NTerritoryUnits")]
    [Index(nameof(AquacultureStatusId), Name = "IXFK_AquacultureFacilityRegister_NAquacultureStatuses")]
    [Index(nameof(SubmittedForPersonId), Name = "IXFK_AquacultureFacilityRegister_Persons")]
    public partial class AquacultureFacilityRegister
    {
        public AquacultureFacilityRegister()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            AquacultureBabhCertificates = new HashSet<AquacultureBabhCertificate>();
            AquacultureFacilityCoordinates = new HashSet<AquacultureFacilityCoordinate>();
            AquacultureFacilityFishes = new HashSet<AquacultureFacilityFish>();
            AquacultureFacilityInstallations = new HashSet<AquacultureFacilityInstallation>();
            AquacultureFacilityRegisterFiles = new HashSet<AquacultureFacilityRegisterFile>();
            AquacultureFacilityStatuses = new HashSet<AquacultureFacilityStatus>();
            AquacultureHatcheryEquipments = new HashSet<AquacultureHatcheryEquipment>();
            AquacultureInspections = new HashSet<AquacultureInspection>();
            AquacultureOvosCertificates = new HashSet<AquacultureOvosCertificate>();
            AquacultureUsageDocuments = new HashSet<AquacultureUsageDocument>();
            AquacultureWaterLawCertificates = new HashSet<AquacultureWaterLawCertificate>();
            AquacutlureForms = new HashSet<AquacutlureForm>();
            InverseRegisterApplication = new HashSet<AquacultureFacilityRegister>();
            LogBooks = new HashSet<LogBook>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров:  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Получател - ФЛ
        /// </summary>
        [Column("SubmittedForPersonID")]
        public int? SubmittedForPersonId { get; set; }
        /// <summary>
        /// Получател - ЮЛ
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int? SubmittedForLegalId { get; set; }
        /// <summary>
        /// Пореден номер на регистров запис
        /// </summary>
        public int? RegNum { get; set; }
        /// <summary>
        /// Номер по УРОР
        /// </summary>
        [StringLength(20)]
        public string UrorNum { get; set; }
        /// <summary>
        /// Статус на стопанството (Application/Requested/Approved/Canceled)
        /// </summary>
        [Column("AquacultureStatusID")]
        public int AquacultureStatusId { get; set; }
        /// <summary>
        /// Име на аквакултурното стопанство
        /// </summary>
        [Required]
        [StringLength(200)]
        public string Name { get; set; }
        /// <summary>
        /// Дата на регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime RegistrationDate { get; set; }
        /// <summary>
        /// Териториално звено (използва се при генериране на УРОР)
        /// </summary>
        [Column("TerritoryUnitID")]
        public int TerritoryUnitId { get; set; }
        /// <summary>
        /// Вид воден обект
        /// </summary>
        public int WaterAreaTypeId { get; set; }
        /// <summary>
        /// Населено място, където се намира стопанството
        /// </summary>
        [Column("PopulatedAreaID")]
        public int? PopulatedAreaId { get; set; }
        /// <summary>
        /// Допълнителни бележки към местоположението на аквакултурното стопанство
        /// </summary>
        [Required]
        [StringLength(500)]
        public string LocationDescription { get; set; }
        /// <summary>
        /// Вид на стопанството според солеността на водата
        /// </summary>
        [Required]
        [StringLength(50)]
        public string WaterSalinity { get; set; }
        /// <summary>
        /// Вид на стопанството според температурата на водата
        /// </summary>
        [Required]
        [StringLength(50)]
        public string WaterTemperature { get; set; }
        /// <summary>
        /// Система
        /// </summary>
        [Required]
        [StringLength(50)]
        public string System { get; set; }
        /// <summary>
        /// Вид захранващ източник
        /// </summary>
        [Column("PowerSupplyTypeID")]
        public int PowerSupplyTypeId { get; set; }
        /// <summary>
        /// Име на захранващ източник
        /// </summary>
        [Required]
        [StringLength(100)]
        public string PowerSupplyName { get; set; }
        /// <summary>
        /// Дебит към захранващ източник
        /// </summary>
        public decimal? PowerSupplyDebit { get; set; }
        /// <summary>
        /// Обща водна площ (кв.м)
        /// </summary>
        public decimal TotalWaterArea { get; set; }
        /// <summary>
        /// Общ производствен капацитет (кг)
        /// </summary>
        public decimal TotalProductionCapacity { get; set; }
        /// <summary>
        /// Капацитет на риболюпилнята (бр)
        /// </summary>
        public decimal? HatcheryCapacity { get; set; }
        /// <summary>
        /// Коментари и бележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("AquacultureFacilityRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(AquacultureStatusId))]
        [InverseProperty(nameof(NaquacultureStatus.AquacultureFacilityRegisters))]
        public virtual NaquacultureStatus AquacultureStatus { get; set; }
        [ForeignKey(nameof(PopulatedAreaId))]
        [InverseProperty(nameof(NpopulatedArea.AquacultureFacilityRegisters))]
        public virtual NpopulatedArea PopulatedArea { get; set; }
        [ForeignKey(nameof(PowerSupplyTypeId))]
        [InverseProperty(nameof(NaquaculturePowerSupplyType.AquacultureFacilityRegisters))]
        public virtual NaquaculturePowerSupplyType PowerSupplyType { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(AquacultureFacilityRegister.InverseRegisterApplication))]
        public virtual AquacultureFacilityRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.AquacultureFacilityRegisters))]
        public virtual Legal SubmittedForLegal { get; set; }
        [ForeignKey(nameof(SubmittedForPersonId))]
        [InverseProperty(nameof(Person.AquacultureFacilityRegisters))]
        public virtual Person SubmittedForPerson { get; set; }
        [ForeignKey(nameof(TerritoryUnitId))]
        [InverseProperty(nameof(NterritoryUnit.AquacultureFacilityRegisters))]
        public virtual NterritoryUnit TerritoryUnit { get; set; }
        [ForeignKey(nameof(WaterAreaTypeId))]
        [InverseProperty(nameof(NaquacultureWaterAreaType.AquacultureFacilityRegisters))]
        public virtual NaquacultureWaterAreaType WaterAreaType { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.AquacultureFacility))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(AquacultureBabhCertificate.AquacultureFacility))]
        public virtual ICollection<AquacultureBabhCertificate> AquacultureBabhCertificates { get; set; }
        [InverseProperty(nameof(AquacultureFacilityCoordinate.AquacultureFacility))]
        public virtual ICollection<AquacultureFacilityCoordinate> AquacultureFacilityCoordinates { get; set; }
        [InverseProperty(nameof(AquacultureFacilityFish.AquacultureFacility))]
        public virtual ICollection<AquacultureFacilityFish> AquacultureFacilityFishes { get; set; }
        [InverseProperty(nameof(AquacultureFacilityInstallation.AquacultureFacility))]
        public virtual ICollection<AquacultureFacilityInstallation> AquacultureFacilityInstallations { get; set; }
        [InverseProperty(nameof(AquacultureFacilityRegisterFile.Record))]
        public virtual ICollection<AquacultureFacilityRegisterFile> AquacultureFacilityRegisterFiles { get; set; }
        [InverseProperty(nameof(AquacultureFacilityStatus.AquacultureFacility))]
        public virtual ICollection<AquacultureFacilityStatus> AquacultureFacilityStatuses { get; set; }
        [InverseProperty(nameof(AquacultureHatcheryEquipment.AquacultureFacility))]
        public virtual ICollection<AquacultureHatcheryEquipment> AquacultureHatcheryEquipments { get; set; }
        [InverseProperty(nameof(AquacultureInspection.AquacultureRegister))]
        public virtual ICollection<AquacultureInspection> AquacultureInspections { get; set; }
        [InverseProperty(nameof(AquacultureOvosCertificate.AquacultureFacility))]
        public virtual ICollection<AquacultureOvosCertificate> AquacultureOvosCertificates { get; set; }
        [InverseProperty(nameof(AquacultureUsageDocument.AquacultureFacility))]
        public virtual ICollection<AquacultureUsageDocument> AquacultureUsageDocuments { get; set; }
        [InverseProperty(nameof(AquacultureWaterLawCertificate.AquacultureFacility))]
        public virtual ICollection<AquacultureWaterLawCertificate> AquacultureWaterLawCertificates { get; set; }
        [InverseProperty(nameof(AquacutlureForm.AquacultureFacility))]
        public virtual ICollection<AquacutlureForm> AquacutlureForms { get; set; }
        [InverseProperty(nameof(AquacultureFacilityRegister.RegisterApplication))]
        public virtual ICollection<AquacultureFacilityRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(LogBook.AquacultureFacility))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
    }
}