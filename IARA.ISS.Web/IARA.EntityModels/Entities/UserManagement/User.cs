// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Потребители
    /// </summary>
    [Table("Users", Schema = "UsrMgmt")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_UsrMgmt_Users_Migration")]
    [Index(nameof(PersonId), Name = "IXFK_UsrMgmt_Users_ISS_Persons")]
    [Index(nameof(Email), Name = "UK_UsrMgmt_Users_Email", IsUnique = true)]
    [Index(nameof(PersonId), Name = "UK_UsrMgmt_Users_PersonID", IsUnique = true)]
    [Index(nameof(Username), Name = "UK_UsrMgmt_Users_Username", IsUnique = true)]
    public partial class User
    {
        public User()
        {
            ApplicationAssignedUsers = new HashSet<Application>();
            ApplicationChangeHistoryAssignedUsers = new HashSet<ApplicationChangeHistory>();
            ApplicationChangeHistoryModifiedByUsers = new HashSet<ApplicationChangeHistory>();
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            ApplicationSubmittedByUsers = new HashSet<Application>();
            CrossCheckResults = new HashSet<CrossCheckResult>();
            FishingTickets = new HashSet<FishingTicket>();
            InspectionRegisters = new HashSet<InspectionRegister>();
            Inspectors = new HashSet<Inspector>();
            NewsDistrictUserSubscriptions = new HashSet<NewsDistrictUserSubscription>();
            NotificationsLogs = new HashSet<NotificationsLog>();
            PenalDecreesRegisters = new HashSet<PenalDecreesRegister>();
            ReportUserPermissions = new HashSet<ReportUserPermission>();
            Reports = new HashSet<Report>();
            UserLegals = new HashSet<UserLegal>();
            UserMobileDevices = new HashSet<UserMobileDevice>();
            UserRoles = new HashSet<UserRole>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Потребителско име
        /// </summary>
        [Required]
        [StringLength(100)]
        public string Username { get; set; }
        /// <summary>
        /// Парола (хеш) - a salted and hashed representation of the password for this user.
        /// </summary>
        [StringLength(200)]
        public string Password { get; set; }
        /// <summary>
        /// E-mail
        /// </summary>
        [StringLength(200)]
        public string Email { get; set; }
        /// <summary>
        /// Физическо лице за този потребител
        /// </summary>
        [Column("PersonID")]
        public int PersonId { get; set; }
        /// <summary>
        /// Флаг дали портебителят в вътрешен за ИАРА или публичен посетител
        /// </summary>
        public bool IsInternalUser { get; set; }
        /// <summary>
        /// Флаг дали потребителя влиза с Username/Password
        /// </summary>
        public bool HasUserPassLogin { get; set; }
        /// <summary>
        /// Флаг дали потребителя влиза през eAuth
        /// </summary>
        [Column("HasEAuthLogin")]
        public bool HasEauthLogin { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(PersonId))]
        [InverseProperty("User")]
        public virtual Person Person { get; set; }
        [InverseProperty("User")]
        public virtual UserInfo UserInfo { get; set; }
        [InverseProperty(nameof(Application.AssignedUser))]
        public virtual ICollection<Application> ApplicationAssignedUsers { get; set; }
        [InverseProperty(nameof(ApplicationChangeHistory.AssignedUser))]
        public virtual ICollection<ApplicationChangeHistory> ApplicationChangeHistoryAssignedUsers { get; set; }
        [InverseProperty(nameof(ApplicationChangeHistory.ModifiedByUser))]
        public virtual ICollection<ApplicationChangeHistory> ApplicationChangeHistoryModifiedByUsers { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.User))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(Application.SubmittedByUser))]
        public virtual ICollection<Application> ApplicationSubmittedByUsers { get; set; }
        [InverseProperty(nameof(CrossCheckResult.AssignedUser))]
        public virtual ICollection<CrossCheckResult> CrossCheckResults { get; set; }
        [InverseProperty(nameof(FishingTicket.CreatedByUser))]
        public virtual ICollection<FishingTicket> FishingTickets { get; set; }
        [InverseProperty(nameof(InspectionRegister.CreatedByUser))]
        public virtual ICollection<InspectionRegister> InspectionRegisters { get; set; }
        [InverseProperty(nameof(Inspector.User))]
        public virtual ICollection<Inspector> Inspectors { get; set; }
        [InverseProperty(nameof(NewsDistrictUserSubscription.User))]
        public virtual ICollection<NewsDistrictUserSubscription> NewsDistrictUserSubscriptions { get; set; }
        [InverseProperty(nameof(NotificationsLog.User))]
        public virtual ICollection<NotificationsLog> NotificationsLogs { get; set; }
        [InverseProperty(nameof(PenalDecreesRegister.IssuerUser))]
        public virtual ICollection<PenalDecreesRegister> PenalDecreesRegisters { get; set; }
        [InverseProperty(nameof(ReportUserPermission.User))]
        public virtual ICollection<ReportUserPermission> ReportUserPermissions { get; set; }
        [InverseProperty(nameof(Report.LastRunUser))]
        public virtual ICollection<Report> Reports { get; set; }
        [InverseProperty(nameof(UserLegal.User))]
        public virtual ICollection<UserLegal> UserLegals { get; set; }
        [InverseProperty(nameof(UserMobileDevice.User))]
        public virtual ICollection<UserMobileDevice> UserMobileDevices { get; set; }
        [InverseProperty(nameof(UserRole.User))]
        public virtual ICollection<UserRole> UserRoles { get; set; }
    }
}