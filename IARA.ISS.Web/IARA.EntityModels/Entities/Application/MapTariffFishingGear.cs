// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Мапинг за коя тарифа, кои видове уреди отговарят
    /// </summary>
    [Table("MapTariffFishingGears", Schema = "Appl")]
    [Index(nameof(FishingGearId), Name = "IXFK_MapTariffFishingGears_NFishingGears")]
    [Index(nameof(TariffId), Name = "IXFK_MapTariffFishingGears_NTariff")]
    [Index(nameof(TariffId), nameof(FishingGearId), Name = "UK_Appl_MapTariffFishingGears", IsUnique = true)]
    public partial class MapTariffFishingGear
    {         public MapTariffFishingGear()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тарифа
        /// </summary>
        [Column("TariffID")]
        public int TariffId { get; set; }
        /// <summary>
        /// Риболовен уред
        /// </summary>
        [Column("FishingGearID")]
        public int FishingGearId { get; set; }
        /// <summary>
        /// Начин на изчисление на количеството марки за тази тарифа - &apos;ByGear&apos; - за всеки уред по 1 марка, &apos;100m&apos;- на всеки 100м една марка
        /// </summary>
        [StringLength(20)]
        public string MarksCalcType { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(FishingGearId))]
        [InverseProperty(nameof(NfishingGear.MapTariffFishingGears))]
        public virtual NfishingGear FishingGear { get; set; }
        [ForeignKey(nameof(TariffId))]
        [InverseProperty(nameof(Ntariff.MapTariffFishingGears))]
        public virtual Ntariff Tariff { get; set; }
    }
}
