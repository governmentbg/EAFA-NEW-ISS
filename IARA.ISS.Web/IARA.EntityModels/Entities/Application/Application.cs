// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Заявления за административни услуги
    /// </summary>
    [Table("Applications", Schema = "Appl")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_Appl_Applications_Migration")]
    [Index(nameof(SubmitDateTime), Name = "IDX_Applications_SubmitDateTime")]
    [Index(nameof(DeliveryId), Name = "IXFK_Applications_ApplicationDelivery")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_Applications_Legals_Hist")]
    [Index(nameof(SubmittedByLetterOfAttorneyId), Name = "IXFK_Applications_LetterOfAttorney")]
    [Index(nameof(ApplicationStatusHierTypeId), Name = "IXFK_Applications_NApplicationStatusHierarchyTypes")]
    [Index(nameof(ApplicationStatusId), Name = "IXFK_Applications_NApplicationStatuses")]
    [Index(nameof(ApplicationTypeId), Name = "IXFK_Applications_NApplicationTypes")]
    [Index(nameof(PaymentStatusId), Name = "IXFK_Applications_NPaymentStatuses")]
    [Index(nameof(SubmittedByPersonRoleId), Name = "IXFK_Applications_NSubmittedByRoles")]
    [Index(nameof(TerritoryUnitId), Name = "IXFK_Applications_NTerritoryUnits")]
    [Index(nameof(SubmittedByPersonId), Name = "IXFK_Applications_Persons")]
    [Index(nameof(SubmittedForPersonId), Name = "IXFK_Applications_Persons_Hist")]
    [Index(nameof(AssignedUserId), Name = "IXFK_Applications_Users")]
    [Index(nameof(SubmittedByUserId), Name = "IXFK_Applications_Users_SubmittedBy")]
    [Index(nameof(ApplicationTypeId), nameof(ApplicationStatusHierTypeId), nameof(SubmitDateTime), nameof(SubmittedByUserId), Name = "UK_Appl_Application", IsUnique = true)]
    public partial class Application
    {
        public Application()
        {
            ApplicationChangeHistories = new HashSet<ApplicationChangeHistory>();
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            ApplicationFiles = new HashSet<ApplicationFile>();
            ApplicationRegiXchecks = new HashSet<ApplicationRegiXcheck>();
            AquacultureFacilityRegisters = new HashSet<AquacultureFacilityRegister>();
            BuyerRegisters = new HashSet<BuyerRegister>();
            CapacityChangeHistories = new HashSet<CapacityChangeHistory>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            FishermenRegisters = new HashSet<FishermenRegister>();
            FishingTickets = new HashSet<FishingTicket>();
            Legals = new HashSet<Legal>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisters = new HashSet<PermitRegister>();
            ScientificPermitRegisters = new HashSet<ScientificPermitRegister>();
            ShipRegisters = new HashSet<ShipRegister>();
            StatisticalFormsRegisters = new HashSet<StatisticalFormsRegister>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тип заявление
        /// </summary>
        [Column("ApplicationTypeID")]
        public int ApplicationTypeId { get; set; }
        /// <summary>
        /// Тип на процеса за обработка (електронен, на хартия, билет)
        /// </summary>
        [Column("ApplicationStatusHierTypeID")]
        public int ApplicationStatusHierTypeId { get; set; }
        /// <summary>
        /// Статус на заявление
        /// </summary>
        [Column("ApplicationStatusID")]
        public int ApplicationStatusId { get; set; }
        /// <summary>
        /// Основание за промяна на статуса
        /// </summary>
        [StringLength(500)]
        public string StatusReason { get; set; }
        /// <summary>
        /// Дата и час на подаване на заявление
        /// </summary>
        public DateTime SubmitDateTime { get; set; }
        /// <summary>
        /// Потребител, подал заявлението (може да е служител на ИАРА)
        /// </summary>
        [Column("SubmittedByUserID")]
        public int SubmittedByUserId { get; set; }
        /// <summary>
        /// Физическо лице, заявител на услугата (ако заявлението е подадено онлайн, това съвпада с ФЛ на SubmittedByUserID, ако не, това е истинското ФЛ, което подава заявлението, а в SubmittedByUserID е служител на ИАРА обработил заявлението)
        /// </summary>
        [Column("SubmittedByPersonID")]
        public int? SubmittedByPersonId { get; set; }
        /// <summary>
        /// Роля на подаващия заявление спрямо получателя
        /// </summary>
        [Column("SubmittedByPersonRoleID")]
        public int? SubmittedByPersonRoleId { get; set; }
        /// <summary>
        /// Данни за пълномощно ако SubmittedByPersonID е пълномощник
        /// </summary>
        [Column("SubmittedByLetterOfAttorneyID")]
        public int? SubmittedByLetterOfAttorneyId { get; set; }
        /// <summary>
        /// Физическо лице, за което е заявлението (титуляр на заявлението)
        /// </summary>
        [Column("SubmittedForPersonID")]
        public int? SubmittedForPersonId { get; set; }
        /// <summary>
        /// Юридическо лице, за което е заявлението (титуляр на заявлението)
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int? SubmittedForLegalId { get; set; }
        /// <summary>
        /// Служител, назначен за обработка на заявлението
        /// </summary>
        [Column("AssignedUserID")]
        public int? AssignedUserId { get; set; }
        /// <summary>
        /// Териториална единица (взема се от AssignedUserID)
        /// </summary>
        [Column("TerritoryUnitID")]
        public int? TerritoryUnitId { get; set; }
        /// <summary>
        /// Данни за връчване на резултата от заявлението
        /// </summary>
        [Column("DeliveryID")]
        public int? DeliveryId { get; set; }
        /// <summary>
        /// Състояние на плащане (NotNeeded, Unpaid, PaymentFail, PaidOK)
        /// </summary>
        [Column("PaymentStatusID")]
        public int PaymentStatusId { get; set; }
        /// <summary>
        /// Уникален код за достъп и назначаване на отговорник
        /// </summary>
        [StringLength(50)]
        public string AccessCode { get; set; }
        /// <summary>
        /// Входящ/Изходящ номер в Евентис
        /// </summary>
        [StringLength(50)]
        public string EventisNum { get; set; }
        /// <summary>
        /// Съдържание на заявлението в JSON формат, когато то е DRAFT и още не е подадено към ИАРА
        /// </summary>
        public string ApplicationDraftContents { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationStatusId))]
        [InverseProperty(nameof(NapplicationStatus.Applications))]
        public virtual NapplicationStatus ApplicationStatus { get; set; }
        [ForeignKey(nameof(ApplicationStatusHierTypeId))]
        [InverseProperty(nameof(NapplicationStatusHierarchyType.Applications))]
        public virtual NapplicationStatusHierarchyType ApplicationStatusHierType { get; set; }
        [ForeignKey(nameof(ApplicationTypeId))]
        [InverseProperty(nameof(NapplicationType.Applications))]
        public virtual NapplicationType ApplicationType { get; set; }
        [ForeignKey(nameof(AssignedUserId))]
        [InverseProperty(nameof(User.ApplicationAssignedUsers))]
        public virtual User AssignedUser { get; set; }
        [ForeignKey(nameof(DeliveryId))]
        [InverseProperty(nameof(ApplicationDelivery.Applications))]
        public virtual ApplicationDelivery Delivery { get; set; }
        [ForeignKey(nameof(PaymentStatusId))]
        [InverseProperty(nameof(NpaymentStatus.Applications))]
        public virtual NpaymentStatus PaymentStatus { get; set; }
        [ForeignKey(nameof(SubmittedByLetterOfAttorneyId))]
        [InverseProperty(nameof(LetterOfAttorney.Applications))]
        public virtual LetterOfAttorney SubmittedByLetterOfAttorney { get; set; }
        [ForeignKey(nameof(SubmittedByPersonId))]
        [InverseProperty(nameof(Person.ApplicationSubmittedByPeople))]
        public virtual Person SubmittedByPerson { get; set; }
        [ForeignKey(nameof(SubmittedByPersonRoleId))]
        [InverseProperty(nameof(NsubmittedByRole.Applications))]
        public virtual NsubmittedByRole SubmittedByPersonRole { get; set; }
        [ForeignKey(nameof(SubmittedByUserId))]
        [InverseProperty(nameof(User.ApplicationSubmittedByUsers))]
        public virtual User SubmittedByUser { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.Applications))]
        public virtual Legal SubmittedForLegal { get; set; }
        [ForeignKey(nameof(SubmittedForPersonId))]
        [InverseProperty(nameof(Person.ApplicationSubmittedForPeople))]
        public virtual Person SubmittedForPerson { get; set; }
        [ForeignKey(nameof(TerritoryUnitId))]
        [InverseProperty(nameof(NterritoryUnit.Applications))]
        public virtual NterritoryUnit TerritoryUnit { get; set; }
        [InverseProperty("Application")]
        public virtual ApplicationPayment ApplicationPayment { get; set; }
        [InverseProperty(nameof(ApplicationChangeHistory.Application))]
        public virtual ICollection<ApplicationChangeHistory> ApplicationChangeHistories { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Application))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(ApplicationFile.Record))]
        public virtual ICollection<ApplicationFile> ApplicationFiles { get; set; }
        [InverseProperty(nameof(ApplicationRegiXcheck.Application))]
        public virtual ICollection<ApplicationRegiXcheck> ApplicationRegiXchecks { get; set; }
        [InverseProperty(nameof(AquacultureFacilityRegister.Application))]
        public virtual ICollection<AquacultureFacilityRegister> AquacultureFacilityRegisters { get; set; }
        [InverseProperty(nameof(BuyerRegister.Application))]
        public virtual ICollection<BuyerRegister> BuyerRegisters { get; set; }
        [InverseProperty(nameof(CapacityChangeHistory.Application))]
        public virtual ICollection<CapacityChangeHistory> CapacityChangeHistories { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.Application))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(FishermenRegister.Application))]
        public virtual ICollection<FishermenRegister> FishermenRegisters { get; set; }
        [InverseProperty(nameof(FishingTicket.Application))]
        public virtual ICollection<FishingTicket> FishingTickets { get; set; }
        [InverseProperty(nameof(Legal.Application))]
        public virtual ICollection<Legal> Legals { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.Application))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.Application))]
        public virtual ICollection<PermitRegister> PermitRegisters { get; set; }
        [InverseProperty(nameof(ScientificPermitRegister.Application))]
        public virtual ICollection<ScientificPermitRegister> ScientificPermitRegisters { get; set; }
        [InverseProperty(nameof(ShipRegister.Application))]
        public virtual ICollection<ShipRegister> ShipRegisters { get; set; }
        [InverseProperty(nameof(StatisticalFormsRegister.Application))]
        public virtual ICollection<StatisticalFormsRegister> StatisticalFormsRegisters { get; set; }
    }
}