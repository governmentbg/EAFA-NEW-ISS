// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Разрешителни за стопански риболов
    /// </summary>
    [Table("PermitRegister", Schema = "RStRib")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RStRib_PermitRegister_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_PermitRegister_Applications")]
    [Index(nameof(QualifiedFisherId), Name = "IXFK_PermitRegister_FishermenRegister")]
    [Index(nameof(PoundNetGroundsForUseId), Name = "IXFK_PermitRegister_HolderGroundsForUsePoundNet")]
    [Index(nameof(ShipGroundsForUseId), Name = "IXFK_PermitRegister_HolderGroundsForUseShip")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_PermitRegister_Legals")]
    [Index(nameof(PermitTypeId), Name = "IXFK_PermitRegister_NCommercialFishingPermitTypes")]
    [Index(nameof(WaterTypeId), Name = "IXFK_PermitRegister_NWaterTypes")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_PermitRegister_PermitRegister_02")]
    [Index(nameof(SubmittedForPersonId), Name = "IXFK_PermitRegister_Persons")]
    [Index(nameof(PoundNetId), Name = "IXFK_PermitRegister_PoundNetRegister")]
    [Index(nameof(ShipId), Name = "IXFK_PermitRegister_ShipRegister")]
    public partial class PermitRegister
    {
        public PermitRegister()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            InverseRegisterApplication = new HashSet<PermitRegister>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisterFiles = new HashSet<PermitRegisterFile>();
            PermitRegisterFishes = new HashSet<PermitRegisterFish>();
            PermitRegisterFishingGears = new HashSet<PermitRegisterFishingGear>();
            PermitSuspensionChangeHistories = new HashSet<PermitSuspensionChangeHistory>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип разрешително
        /// </summary>
        [Column("PermitTypeID")]
        public int PermitTypeId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Получател на заявлението - физическо лице
        /// </summary>
        [Column("SubmittedForPersonID")]
        public int? SubmittedForPersonId { get; set; }
        /// <summary>
        /// Получател на заявлението - юридическо лице
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int? SubmittedForLegalId { get; set; }
        /// <summary>
        /// Рибар
        /// </summary>
        [Column("QualifiedFisherID")]
        public int QualifiedFisherId { get; set; }
        /// <summary>
        /// Регистрационен номер генериран по формата на наредбата
        /// </summary>
        [StringLength(50)]
        public string RegistrationNum { get; set; }
        /// <summary>
        /// Флаг, указващ дали правоспособният рибар е същият като получателя на заявлението.
        /// </summary>
        public bool? IsQualifiedFisherSameAsSubmittedFor { get; set; }
        /// <summary>
        /// Кораб
        /// </summary>
        [Column("ShipID")]
        public int ShipId { get; set; }
        /// <summary>
        /// Флаг дали титулярът е собственик на кораба - само за разрешително за далян може да не е собственик
        /// </summary>
        [Required]
        public bool? IsHolderShipOwner { get; set; }
        /// <summary>
        /// Основание на ползване на кораб - когато е разрешително за далян
        /// </summary>
        [Column("ShipGroundsForUseID")]
        public int? ShipGroundsForUseId { get; set; }
        /// <summary>
        /// Водите, в които ще се осъществява риболовът.
        /// </summary>
        [Column("WaterTypeID")]
        public int WaterTypeId { get; set; }
        /// <summary>
        /// Откога е валидно разрешителното.
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? PermitValidFrom { get; set; }
        /// <summary>
        /// Докога е валидно разрешителното.
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? PermitValidTo { get; set; }
        /// <summary>
        /// Флаг дали разрешителното е безрочно, или не.
        /// </summary>
        public bool? IsPermitUnlimited { get; set; }
        /// <summary>
        /// Дата на издаване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? IssueDate { get; set; }
        /// <summary>
        /// Далян, с който ще се извършва стопанския риболов, ако разрешително е със специализиран уред - Далян.
        /// </summary>
        [Column("PoundNetID")]
        public int? PoundNetId { get; set; }
        /// <summary>
        /// Основания за ползване на далян при разрешително за далян.
        /// </summary>
        [Column("PoundNetGroundsForUseID")]
        public int? PoundNetGroundsForUseId { get; set; }
        /// <summary>
        /// Уникален пореден номер на електронен дневник за съответното разрешително 
        /// </summary>
        [Column("ELogBookSequence")]
        public int ElogBookSequence { get; set; }
        public bool IsSuspended { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("PermitRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(PermitTypeId))]
        [InverseProperty(nameof(NcommercialFishingPermitType.PermitRegisters))]
        public virtual NcommercialFishingPermitType PermitType { get; set; }
        [ForeignKey(nameof(PoundNetId))]
        [InverseProperty(nameof(PoundNetRegister.PermitRegisters))]
        public virtual PoundNetRegister PoundNet { get; set; }
        [ForeignKey(nameof(PoundNetGroundsForUseId))]
        [InverseProperty(nameof(HolderGroundsForUse.PermitRegisterPoundNetGroundsForUses))]
        public virtual HolderGroundsForUse PoundNetGroundsForUse { get; set; }
        [ForeignKey(nameof(QualifiedFisherId))]
        [InverseProperty(nameof(FishermenRegister.PermitRegisters))]
        public virtual FishermenRegister QualifiedFisher { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(PermitRegister.InverseRegisterApplication))]
        public virtual PermitRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(ShipId))]
        [InverseProperty(nameof(ShipRegister.PermitRegisters))]
        public virtual ShipRegister Ship { get; set; }
        [ForeignKey(nameof(ShipGroundsForUseId))]
        [InverseProperty(nameof(HolderGroundsForUse.PermitRegisterShipGroundsForUses))]
        public virtual HolderGroundsForUse ShipGroundsForUse { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.PermitRegisters))]
        public virtual Legal SubmittedForLegal { get; set; }
        [ForeignKey(nameof(SubmittedForPersonId))]
        [InverseProperty(nameof(Person.PermitRegisters))]
        public virtual Person SubmittedForPerson { get; set; }
        [ForeignKey(nameof(WaterTypeId))]
        [InverseProperty(nameof(NwaterType.PermitRegisters))]
        public virtual NwaterType WaterType { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Permit))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.Permit))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.RegisterApplication))]
        public virtual ICollection<PermitRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.Permit))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.Permit))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegisterFile.Record))]
        public virtual ICollection<PermitRegisterFile> PermitRegisterFiles { get; set; }
        [InverseProperty(nameof(PermitRegisterFish.PermitRegister))]
        public virtual ICollection<PermitRegisterFish> PermitRegisterFishes { get; set; }
        [InverseProperty(nameof(PermitRegisterFishingGear.Permit))]
        public virtual ICollection<PermitRegisterFishingGear> PermitRegisterFishingGears { get; set; }
        [InverseProperty(nameof(PermitSuspensionChangeHistory.Permit))]
        public virtual ICollection<PermitSuspensionChangeHistory> PermitSuspensionChangeHistories { get; set; }
    }
}