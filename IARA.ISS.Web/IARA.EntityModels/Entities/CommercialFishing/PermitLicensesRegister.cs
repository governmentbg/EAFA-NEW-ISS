// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Удостоверения към разрешителни за стопански риболов
    /// </summary>
    [Table("PermitLicensesRegister", Schema = "RStRib")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RStRib_PermitLicensesRegister_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_PermitLicensesRegister_Applications")]
    [Index(nameof(QualifiedFisherId), Name = "IXFK_PermitLicensesRegister_FishermenRegister")]
    [Index(nameof(ShipGroundsForUseId), Name = "IXFK_PermitLicensesRegister_HolderGroundsForUseShip")]
    [Index(nameof(SubmittedForLegalId), Name = "IXFK_PermitLicensesRegister_Legals")]
    [Index(nameof(PermitLicenseTypeId), Name = "IXFK_PermitLicensesRegister_NCommercialFishingPermitLicenseType")]
    [Index(nameof(WaterTypeId), Name = "IXFK_PermitLicensesRegister_NWaterTypes")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_PermitLicensesRegister_PermitLicensesRegister")]
    [Index(nameof(PermitId), Name = "IXFK_PermitLicensesRegister_PermitRegister")]
    [Index(nameof(SubmittedForPersonId), Name = "IXFK_PermitLicensesRegister_Persons")]
    [Index(nameof(PoundNetId), Name = "IXFK_PermitLicensesRegister_PoundNetRegister")]
    [Index(nameof(ShipId), Name = "IXFK_PermitLicensesRegister_ShipRegister")]
    public partial class PermitLicensesRegister
    {
        public PermitLicensesRegister()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            FishingGearMarks = new HashSet<FishingGearMark>();
            FishingGearRegisters = new HashSet<FishingGearRegister>();
            InspectionPermitLicenses = new HashSet<InspectionPermitLicense>();
            InverseRegisterApplication = new HashSet<PermitLicensesRegister>();
            LogBookPermitLicenses = new HashSet<LogBookPermitLicense>();
            LogBooks = new HashSet<LogBook>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicenseRegisterFishes = new HashSet<PermitLicenseRegisterFish>();
            PermitLicenseRegisterFishingGears = new HashSet<PermitLicenseRegisterFishingGear>();
            PermitLicenseSuspensionChangeHistories = new HashSet<PermitLicenseSuspensionChangeHistory>();
            PermitLicensesRegisterFiles = new HashSet<PermitLicensesRegisterFile>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Разрешително, от което е започнато удостоверението.
        /// </summary>
        [Column("PermitID")]
        public int PermitId { get; set; }
        /// <summary>
        /// Тип удостоверениe за стопански риболов
        /// </summary>
        [Column("PermitLicenseTypeID")]
        public int PermitLicenseTypeId { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Регистрационен номер генериран по формата на наредбата
        /// </summary>
        [StringLength(50)]
        public string RegistrationNum { get; set; }
        /// <summary>
        /// Заявител (титуляр), ако е физическо лице
        /// </summary>
        [Column("SubmittedForPersonID")]
        public int? SubmittedForPersonId { get; set; }
        /// <summary>
        /// Заявител (титуляр), ако е юридическо лице
        /// </summary>
        [Column("SubmittedForLegalID")]
        public int? SubmittedForLegalId { get; set; }
        /// <summary>
        /// Правоспособен рибар (капитан)
        /// </summary>
        [Column("QualifiedFisherID")]
        public int QualifiedFisherId { get; set; }
        /// <summary>
        /// Флаг, указващ дали правоспособният прибар е същият като получателя на удостоверението
        /// </summary>
        public bool? IsQualifiedFisherSameAsSubmittedFor { get; set; }
        /// <summary>
        /// Корабът, с който ще се извършва риболовът
        /// </summary>
        [Column("ShipID")]
        public int ShipId { get; set; }
        /// <summary>
        /// Флаг дали титулярът на заявлението е собственик на кораба. Ако не е, то трябва да бъде попълнено ShipHolderGroundsForUseID
        /// </summary>
        [Required]
        public bool? IsHolderShipOwner { get; set; }
        /// <summary>
        /// Основание за ползване на кораб
        /// </summary>
        [Column("ShipGroundsForUseID")]
        public int? ShipGroundsForUseId { get; set; }
        /// <summary>
        /// Дата на издаване
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? IssueDate { get; set; }
        /// <summary>
        /// Откога е валидно удостоврението
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? PermitLicenseValidFrom { get; set; }
        /// <summary>
        /// Докога е валидно удостоврението
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? PermitLicenseValidTo { get; set; }
        /// <summary>
        /// Водите, в които ще се осъществява риболовът.
        /// </summary>
        [Column("WaterTypeID")]
        public int WaterTypeId { get; set; }
        /// <summary>
        /// Мобилен телефон за информиране на инспекторите на ИАРА преди разтоварване.
        /// </summary>
        [StringLength(50)]
        public string UnloaderPhoneNumber { get; set; }
        /// <summary>
        /// Далянът, с който ще се извършва стопанския риболо, ако той е със специализиран уред Далян.
        /// </summary>
        [Column("PoundNetID")]
        public int? PoundNetId { get; set; }
        public bool IsSuspended { get; set; }
        /// <summary>
        /// Описание на удостоверението (използва се за идентификацията му в СНРК)
        /// </summary>
        [StringLength(500)]
        public string Description { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("PermitLicensesRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(PermitId))]
        [InverseProperty(nameof(PermitRegister.PermitLicensesRegisters))]
        public virtual PermitRegister Permit { get; set; }
        [ForeignKey(nameof(PermitLicenseTypeId))]
        [InverseProperty(nameof(NcommercialFishingPermitLicenseType.PermitLicensesRegisters))]
        public virtual NcommercialFishingPermitLicenseType PermitLicenseType { get; set; }
        [ForeignKey(nameof(PoundNetId))]
        [InverseProperty(nameof(PoundNetRegister.PermitLicensesRegisters))]
        public virtual PoundNetRegister PoundNet { get; set; }
        [ForeignKey(nameof(QualifiedFisherId))]
        [InverseProperty(nameof(FishermenRegister.PermitLicensesRegisters))]
        public virtual FishermenRegister QualifiedFisher { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(PermitLicensesRegister.InverseRegisterApplication))]
        public virtual PermitLicensesRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(ShipId))]
        [InverseProperty(nameof(ShipRegister.PermitLicensesRegisters))]
        public virtual ShipRegister Ship { get; set; }
        [ForeignKey(nameof(ShipGroundsForUseId))]
        [InverseProperty(nameof(HolderGroundsForUse.PermitLicensesRegisters))]
        public virtual HolderGroundsForUse ShipGroundsForUse { get; set; }
        [ForeignKey(nameof(SubmittedForLegalId))]
        [InverseProperty(nameof(Legal.PermitLicensesRegisters))]
        public virtual Legal SubmittedForLegal { get; set; }
        [ForeignKey(nameof(SubmittedForPersonId))]
        [InverseProperty(nameof(Person.PermitLicensesRegisters))]
        public virtual Person SubmittedForPerson { get; set; }
        [ForeignKey(nameof(WaterTypeId))]
        [InverseProperty(nameof(NwaterType.PermitLicensesRegisters))]
        public virtual NwaterType WaterType { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.PermitLicence))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.PermitLicence))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(FishingGearMark.PermitLicense))]
        public virtual ICollection<FishingGearMark> FishingGearMarks { get; set; }
        [InverseProperty(nameof(FishingGearRegister.PermitLicense))]
        public virtual ICollection<FishingGearRegister> FishingGearRegisters { get; set; }
        [InverseProperty(nameof(InspectionPermitLicense.PermitLicense))]
        public virtual ICollection<InspectionPermitLicense> InspectionPermitLicenses { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.RegisterApplication))]
        public virtual ICollection<PermitLicensesRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(LogBookPermitLicense.PermitLicenseRegister))]
        public virtual ICollection<LogBookPermitLicense> LogBookPermitLicenses { get; set; }
        [InverseProperty(nameof(LogBook.CurrentPermitLicense))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.PermitLicense))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicenseRegisterFish.PermitLicenseRegister))]
        public virtual ICollection<PermitLicenseRegisterFish> PermitLicenseRegisterFishes { get; set; }
        [InverseProperty(nameof(PermitLicenseRegisterFishingGear.PermitLicense))]
        public virtual ICollection<PermitLicenseRegisterFishingGear> PermitLicenseRegisterFishingGears { get; set; }
        [InverseProperty(nameof(PermitLicenseSuspensionChangeHistory.PermitLicense))]
        public virtual ICollection<PermitLicenseSuspensionChangeHistory> PermitLicenseSuspensionChangeHistories { get; set; }
        [InverseProperty(nameof(PermitLicensesRegisterFile.Record))]
        public virtual ICollection<PermitLicensesRegisterFile> PermitLicensesRegisterFiles { get; set; }
    }
}