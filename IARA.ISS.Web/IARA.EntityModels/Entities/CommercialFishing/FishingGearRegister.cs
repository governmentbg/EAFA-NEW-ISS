// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър на Риболовни уреди
    /// </summary>
    [Table("FishingGearRegister", Schema = "RStRib")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RStRib_FishingGearRegister_Migration")]
    [Index(nameof(InspectionId), Name = "IXFK_FishingGearRegister_InspectionRegister")]
    [Index(nameof(FishingGearTypeId), Name = "IXFK_FishingGearRegister_NFishingGears")]
    [Index(nameof(PermitLicenseId), Name = "IXFK_FishingGearRegister_PermitLicensesRegister")]
    public partial class FishingGearRegister
    {
        public FishingGearRegister()
        {
            FishingGearMarks = new HashSet<FishingGearMark>();
            FishingGearPingers = new HashSet<FishingGearPinger>();
            InspectedFishingGearInspectedFishingGearNavigations = new HashSet<InspectedFishingGear>();
            InspectedFishingGearRegisteredFishingGears = new HashSet<InspectedFishingGear>();
            PermitLicenseRegisterFishingGears = new HashSet<PermitLicenseRegisterFishingGear>();
            PermitRegisterFishingGears = new HashSet<PermitRegisterFishingGear>();
            ShipLogBookPages = new HashSet<ShipLogBookPage>();
            VesselDaysAtSeas = new HashSet<VesselDaysAtSea>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Риболовен уред
        /// </summary>
        [Column("FishingGearTypeID")]
        public int FishingGearTypeId { get; set; }
        /// <summary>
        /// Удостоверение, към което е свързан уредът
        /// </summary>
        [Column("PermitLicenseID")]
        public int? PermitLicenseId { get; set; }
        /// <summary>
        /// Инспекция, към която е свързан уредът
        /// </summary>
        [Column("InspectionID")]
        public int? InspectionId { get; set; }
        /// <summary>
        /// Брой уреди
        /// </summary>
        public int GearCount { get; set; }
        /// <summary>
        /// Размер на окото
        /// </summary>
        public decimal? NetEyeSize { get; set; }
        /// <summary>
        /// Брой куки
        /// </summary>
        public int? HookCount { get; set; }
        /// <summary>
        /// Дължина
        /// </summary>
        public decimal? Length { get; set; }
        /// <summary>
        /// Височина
        /// </summary>
        public decimal? Height { get; set; }
        /// <summary>
        /// Флаг дали има наличен пингър
        /// </summary>
        public bool? HasPinger { get; set; }
        /// <summary>
        /// Описание
        /// </summary>
        [StringLength(4000)]
        public string Description { get; set; }
        /// <summary>
        /// Дължина на кърпата (м.) - за тип на уреда DLN (далян)
        /// </summary>
        public int? TowelLength { get; set; }
        /// <summary>
        /// Дължина на къщата (м.) - за тип на уреда DLN (далян)
        /// </summary>
        public int? HouseLength { get; set; }
        /// <summary>
        /// Широчина на къщата (м) - за тип на уреда DLN (далян)
        /// </summary>
        public int? HouseWidth { get; set; }
        /// <summary>
        /// Дебелина на кордата
        /// </summary>
        public decimal? CordThickness { get; set; }
        /// <summary>
        /// Брой линии
        /// </summary>
        public int? LineCount { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(FishingGearTypeId))]
        [InverseProperty(nameof(NfishingGear.FishingGearRegisters))]
        public virtual NfishingGear FishingGearType { get; set; }
        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.FishingGearRegisters))]
        public virtual InspectionRegister Inspection { get; set; }
        [ForeignKey(nameof(PermitLicenseId))]
        [InverseProperty(nameof(PermitLicensesRegister.FishingGearRegisters))]
        public virtual PermitLicensesRegister PermitLicense { get; set; }
        [InverseProperty(nameof(FishingGearMark.FishingGear))]
        public virtual ICollection<FishingGearMark> FishingGearMarks { get; set; }
        [InverseProperty(nameof(FishingGearPinger.FishingGear))]
        public virtual ICollection<FishingGearPinger> FishingGearPingers { get; set; }
        [InverseProperty(nameof(InspectedFishingGear.InspectedFishingGearNavigation))]
        public virtual ICollection<InspectedFishingGear> InspectedFishingGearInspectedFishingGearNavigations { get; set; }
        [InverseProperty(nameof(InspectedFishingGear.RegisteredFishingGear))]
        public virtual ICollection<InspectedFishingGear> InspectedFishingGearRegisteredFishingGears { get; set; }
        [InverseProperty(nameof(PermitLicenseRegisterFishingGear.FishingGear))]
        public virtual ICollection<PermitLicenseRegisterFishingGear> PermitLicenseRegisterFishingGears { get; set; }
        [InverseProperty(nameof(PermitRegisterFishingGear.FishingGear))]
        public virtual ICollection<PermitRegisterFishingGear> PermitRegisterFishingGears { get; set; }
        [InverseProperty(nameof(ShipLogBookPage.FishingGearRegister))]
        public virtual ICollection<ShipLogBookPage> ShipLogBookPages { get; set; }
        [InverseProperty(nameof(VesselDaysAtSea.FishingGear))]
        public virtual ICollection<VesselDaysAtSea> VesselDaysAtSeas { get; set; }
    }
}