// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// ИСФ за риболовни кораби
    /// </summary>
    [Table("FishVesselsForms", Schema = "RInfStat")]
    [Index(nameof(FuelTypeId), Name = "IXFK_FishVesselsForms_NFuelTypes")]
    [Index(nameof(GrossTonnageIntervalId), Name = "IXFK_FishVesselsForms_NGrossTonageStatIntervals")]
    [Index(nameof(LengthStatIntervalId), Name = "IXFK_FishVesselsForms_NVesselLengthStatIntervals")]
    [Index(nameof(ShipId), Name = "IXFK_FishVesselsForms_ShipRegister")]
    [Index(nameof(StatisticalFormId), Name = "IXFK_FishVesselsForms_StatisticalFormsRegister")]
    [Index(nameof(StatisticalFormId), Name = "UK_RInfStat_FishVesselsForms", IsUnique = true)]
    public partial class FishVesselsForm
    {
        public FishVesselsForm()
        {
            VesselDaysAtSeas = new HashSet<VesselDaysAtSea>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("StatisticalFormID")]
        public int StatisticalFormId { get; set; }
        /// <summary>
        /// Кораб
        /// </summary>
        [Column("ShipID")]
        public int ShipId { get; set; }
        /// <summary>
        /// Цена на кораба
        /// </summary>
        public decimal ShipPrice { get; set; }
        /// <summary>
        /// Интервал за обща дължина на кораба
        /// </summary>
        [Column("LengthStatIntervalID")]
        public int LengthStatIntervalId { get; set; }
        /// <summary>
        /// Интервал за бруто тегло на кораба
        /// </summary>
        [Column("GrossTonnageIntervalID")]
        public int GrossTonnageIntervalId { get; set; }
        public bool HasEngine { get; set; }
        [Column("FuelTypeID")]
        public int FuelTypeId { get; set; }
        /// <summary>
        /// Разход на гориво (л/час)
        /// </summary>
        public decimal FuelConsumption { get; set; }
        /// <summary>
        /// Дейността се осъществява от (Person/Legal/Association)
        /// </summary>
        [StringLength(50)]
        public string ShipUsedBy { get; set; }
        /// <summary>
        /// Дейността от риболов е основна/допълнителна дейност
        /// </summary>
        public bool IsFishingMainActivity { get; set; }
        /// <summary>
        /// Флаг дали собственика е член на екипажа
        /// </summary>
        public bool IsOwnerCrewMember { get; set; }
        /// <summary>
        /// Описание на член на екипажа (капитан, механик, друго...)
        /// </summary>
        [StringLength(500)]
        public string OwnerCrewMemberPosition { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(FuelTypeId))]
        [InverseProperty(nameof(NfuelType.FishVesselsForms))]
        public virtual NfuelType FuelType { get; set; }
        [ForeignKey(nameof(GrossTonnageIntervalId))]
        [InverseProperty(nameof(NgrossTonageStatInterval.FishVesselsForms))]
        public virtual NgrossTonageStatInterval GrossTonnageInterval { get; set; }
        [ForeignKey(nameof(LengthStatIntervalId))]
        [InverseProperty(nameof(NvesselLengthStatInterval.FishVesselsForms))]
        public virtual NvesselLengthStatInterval LengthStatInterval { get; set; }
        [ForeignKey(nameof(ShipId))]
        [InverseProperty(nameof(ShipRegister.FishVesselsForms))]
        public virtual ShipRegister Ship { get; set; }
        [ForeignKey(nameof(StatisticalFormId))]
        [InverseProperty(nameof(StatisticalFormsRegister.FishVesselsForm))]
        public virtual StatisticalFormsRegister StatisticalForm { get; set; }
        [InverseProperty(nameof(VesselDaysAtSea.VesselForm))]
        public virtual ICollection<VesselDaysAtSea> VesselDaysAtSeas { get; set; }
    }
}