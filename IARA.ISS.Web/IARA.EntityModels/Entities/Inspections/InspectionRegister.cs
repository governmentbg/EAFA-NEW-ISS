// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър проверки и инспекции
    /// </summary>
    [Table("InspectionRegister", Schema = "RInsp")]
    [Index(nameof(DeliveryId), Name = "IXFK_InspectionRegister_ApplicationDelivery")]
    [Index(nameof(TerritoryUnitId), Name = "IXFK_InspectionRegister_NTerritoryUnits")]
    [Index(nameof(CreatedByUserId), Name = "IXFK_InspectionRegister_Users")]
    [Index(nameof(StateId), Name = "IXFK_InspectionsRegister_NInspectionStates")]
    [Index(nameof(InspectionTypeId), Name = "IXFK_InspectionsRegister_NInspectionTypes")]
    [Index(nameof(ReportNum), Name = "UK_RInsp_InspectionsRegister", IsUnique = true)]
    public partial class InspectionRegister
    {
        public InspectionRegister()
        {
            Auanregisters = new HashSet<Auanregister>();
            FishingGearMarks = new HashSet<FishingGearMark>();
            FishingGearRegisters = new HashSet<FishingGearRegister>();
            InspectedFishingGears = new HashSet<InspectedFishingGear>();
            InspectedPeople = new HashSet<InspectedPerson>();
            InspectionCatchMeasures = new HashSet<InspectionCatchMeasure>();
            InspectionChecks = new HashSet<InspectionCheck>();
            InspectionEngines = new HashSet<InspectionEngine>();
            InspectionInspectors = new HashSet<InspectionInspector>();
            InspectionLastPortVisits = new HashSet<InspectionLastPortVisit>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            InspectionObservationTexts = new HashSet<InspectionObservationText>();
            InspectionObservationTools = new HashSet<InspectionObservationTool>();
            InspectionPatrolVehicles = new HashSet<InspectionPatrolVehicle>();
            InspectionPermitLicenses = new HashSet<InspectionPermitLicense>();
            InspectionRegisterFiles = new HashSet<InspectionRegisterFile>();
            InspectionVesselActivities = new HashSet<InspectionVesselActivity>();
            InspectionVessels = new HashSet<InspectionVessel>();
            ShipInspections = new HashSet<ShipInspection>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Номер на доклад от инспекция  &quot;XXX-YYY-ZZZ&quot; X=Териториално звено; Y=Номер на служебна карта на инспектор; Z=Пореден номер на протокол на инспектора (InspectionInspectors.InspectionSeqNum). NULL ако инспекцяита е DRAFT статус.
        /// </summary>
        [StringLength(50)]
        public string ReportNum { get; set; }
        [Column("StateID")]
        public int StateId { get; set; }
        /// <summary>
        /// Вид на инспекцията
        /// </summary>
        [Column("InspectionTypeID")]
        public int InspectionTypeId { get; set; }
        /// <summary>
        /// Дата и час на начало на инспекцията
        /// </summary>
        public DateTime InspectionStart { get; set; }
        /// <summary>
        /// Териториално звено
        /// </summary>
        [Column("TerritoryUnitID")]
        public int? TerritoryUnitId { get; set; }
        /// <summary>
        /// Дата и час на край на инспекцията
        /// </summary>
        public DateTime? InspectionEnd { get; set; }
        /// <summary>
        /// Флаг дали инспекцията е след обаждане на 112
        /// </summary>
        public bool? IsByEmergencySignal { get; set; }
        public bool? HasAdministrativeViolation { get; set; }
        [StringLength(4000)]
        public string InspectorCommentText { get; set; }
        [StringLength(4000)]
        public string ActionsTakenText { get; set; }
        /// <summary>
        /// Създадена от инспектор
        /// </summary>
        [Column("CreatedByUserID")]
        public int CreatedByUserId { get; set; }
        /// <summary>
        /// Draft JSON с описание на инспекцията преди да е подадена окончателно
        /// </summary>
        public string InspectionDraft { get; set; }
        /// <summary>
        /// Данни за връчване на копие от инспекцията на провереното лице
        /// </summary>
        [Column("DeliveryID")]
        public int? DeliveryId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CreatedByUserId))]
        [InverseProperty(nameof(User.InspectionRegisters))]
        public virtual User CreatedByUser { get; set; }
        [ForeignKey(nameof(DeliveryId))]
        [InverseProperty(nameof(ApplicationDelivery.InspectionRegisters))]
        public virtual ApplicationDelivery Delivery { get; set; }
        [ForeignKey(nameof(InspectionTypeId))]
        [InverseProperty(nameof(NinspectionType.InspectionRegisters))]
        public virtual NinspectionType InspectionType { get; set; }
        [ForeignKey(nameof(StateId))]
        [InverseProperty(nameof(NinspectionState.InspectionRegisters))]
        public virtual NinspectionState State { get; set; }
        [ForeignKey(nameof(TerritoryUnitId))]
        [InverseProperty(nameof(NterritoryUnit.InspectionRegisters))]
        public virtual NterritoryUnit TerritoryUnit { get; set; }
        [InverseProperty("Inspection")]
        public virtual AquacultureInspection AquacultureInspection { get; set; }
        [InverseProperty("Inspection")]
        public virtual ConstativeProtocolInspection ConstativeProtocolInspection { get; set; }
        [InverseProperty("Inspection")]
        public virtual FirstSaleInspection FirstSaleInspection { get; set; }
        [InverseProperty("Inspection")]
        public virtual FishermanInspection FishermanInspection { get; set; }
        [InverseProperty("Inspection")]
        public virtual FishingGearCheck FishingGearCheck { get; set; }
        [InverseProperty("Inspection")]
        public virtual ObservationAtSea ObservationAtSea { get; set; }
        [InverseProperty("Inspection")]
        public virtual TransportVehicleInspection TransportVehicleInspection { get; set; }
        [InverseProperty("Inspection")]
        public virtual WaterObjectCheck WaterObjectCheck { get; set; }
        [InverseProperty(nameof(Auanregister.Inspection))]
        public virtual ICollection<Auanregister> Auanregisters { get; set; }
        [InverseProperty(nameof(FishingGearMark.Inspection))]
        public virtual ICollection<FishingGearMark> FishingGearMarks { get; set; }
        [InverseProperty(nameof(FishingGearRegister.Inspection))]
        public virtual ICollection<FishingGearRegister> FishingGearRegisters { get; set; }
        [InverseProperty(nameof(InspectedFishingGear.Inspection))]
        public virtual ICollection<InspectedFishingGear> InspectedFishingGears { get; set; }
        [InverseProperty(nameof(InspectedPerson.Inspection))]
        public virtual ICollection<InspectedPerson> InspectedPeople { get; set; }
        [InverseProperty(nameof(InspectionCatchMeasure.Inspection))]
        public virtual ICollection<InspectionCatchMeasure> InspectionCatchMeasures { get; set; }
        [InverseProperty(nameof(InspectionCheck.Inspection))]
        public virtual ICollection<InspectionCheck> InspectionChecks { get; set; }
        [InverseProperty(nameof(InspectionEngine.Inspection))]
        public virtual ICollection<InspectionEngine> InspectionEngines { get; set; }
        [InverseProperty(nameof(InspectionInspector.Inspection))]
        public virtual ICollection<InspectionInspector> InspectionInspectors { get; set; }
        [InverseProperty(nameof(InspectionLastPortVisit.Inspection))]
        public virtual ICollection<InspectionLastPortVisit> InspectionLastPortVisits { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.Inspection))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(InspectionObservationText.Inspection))]
        public virtual ICollection<InspectionObservationText> InspectionObservationTexts { get; set; }
        [InverseProperty(nameof(InspectionObservationTool.Inspection))]
        public virtual ICollection<InspectionObservationTool> InspectionObservationTools { get; set; }
        [InverseProperty(nameof(InspectionPatrolVehicle.Inspection))]
        public virtual ICollection<InspectionPatrolVehicle> InspectionPatrolVehicles { get; set; }
        [InverseProperty(nameof(InspectionPermitLicense.Inspection))]
        public virtual ICollection<InspectionPermitLicense> InspectionPermitLicenses { get; set; }
        [InverseProperty(nameof(InspectionRegisterFile.Record))]
        public virtual ICollection<InspectionRegisterFile> InspectionRegisterFiles { get; set; }
        [InverseProperty(nameof(InspectionVesselActivity.Inspection))]
        public virtual ICollection<InspectionVesselActivity> InspectionVesselActivities { get; set; }
        [InverseProperty(nameof(InspectionVessel.Inspection))]
        public virtual ICollection<InspectionVessel> InspectionVessels { get; set; }
        [InverseProperty(nameof(ShipInspection.Inspection))]
        public virtual ICollection<ShipInspection> ShipInspections { get; set; }
    }
}