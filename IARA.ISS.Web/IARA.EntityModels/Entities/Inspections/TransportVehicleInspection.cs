// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Инспекции на транспортно средство
    /// </summary>
    [Table("TransportVehicleInspections", Schema = "RInsp")]
    [Index(nameof(CountryId), Name = "IXFK_TransportVehicleInspections_NCountries")]
    [Index(nameof(SealInstitutionId), Name = "IXFK_TransportVehicleInspections_NInstitutions")]
    [Index(nameof(VehicleTypeId), Name = "IXFK_TransportVehicleInspections_NTransportVehicleTypes")]
    public partial class TransportVehicleInspection
    {         public TransportVehicleInspection()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Инспекция
        /// </summary>
        [Key]
        [Column("InspectionID")]
        public int InspectionId { get; set; }
        /// <summary>
        /// Вид превозно средство
        /// </summary>
        [Column("VehicleTypeID")]
        public int? VehicleTypeId { get; set; }
        /// <summary>
        /// Националност
        /// </summary>
        [Column("CountryID")]
        public int? CountryId { get; set; }
        /// <summary>
        /// Марка на транспортното средство
        /// </summary>
        [StringLength(50)]
        public string TractorBrand { get; set; }
        /// <summary>
        /// Модел на транспортното средство
        /// </summary>
        [StringLength(50)]
        public string TractorModel { get; set; }
        /// <summary>
        /// Регистрационен номер на влекач / камион
        /// </summary>
        [StringLength(20)]
        public string TractorLicensePlateNum { get; set; }
        /// <summary>
        /// Регистрационен номер на ремарке
        /// </summary>
        [StringLength(20)]
        public string TrailerLicensePlateNum { get; set; }
        /// <summary>
        /// Пломбирано транспортно средство
        /// </summary>
        public bool? IsSealedVehicle { get; set; }
        /// <summary>
        /// Орган, поставил пломбите
        /// </summary>
        [Column("SealInstitutionID")]
        public int? SealInstitutionId { get; set; }
        /// <summary>
        /// Състояние на пломбите
        /// </summary>
        [StringLength(500)]
        public string SealCondition { get; set; }
        /// <summary>
        /// Локация на инспекцията - описание
        /// </summary>
        [StringLength(500)]
        public string InspectionLocation { get; set; }
        /// <summary>
        /// Локация на инспекцията - координати
        /// </summary>
        [Column(TypeName = "geometry(Point)")]
        public Point InpectionLocationCoordinates { get; set; }
        [StringLength(500)]
        public string TransportDestination { get; set; }
        /// <summary>
        /// Коментар на превозвач
        /// </summary>
        [StringLength(4000)]
        public string TransporterComment { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CountryId))]
        [InverseProperty(nameof(Ncountry.TransportVehicleInspections))]
        public virtual Ncountry Country { get; set; }
        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.TransportVehicleInspection))]
        public virtual InspectionRegister Inspection { get; set; }
        [ForeignKey(nameof(SealInstitutionId))]
        [InverseProperty(nameof(Ninstitution.TransportVehicleInspections))]
        public virtual Ninstitution SealInstitution { get; set; }
        [ForeignKey(nameof(VehicleTypeId))]
        [InverseProperty(nameof(NtransportVehicleType.TransportVehicleInspections))]
        public virtual NtransportVehicleType VehicleType { get; set; }
    }
}
