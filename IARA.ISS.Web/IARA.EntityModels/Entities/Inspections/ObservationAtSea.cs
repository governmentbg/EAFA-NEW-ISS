// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Наблюдение на кораб в открито море
    /// </summary>
    [Table("ObservationAtSea", Schema = "RInsp")]
    [Index(nameof(InspectionId), Name = "IXFK_ObservationAtSea_InspectionsRegister")]
    [Index(nameof(ObservedShipCatchZoneId), Name = "IXFK_ObservationAtSea_NCatchZones")]
    [Index(nameof(ObservedShipId), Name = "IXFK_ObservationAtSea_ShipRegister_ObserveD")]
    [Index(nameof(ObservedUnregisteredShipId), Name = "IXFK_ObservationAtSea_UnregisteredVessels_ObserveD")]
    public partial class ObservationAtSea
    {         public ObservationAtSea()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Инспекция
        /// </summary>
        [Key]
        [Column("InspectionID")]
        public int InspectionId { get; set; }
        /// <summary>
        /// Кораб на наблюдаван (регистриран)
        /// </summary>
        [Column("ObservedShipID")]
        public int? ObservedShipId { get; set; }
        /// <summary>
        /// Кораб на наблюдаван (НЕрегистриран)
        /// </summary>
        [Column("ObservedUnregisteredShipID")]
        public int? ObservedUnregisteredShipId { get; set; }
        /// <summary>
        /// Координати на наблюдаван
        /// </summary>
        [Column(TypeName = "geometry(Point)")]
        public Point ObservedShipCoordinates { get; set; }
        /// <summary>
        /// Местоположение на наблюдаван кораб - свободен текст
        /// </summary>
        [StringLength(500)]
        public string ObservedShipLocation { get; set; }
        /// <summary>
        /// Зона на улов на наблюдаван кораб
        /// </summary>
        [Column("ObservedShipCatchZoneID")]
        public int? ObservedShipCatchZoneId { get; set; }
        /// <summary>
        /// Посока N/NE/E, etc. 
        /// </summary>
        [StringLength(20)]
        public string Direction { get; set; }
        /// <summary>
        /// Скорост във възли
        /// </summary>
        public decimal? Speed { get; set; }
        /// <summary>
        /// Флаг дали има контакт с кораба
        /// </summary>
        public bool? HasShipContact { get; set; }
        /// <summary>
        /// Флаг дали има комуникация с кораба
        /// </summary>
        public bool? HasShipCommunication { get; set; }
        /// <summary>
        /// Описание на комуникацията с кораба
        /// </summary>
        [StringLength(4000)]
        public string ShipCommunicationDescr { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.ObservationAtSea))]
        public virtual InspectionRegister Inspection { get; set; }
        [ForeignKey(nameof(ObservedShipId))]
        [InverseProperty(nameof(ShipRegister.ObservationAtSeas))]
        public virtual ShipRegister ObservedShip { get; set; }
        [ForeignKey(nameof(ObservedShipCatchZoneId))]
        [InverseProperty(nameof(NcatchZone.ObservationAtSeas))]
        public virtual NcatchZone ObservedShipCatchZone { get; set; }
        [ForeignKey(nameof(ObservedUnregisteredShipId))]
        [InverseProperty(nameof(UnregisteredVessel.ObservationAtSeas))]
        public virtual UnregisteredVessel ObservedUnregisteredShip { get; set; }
    }
}
