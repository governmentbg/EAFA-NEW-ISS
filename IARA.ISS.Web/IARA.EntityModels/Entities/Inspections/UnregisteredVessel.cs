// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Нерегистрирани кораби в системата
    /// </summary>
    [Table("UnregisteredVessels", Schema = "RInsp")]
    [Index(nameof(FlagCountryId), Name = "IXFK_UnregisteredVessels_NCountries")]
    [Index(nameof(InstitutionId), Name = "IXFK_UnregisteredVessels_NInstitutions")]
    [Index(nameof(PatrolVehicleTypeId), Name = "IXFK_UnregisteredVessels_NPatrolVehicleTypes")]
    [Index(nameof(VesselTypeId), Name = "IXFK_UnregisteredVessels_NVesselTypes")]
    public partial class UnregisteredVessel
    {
        public UnregisteredVessel()
        {
            FishingGearChecks = new HashSet<FishingGearCheck>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            InspectionPatrolVehicles = new HashSet<InspectionPatrolVehicle>();
            ObservationAtSeas = new HashSet<ObservationAtSea>();
            ShipInspections = new HashSet<ShipInspection>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Флаг
        /// </summary>
        [Column("FlagCountryID")]
        public int? FlagCountryId { get; set; }
        /// <summary>
        /// Външна маркировка
        /// </summary>
        [StringLength(50)]
        public string ExternalMark { get; set; }
        /// <summary>
        /// Тип патрулно средство
        /// </summary>
        [Column("PatrolVehicleTypeID")]
        public int? PatrolVehicleTypeId { get; set; }
        /// <summary>
        /// Институция
        /// </summary>
        [Column("InstitutionID")]
        public int? InstitutionId { get; set; }
        /// <summary>
        /// UVI / IMO номер
        /// </summary>
        [Column("UVI")]
        [StringLength(20)]
        public string Uvi { get; set; }
        /// <summary>
        /// CFR
        /// </summary>
        [Column("CFR")]
        [StringLength(20)]
        public string Cfr { get; set; }
        /// <summary>
        /// IRCS Позивна
        /// </summary>
        [Column("IRCSCallSign")]
        [StringLength(50)]
        public string IrcscallSign { get; set; }
        /// <summary>
        /// MMSI
        /// </summary>
        [Column("MMSI")]
        [StringLength(20)]
        public string Mmsi { get; set; }
        /// <summary>
        /// Тип кораб
        /// </summary>
        [Column("VesselTypeID")]
        public int? VesselTypeId { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(FlagCountryId))]
        [InverseProperty(nameof(Ncountry.UnregisteredVessels))]
        public virtual Ncountry FlagCountry { get; set; }
        [ForeignKey(nameof(InstitutionId))]
        [InverseProperty(nameof(Ninstitution.UnregisteredVessels))]
        public virtual Ninstitution Institution { get; set; }
        [ForeignKey(nameof(PatrolVehicleTypeId))]
        [InverseProperty(nameof(NpatrolVehicleType.UnregisteredVessels))]
        public virtual NpatrolVehicleType PatrolVehicleType { get; set; }
        [ForeignKey(nameof(VesselTypeId))]
        [InverseProperty(nameof(NvesselType.UnregisteredVessels))]
        public virtual NvesselType VesselType { get; set; }
        [InverseProperty(nameof(FishingGearCheck.UnregisteredShip))]
        public virtual ICollection<FishingGearCheck> FishingGearChecks { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.UnregisteredShip))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(InspectionPatrolVehicle.PatrolUnregisteredVessel))]
        public virtual ICollection<InspectionPatrolVehicle> InspectionPatrolVehicles { get; set; }
        [InverseProperty(nameof(ObservationAtSea.ObservedUnregisteredShip))]
        public virtual ICollection<ObservationAtSea> ObservationAtSeas { get; set; }
        [InverseProperty(nameof(ShipInspection.InspectedUnregisteredShip))]
        public virtual ICollection<ShipInspection> ShipInspections { get; set; }
    }
}