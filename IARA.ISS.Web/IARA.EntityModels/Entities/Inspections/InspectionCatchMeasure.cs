// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Измерен улов от всеки тип риба
    /// </summary>
    [Table("InspectionCatchMeasures", Schema = "RInsp")]
    [Index(nameof(InspectedLogBookPageId), Name = "IXFK_InspectionCatchMeasures_InspectionLogBookPages")]
    [Index(nameof(CatchInspectionTypeId), Name = "IXFK_InspectionCatchMeasures_NCatchInspectionTypes")]
    [Index(nameof(CatchZoneId), Name = "IXFK_InspectionCatchMeasures_NCatchZones")]
    [Index(nameof(PresentationId), Name = "IXFK_InspectionCatchMeasures_NFishPresentations")]
    [Index(nameof(FishSexId), Name = "IXFK_InspectionCatchMeasures_NFishSex")]
    [Index(nameof(FishId), Name = "IXFK_InspectionCatchMeasures_NFishes")]
    [Index(nameof(InspectionId), nameof(InspectedShipType), nameof(CatchInspectionTypeId), nameof(FishId), nameof(CatchZoneId), Name = "UK_RInsp_InspectionCatchMeasures", IsUnique = true)]
    public partial class InspectionCatchMeasure
    {         public InspectionCatchMeasure()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Инспекция
        /// </summary>
        [Column("InspectionID")]
        public int InspectionId { get; set; }
        /// <summary>
        /// Вид риба
        /// </summary>
        [Column("FishID")]
        public int? FishId { get; set; }
        /// <summary>
        /// Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )
        /// </summary>
        [StringLength(20)]
        public string InspectedShipType { get; set; }
        /// <summary>
        /// Вид отчет на улов (Стандартен улов, Маломерна риба и Изхвърляне)
        /// </summary>
        [Column("CatchInspectionTypeID")]
        public int? CatchInspectionTypeId { get; set; }
        /// <summary>
        /// Уловено количество
        /// </summary>
        public decimal? CatchQuantity { get; set; }
        /// <summary>
        /// Количество Брой
        /// </summary>
        public int? CatchCount { get; set; }
        /// <summary>
        /// Разтоварено количество
        /// </summary>
        public decimal? UnloadedQuantity { get; set; }
        /// <summary>
        /// Зона на улов
        /// </summary>
        [Column("CatchZoneID")]
        public int? CatchZoneId { get; set; }
        /// <summary>
        /// Допустимо отклонение
        /// </summary>
        public decimal? AllowedDeviation { get; set; }
        /// <summary>
        /// Среден размер
        /// </summary>
        public decimal? AverageSize { get; set; }
        /// <summary>
        /// Представяне
        /// </summary>
        [Column("PresentationID")]
        public int? PresentationId { get; set; }
        /// <summary>
        /// Пол на рибата
        /// </summary>
        [Column("FishSexID")]
        public int? FishSexId { get; set; }
        /// <summary>
        /// Данни за обвързана декларация/документ
        /// </summary>
        [Column("InspectedLogBookPageID")]
        public int? InspectedLogBookPageId { get; set; }
        /// <summary>
        /// Флаг дали е иззет
        /// </summary>
        public bool? IsTaken { get; set; }
        /// <summary>
        /// Флаг дали е съхранен
        /// </summary>
        public bool? IsStored { get; set; }
        /// <summary>
        /// Място на съхранение
        /// </summary>
        [StringLength(500)]
        public string StorageLocation { get; set; }
        /// <summary>
        /// Флаг дали е дарена
        /// </summary>
        public bool? IsDonated { get; set; }
        /// <summary>
        /// Място на дарение
        /// </summary>
        [StringLength(500)]
        public string DonationLocation { get; set; }
        /// <summary>
        /// Флаг дали е унищожена
        /// </summary>
        public bool? IsDestroyed { get; set; }
        /// <summary>
        /// Място на унищожаване
        /// </summary>
        [StringLength(500)]
        public string DestroyLocation { get; set; }
        /// <summary>
        /// Документ за унищожаване
        /// </summary>
        [StringLength(50)]
        public string DestroyDocumentNum { get; set; }
        /// <summary>
        /// Коментар за измерен улов (бр каси и др.)
        /// </summary>
        [StringLength(500)]
        public string MeasureComments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(CatchInspectionTypeId))]
        [InverseProperty(nameof(NcatchInspectionType.InspectionCatchMeasures))]
        public virtual NcatchInspectionType CatchInspectionType { get; set; }
        [ForeignKey(nameof(CatchZoneId))]
        [InverseProperty(nameof(NcatchZone.InspectionCatchMeasures))]
        public virtual NcatchZone CatchZone { get; set; }
        [ForeignKey(nameof(FishId))]
        [InverseProperty(nameof(Nfish.InspectionCatchMeasures))]
        public virtual Nfish Fish { get; set; }
        [ForeignKey(nameof(FishSexId))]
        [InverseProperty(nameof(NfishSex.InspectionCatchMeasures))]
        public virtual NfishSex FishSex { get; set; }
        [ForeignKey(nameof(InspectedLogBookPageId))]
        [InverseProperty(nameof(InspectionLogBookPage.InspectionCatchMeasures))]
        public virtual InspectionLogBookPage InspectedLogBookPage { get; set; }
        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.InspectionCatchMeasures))]
        public virtual InspectionRegister Inspection { get; set; }
        [ForeignKey(nameof(PresentationId))]
        [InverseProperty(nameof(NfishPresentation.InspectionCatchMeasures))]
        public virtual NfishPresentation Presentation { get; set; }
    }
}
