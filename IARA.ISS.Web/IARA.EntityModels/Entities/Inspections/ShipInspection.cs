// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Инспекции на риболовен кораб в открито море, на пристанище или при трансбордиране
    /// </summary>
    [Table("ShipInspections", Schema = "RInsp")]
    [Index(nameof(InspectedShipCatchZoneId), Name = "IXFK_ShipInspections_NCatchZones")]
    [Index(nameof(InspectiedShipId), Name = "IXFK_ShipInspections_ShipRegister_InspecteDShip")]
    [Index(nameof(InspectedUnregisteredShipId), Name = "IXFK_ShipInspectionsa_UnregisteredVessels")]
    [Index(nameof(InspectionId), nameof(InspectedShipType), Name = "UK_RInsp_ShipInspections", IsUnique = true)]
    public partial class ShipInspection
    {         public ShipInspection()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Инспекция
        /// </summary>
        [Column("InspectionID")]
        public int InspectionId { get; set; }
        /// <summary>
        /// Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )
        /// </summary>
        [Required]
        [StringLength(20)]
        public string InspectedShipType { get; set; }
        /// <summary>
        /// Координати на инспектиращ кораб
        /// </summary>
        [Column("InspectiedShipID")]
        public int? InspectiedShipId { get; set; }
        /// <summary>
        /// Координати на наблюдаван
        /// </summary>
        [Column(TypeName = "geometry(Point)")]
        public Point InspectedShipCoordinates { get; set; }
        /// <summary>
        /// Зона за улов на инспектиран кораб
        /// </summary>
        [Column("InspectedShipCatchZoneID")]
        public int? InspectedShipCatchZoneId { get; set; }
        /// <summary>
        /// Описание в свободен текст - местоположение на инспектиран кораб
        /// </summary>
        [StringLength(500)]
        public string InspectedShipLocation { get; set; }
        /// <summary>
        /// Кораб на инспектиращ (НЕрегистриран) -&gt; UnregisteredVessel
        /// </summary>
        [Column("InspectedUnregisteredShipID")]
        public int? InspectedUnregisteredShipId { get; set; }
        /// <summary>
        /// Номер на предварително уведомление
        /// </summary>
        [StringLength(50)]
        public string PreliminaryNoticeNumber { get; set; }
        /// <summary>
        /// Цел на уведомлението
        /// </summary>
        [StringLength(500)]
        public string PreliminaryNoticePurpose { get; set; }
        /// <summary>
        /// Статус на РК в зоните за РУОР/списъците за ННН риболов
        /// </summary>
        [Column("NNNShipStatus")]
        [StringLength(4000)]
        public string NnnshipStatus { get; set; }
        /// <summary>
        /// Коментар на капитан
        /// </summary>
        [StringLength(4000)]
        public string CaptainComment { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(InspectedShipCatchZoneId))]
        [InverseProperty(nameof(NcatchZone.ShipInspections))]
        public virtual NcatchZone InspectedShipCatchZone { get; set; }
        [ForeignKey(nameof(InspectedUnregisteredShipId))]
        [InverseProperty(nameof(UnregisteredVessel.ShipInspections))]
        public virtual UnregisteredVessel InspectedUnregisteredShip { get; set; }
        [ForeignKey(nameof(InspectiedShipId))]
        [InverseProperty(nameof(ShipRegister.ShipInspections))]
        public virtual ShipRegister InspectiedShip { get; set; }
        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.ShipInspections))]
        public virtual InspectionRegister Inspection { get; set; }
    }
}
