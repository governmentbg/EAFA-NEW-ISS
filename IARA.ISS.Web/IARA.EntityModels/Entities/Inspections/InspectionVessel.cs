// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Проверени плавателни средства (за Проверка на воден обект без инспекция)
    /// </summary>
    [Table("InspectionVessels", Schema = "RInsp")]
    [Index(nameof(InspectionId), Name = "IXFK_InspectionVessels_InspectionRegister")]
    [Index(nameof(VesselTypeId), Name = "IXFK_InspectionVessels_NVesselTypes")]
    public partial class InspectionVessel
    {         public InspectionVessel()
        {
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Инспекция
        /// </summary>
        [Column("InspectionID")]
        public int InspectionId { get; set; }
        [Column("VesselTypeID")]
        public int? VesselTypeId { get; set; }
        /// <summary>
        /// Общ брой
        /// </summary>
        public int? TotalCount { get; set; }
        /// <summary>
        /// Идентификационен номер
        /// </summary>
        [StringLength(50)]
        public string Number { get; set; }
        /// <summary>
        /// Дължина
        /// </summary>
        public decimal? Length { get; set; }
        /// <summary>
        /// Ширина
        /// </summary>
        public decimal? Width { get; set; }
        /// <summary>
        /// Цвят
        /// </summary>
        [StringLength(50)]
        public string Color { get; set; }
        /// <summary>
        /// Флаг дали е иззет
        /// </summary>
        public bool? IsTaken { get; set; }
        /// <summary>
        /// Флаг дали е съхранен
        /// </summary>
        public bool? IsStored { get; set; }
        /// <summary>
        /// Място на съхранение
        /// </summary>
        [StringLength(500)]
        public string StorageLocation { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(InspectionId))]
        [InverseProperty(nameof(InspectionRegister.InspectionVessels))]
        public virtual InspectionRegister Inspection { get; set; }
        [ForeignKey(nameof(VesselTypeId))]
        [InverseProperty(nameof(NvesselType.InspectionVessels))]
        public virtual NvesselType VesselType { get; set; }
    }
}
