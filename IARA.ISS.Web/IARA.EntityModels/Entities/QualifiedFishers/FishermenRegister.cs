// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър правоспособни рибари
    /// </summary>
    [Table("FishermenRegister", Schema = "RPravRib")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RPravRib_FishermenRegister_Migration")]
    [Index(nameof(ApplicationId), Name = "IXFK_FishermenRegister_Applications")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_FishermenRegister_FishermenRegister")]
    [Index(nameof(ExamTerritoryUnitId), Name = "IXFK_FishermenRegister_NTerritoryUnits")]
    [Index(nameof(PersonId), Name = "IXFK_RPravRib_FishermenRegister_ISS_Persons")]
    [Index(nameof(RegistrationNum), Name = "UK_RPravRib_FishermenRegister", IsUnique = true)]
    public partial class FishermenRegister
    {
        public FishermenRegister()
        {
            DuplicatesRegisters = new HashSet<DuplicatesRegister>();
            FishermenRegisterFiles = new HashSet<FishermenRegisterFile>();
            InspectedPeople = new HashSet<InspectedPerson>();
            InverseRegisterApplication = new HashSet<FishermenRegister>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisters = new HashSet<PermitRegister>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int? ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// флаг дали правоспособният рибар е създаден служебно, заради наличие на морско образование
        /// </summary>
        public bool IsWithMaritimeEducation { get; set; }
        /// <summary>
        /// Дата на регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? RegistrationDate { get; set; }
        /// <summary>
        /// Номер на свидетелство (при регистров запис)
        /// </summary>
        [StringLength(50)]
        public string RegistrationNum { get; set; }
        /// <summary>
        /// Правоспособен рибар - физическо лице 
        /// </summary>
        [Column("PersonID")]
        public int PersonId { get; set; }
        /// <summary>
        /// Флаг дали лицето е приминало успешно изпит за правоспосбност или притежава диплома от морско училище/университет
        /// </summary>
        public bool HasExamLicense { get; set; }
        /// <summary>
        /// Флаг дали е минал изпита в ИАРА за правоспособност - в случай че минава през заявление, т.е. има изпит
        /// </summary>
        public bool? HasPassedExam { get; set; }
        /// <summary>
        /// Дата на изпит
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ExamDate { get; set; }
        /// <summary>
        /// Номер на протокол от изпит
        /// </summary>
        [StringLength(50)]
        public string ExamProtocolNum { get; set; }
        /// <summary>
        /// Град (териториална единица) на провеждане на изпита
        /// </summary>
        [Column("ExamTerritoryUnitID")]
        public int? ExamTerritoryUnitId { get; set; }
        /// <summary>
        /// Номер на диплома в училище/университет
        /// </summary>
        [StringLength(50)]
        public string DiplomaNum { get; set; }
        /// <summary>
        /// Дата на завършване в училище/университет
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? DiplomaGraduationDate { get; set; }
        /// <summary>
        /// Издател на диплома
        /// </summary>
        [StringLength(200)]
        public string DiplomaIssuer { get; set; }
        /// <summary>
        /// Коментари и бележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("FishermenRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(ExamTerritoryUnitId))]
        [InverseProperty(nameof(NterritoryUnit.FishermenRegisters))]
        public virtual NterritoryUnit ExamTerritoryUnit { get; set; }
        [ForeignKey(nameof(PersonId))]
        [InverseProperty("FishermenRegisters")]
        public virtual Person Person { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(FishermenRegister.InverseRegisterApplication))]
        public virtual FishermenRegister RegisterApplication { get; set; }
        [InverseProperty(nameof(DuplicatesRegister.Fisherman))]
        public virtual ICollection<DuplicatesRegister> DuplicatesRegisters { get; set; }
        [InverseProperty(nameof(FishermenRegisterFile.Record))]
        public virtual ICollection<FishermenRegisterFile> FishermenRegisterFiles { get; set; }
        [InverseProperty(nameof(InspectedPerson.CaptainFishermen))]
        public virtual ICollection<InspectedPerson> InspectedPeople { get; set; }
        [InverseProperty(nameof(FishermenRegister.RegisterApplication))]
        public virtual ICollection<FishermenRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.QualifiedFisher))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.QualifiedFisher))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.QualifiedFisher))]
        public virtual ICollection<PermitRegister> PermitRegisters { get; set; }
    }
}