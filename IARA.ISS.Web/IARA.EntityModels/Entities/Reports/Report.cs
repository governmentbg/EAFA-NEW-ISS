// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Справки във вид на SQL заявки
    /// </summary>
    [Table("Reports", Schema = "Rep")]
    [Index(nameof(LastRunUserId), Name = "IXFK_Rep_QueryReports_UsrMgmt_Users")]
    [Index(nameof(ReportGroupId), Name = "IXFK_Reports_ReportGroups")]
    [Index(nameof(ReportGroupId), nameof(Code), Name = "UK_Rep_Reports", IsUnique = true)]
    public partial class Report
    {
        public Report()
        {
            ReportParameters = new HashSet<ReportParameter>();
            ReportRolePermissions = new HashSet<ReportRolePermission>();
            ReportUserPermissions = new HashSet<ReportUserPermission>();
            this.IsActive = true;
        }


        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Тип репорт (SQL / Jasper / Check)
        /// </summary>
        [Required]
        [StringLength(20)]
        public string ReportType { get; set; }
        [Column("ReportGroupID")]
        public int ReportGroupId { get; set; }
        /// <summary>
        /// Код
        /// </summary>
        [Required]
        [StringLength(200)]
        public string Code { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Цел на проверката
        /// </summary>
        [StringLength(1000)]
        public string Description { get; set; }
        /// <summary>
        /// Пореден номер на справката
        /// </summary>
        public short? OrderNum { get; set; }
        /// <summary>
        /// Име на икона в потребителския интерфейс
        /// </summary>
        [StringLength(50)]
        public string IconName { get; set; }
        /// <summary>
        /// XML на заявката за проверка
        /// </summary>
        [Column("ReportSQL")]
        public string ReportSql { get; set; }
        /// <summary>
        /// Дата и час на последно изпълнение
        /// </summary>
        public DateTime? LastRunDateTime { get; set; }
        /// <summary>
        /// Потребител, последно изпълнил справката
        /// </summary>
        [Column("LastRunUserID")]
        public int? LastRunUserId { get; set; }
        /// <summary>
        /// Продължителност на последно изпълнение в секунди
        /// </summary>
        public int? LastRunDurationSec { get; set; }
        /// <summary>
        /// Флаг дали записът е активен или изтрит
        /// </summary>
        [Required]
        public bool IsActive { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(LastRunUserId))]
        [InverseProperty(nameof(User.Reports))]
        public virtual User LastRunUser { get; set; }
        [ForeignKey(nameof(ReportGroupId))]
        [InverseProperty("Reports")]
        public virtual ReportGroup ReportGroup { get; set; }
        [InverseProperty("Report")]
        public virtual CrossCheck CrossCheck { get; set; }
        [InverseProperty(nameof(ReportParameter.Report))]
        public virtual ICollection<ReportParameter> ReportParameters { get; set; }
        [InverseProperty(nameof(ReportRolePermission.Report))]
        public virtual ICollection<ReportRolePermission> ReportRolePermissions { get; set; }
        [InverseProperty(nameof(ReportUserPermission.Report))]
        public virtual ICollection<ReportUserPermission> ReportUserPermissions { get; set; }
    }
}