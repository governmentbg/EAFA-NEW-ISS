// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Регистър риболовни кораби
    /// </summary>
    [Table("ShipRegister", Schema = "RShips")]
    [Index(nameof(CreatedBy), nameof(UpdatedBy), Name = "IDX_RShips_ShipRegister_Migration")]
    [Index(nameof(SailAreaId), Name = "IXFK_RS_ShipRegister_RS_NSailAreas")]
    [Index(nameof(VesselTypeId), Name = "IXFK_RS_ShipRegister_RS_NVesselTypes")]
    [Index(nameof(PortId), Name = "IXFK_RS_ShipRegister_RS_Ports")]
    [Index(nameof(PublicAidTypeId), Name = "IXFK_RS_ShipRegister_RS_PublicHelpCodes")]
    [Index(nameof(ApplicationId), Name = "IXFK_ShipRegister_Applications")]
    [Index(nameof(CancellationDetailsId), Name = "IXFK_ShipRegister_CancellationDetails")]
    [Index(nameof(ExportCountryId), Name = "IXFK_ShipRegister_NCountries_Export")]
    [Index(nameof(FlagCountryId), Name = "IXFK_ShipRegister_NCountries_Flag")]
    [Index(nameof(ImportCountryId), Name = "IXFK_ShipRegister_NCountries_Import")]
    [Index(nameof(MainFishingGearId), Name = "IXFK_ShipRegister_NFishingGears")]
    [Index(nameof(AdditionalFishingGearId), Name = "IXFK_ShipRegister_NFishingGears_Additional")]
    [Index(nameof(FuelTypeId), Name = "IXFK_ShipRegister_NFuelTypes")]
    [Index(nameof(HullMaterialId), Name = "IXFK_ShipRegister_NHullMaterials")]
    [Index(nameof(StayPortId), Name = "IXFK_ShipRegister_NPorts")]
    [Index(nameof(FleetSegmentId), Name = "IXFK_ShipRegister_NSegments")]
    [Index(nameof(ShipAssociationId), Name = "IXFK_ShipRegister_NShipAssociations")]
    [Index(nameof(RegisterApplicationId), Name = "IXFK_ShipRegister_ShipRegister")]
    [Index(nameof(ShipUid), nameof(ValidTo), Name = "UK_ShipRegister", IsUnique = true)]
    public partial class ShipRegister
    {
        public ShipRegister()
        {
            ApplicationChangeOfCircumstances = new HashSet<ApplicationChangeOfCircumstance>();
            CatchRecords = new HashSet<CatchRecord>();
            FishVesselsForms = new HashSet<FishVesselsForm>();
            FishingGearChecks = new HashSet<FishingGearCheck>();
            FvmsfishingActivityReports = new HashSet<FvmsfishingActivityReport>();
            InspectionLogBookPages = new HashSet<InspectionLogBookPage>();
            InverseRegisterApplication = new HashSet<ShipRegister>();
            LogBooks = new HashSet<LogBook>();
            ObservationAtSeas = new HashSet<ObservationAtSea>();
            OriginDeclarationFishes = new HashSet<OriginDeclarationFish>();
            PenalPointsRegisters = new HashSet<PenalPointsRegister>();
            PermitLicensesRegisters = new HashSet<PermitLicensesRegister>();
            PermitRegisters = new HashSet<PermitRegister>();
            ScientificPermitRegisters = new HashSet<ScientificPermitRegister>();
            ShipCapacityRegisters = new HashSet<ShipCapacityRegister>();
            ShipCatchQuota = new HashSet<ShipCatchQuota>();
            ShipInspections = new HashSet<ShipInspection>();
            ShipLogBookPages = new HashSet<ShipLogBookPage>();
            ShipOwners = new HashSet<ShipOwner>();
            ShipRegisterFiles = new HashSet<ShipRegisterFile>();
        }

        /// <summary>
        /// Уникален идентификатор
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Заявление
        /// </summary>
        [Column("ApplicationID")]
        public int? ApplicationId { get; set; }
        /// <summary>
        /// Тип на запис - заявление или регистров :  Application / Register
        /// </summary>
        [Required]
        [StringLength(50)]
        public string RecordType { get; set; }
        /// <summary>
        /// Флаг дали корабът е от трета страна
        /// </summary>
        public bool IsThirdPartyShip { get; set; }
        /// <summary>
        /// Заявление, от което е създаден регистровия запис - само при ApplicationStatus = &apos;Register&apos;
        /// </summary>
        [Column("RegisterApplicationID")]
        public int? RegisterApplicationId { get; set; }
        /// <summary>
        /// Уникален идентификатор на кораба (вътрешен за системата)
        /// </summary>
        [Column("ShipUID")]
        public int ShipUid { get; set; }
        /// <summary>
        /// CFR
        /// </summary>
        [Required]
        [Column("CFR")]
        [StringLength(20)]
        public string Cfr { get; set; }
        /// <summary>
        /// Име
        /// </summary>
        [Required]
        [StringLength(500)]
        public string Name { get; set; }
        /// <summary>
        /// Външна маркировка
        /// </summary>
        [Required]
        [StringLength(50)]
        public string ExternalMark { get; set; }
        /// <summary>
        /// Регистрационен номер на кораба
        /// </summary>
        [Required]
        [StringLength(20)]
        public string RegistrationNum { get; set; }
        /// <summary>
        /// Дата на регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime RegistrationDate { get; set; }
        /// <summary>
        /// Флот
        /// </summary>
        [Column("FleetTypeID")]
        public int FleetTypeId { get; set; }
        /// <summary>
        /// Сегмент на флота
        /// </summary>
        [Column("FleetSegmentID")]
        public int FleetSegmentId { get; set; }
        /// <summary>
        /// Флаг на регистрация
        /// </summary>
        [Column("FlagCountryID")]
        public int FlagCountryId { get; set; }
        /// <summary>
        /// IRCS Позивна
        /// </summary>
        [Column("IRCSCallSign")]
        [StringLength(50)]
        public string IrcscallSign { get; set; }
        /// <summary>
        /// MMSI
        /// </summary>
        [Column("MMSI")]
        [StringLength(20)]
        public string Mmsi { get; set; }
        /// <summary>
        /// UVI
        /// </summary>
        [Column("UVI")]
        [StringLength(20)]
        public string Uvi { get; set; }
        /// <summary>
        /// Събитие
        /// </summary>
        [Column("EventTypeID")]
        public int EventTypeId { get; set; }
        /// <summary>
        /// Дата на събитието
        /// </summary>
        public DateTime EventDate { get; set; }
        /// <summary>
        /// Флаг дали има AIS
        /// </summary>
        [Column("HasAIS")]
        public bool HasAis { get; set; }
        /// <summary>
        /// Флаг дали има ERS
        /// </summary>
        [Column("HasERS")]
        public bool HasErs { get; set; }
        /// <summary>
        /// Система за наблюдение VMS
        /// </summary>
        [Column("HasVMS")]
        public bool HasVms { get; set; }
        /// <summary>
        /// Тип кораб
        /// </summary>
        [Column("VesselTypeID")]
        public int? VesselTypeId { get; set; }
        /// <summary>
        /// Номер на свидетелство за регистрация
        /// </summary>
        [StringLength(20)]
        public string RegLicenceNum { get; set; }
        /// <summary>
        /// Дата на свидетелство за регистрация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? RegLicenseDate { get; set; }
        /// <summary>
        /// Издател на свидетелство за регистрация
        /// </summary>
        [StringLength(50)]
        public string RegLicensePublisher { get; set; }
        /// <summary>
        /// Том на свидетелство за регистрация
        /// </summary>
        [StringLength(10)]
        public string RegLicensePublishVolume { get; set; }
        /// <summary>
        /// Страница на свидетелство за регистрация
        /// </summary>
        [StringLength(10)]
        public string RegLicensePublishPage { get; set; }
        /// <summary>
        /// Номер на свидетелство за регистрация
        /// </summary>
        [StringLength(10)]
        public string RegLicensePublishNum { get; set; }
        /// <summary>
        /// Дата на влизане в експлоатация
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ExploitationStartDate { get; set; }
        /// <summary>
        /// Година на построяване
        /// </summary>
        public short BuildYear { get; set; }
        /// <summary>
        /// Място на построяване
        /// </summary>
        [Required]
        [StringLength(100)]
        public string BuildPlace { get; set; }
        /// <summary>
        /// Номер на административно решение
        /// </summary>
        [StringLength(20)]
        public string AdminDecisionNum { get; set; }
        /// <summary>
        /// Дата на административно решение
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? AdminDecisionDate { get; set; }
        /// <summary>
        /// Код на публична помощ
        /// </summary>
        [Column("PublicAidTypeID")]
        public int PublicAidTypeId { get; set; }
        /// <summary>
        /// Пристанище
        /// </summary>
        [Column("PortID")]
        public int PortId { get; set; }
        /// <summary>
        /// Лодкостоянка
        /// </summary>
        [Column("StayPortID")]
        public int? StayPortId { get; set; }
        /// <summary>
        /// Район на плаване
        /// </summary>
        [Column("SailAreaID")]
        public int? SailAreaId { get; set; }
        /// <summary>
        /// Обща дължина - LOA (м)
        /// </summary>
        public decimal TotalLength { get; set; }
        /// <summary>
        /// Ширина
        /// </summary>
        public decimal TotalWidth { get; set; }
        /// <summary>
        /// Бруто тонаж
        /// </summary>
        public decimal GrossTonnage { get; set; }
        /// <summary>
        /// Нето тонаж
        /// </summary>
        public decimal? NetTonnage { get; set; }
        /// <summary>
        /// Друг тонаж
        /// </summary>
        public decimal? OtherTonnage { get; set; }
        /// <summary>
        /// Височина на борда
        /// </summary>
        public decimal BoardHeight { get; set; }
        /// <summary>
        /// Газене
        /// </summary>
        public decimal ShipDraught { get; set; }
        /// <summary>
        /// Дължина между перпендикулярите - LBP
        /// </summary>
        public decimal? LengthBetweenPerpendiculars { get; set; }
        /// <summary>
        /// Мощност на главния двигател (kW)
        /// </summary>
        public decimal MainEnginePower { get; set; }
        /// <summary>
        /// Мощност на спомагателния двигател (kW)
        /// </summary>
        public decimal? AuxiliaryEnginePower { get; set; }
        /// <summary>
        /// № на главния двигател
        /// </summary>
        [StringLength(20)]
        public string MainEngineNum { get; set; }
        /// <summary>
        /// Марка на главния двигател
        /// </summary>
        [StringLength(50)]
        public string MainEngineModel { get; set; }
        /// <summary>
        /// Основен риболовен уред
        /// </summary>
        [Column("MainFishingGearID")]
        public int MainFishingGearId { get; set; }
        /// <summary>
        /// Допълнителен риболовен уред
        /// </summary>
        [Column("AdditionalFishingGearID")]
        public int? AdditionalFishingGearId { get; set; }
        /// <summary>
        /// Материал на корпуса
        /// </summary>
        [Column("HullMaterialID")]
        public int HullMaterialId { get; set; }
        /// <summary>
        /// Вид гориво
        /// </summary>
        [Column("FuelTypeID")]
        public int FuelTypeId { get; set; }
        /// <summary>
        /// Обща човековместимост
        /// </summary>
        public int TotalPassengerCapacity { get; set; }
        /// <summary>
        /// Брой екипаж
        /// </summary>
        public int CrewCount { get; set; }
        /// <summary>
        /// Флаг дали корабът притежава контролен талон
        /// </summary>
        public bool HasControlCard { get; set; }
        /// <summary>
        /// Номер на контролен талон
        /// </summary>
        [StringLength(20)]
        public string ControlCardNum { get; set; }
        /// <summary>
        /// Дата на контролен талон
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ControlCardDate { get; set; }
        /// <summary>
        /// Флаг дали корабът притежава свидетелство за годност
        /// </summary>
        public bool HasValidityCertificate { get; set; }
        /// <summary>
        /// № на свидетелство за годност
        /// </summary>
        [StringLength(50)]
        public string ControlCardValidityCertificateNum { get; set; }
        /// <summary>
        /// Дата на свидетелство за годност
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ControlCardValidityCertificateDate { get; set; }
        /// <summary>
        /// Дата на последна заверка
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ControlCardDateOfLastAttestation { get; set; }
        /// <summary>
        /// Флаг дали има удостоверение по Закона за храните
        /// </summary>
        public bool HasFoodLawLicense { get; set; }
        /// <summary>
        /// Номер на удостоверение по Закона за храните
        /// </summary>
        [StringLength(50)]
        public string FoodLawLicenseNum { get; set; }
        /// <summary>
        /// Дата на удостоверение по Закона за храните
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? FoodLawLicenseDate { get; set; }
        /// <summary>
        /// Корабно сдружение
        /// </summary>
        [Column("ShipAssociationID")]
        public int? ShipAssociationId { get; set; }
        /// <summary>
        /// Страна на внос
        /// </summary>
        [Column("ImportCountryID")]
        public int? ImportCountryId { get; set; }
        /// <summary>
        /// Страна на износ
        /// </summary>
        [Column("ExportCountryID")]
        public int? ExportCountryId { get; set; }
        /// <summary>
        /// Вид износ (ExportOrTransferInEU, ExportJointVenture)
        /// </summary>
        [StringLength(50)]
        public string ExportType { get; set; }
        /// <summary>
        /// Коментари и бележки
        /// </summary>
        [StringLength(4000)]
        public string Comments { get; set; }
        /// <summary>
        /// Причинa за отписване/унищожаване на кораб
        /// </summary>
        [Column("CancellationDetailsID")]
        public int? CancellationDetailsId { get; set; }
        /// <summary>
        /// Флаг за наличие на активно РСР за кораба-
        /// </summary>
        public bool HasFishingPermit { get; set; }
        /// <summary>
        /// Забранен за издаване на нови РСР и отчитане на улов 
        /// </summary>
        public bool IsForbidden { get; set; }
        /// <summary>
        /// Причина за забраняване за издаване на РСР и отчитане на улов
        /// </summary>
        [StringLength(500)]
        public string ForbiddenReason { get; set; }
        /// <summary>
        /// Начална дата на забрана за издаване на нови РСР и отчитане на улов
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ForbiddenStartDate { get; set; }
        /// <summary>
        /// Крайна дата на забрана за издаване на нови РСР и отчитане на улов
        /// </summary>
        [Column(TypeName = "date")]
        public DateTime? ForbiddenEndDate { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [ForeignKey(nameof(AdditionalFishingGearId))]
        [InverseProperty(nameof(NfishingGear.ShipRegisterAdditionalFishingGears))]
        public virtual NfishingGear AdditionalFishingGear { get; set; }
        [ForeignKey(nameof(ApplicationId))]
        [InverseProperty("ShipRegisters")]
        public virtual Application Application { get; set; }
        [ForeignKey(nameof(CancellationDetailsId))]
        [InverseProperty(nameof(CancellationDetail.ShipRegisters))]
        public virtual CancellationDetail CancellationDetails { get; set; }
        [ForeignKey(nameof(EventTypeId))]
        [InverseProperty(nameof(NeventType.ShipRegisters))]
        public virtual NeventType EventType { get; set; }
        [ForeignKey(nameof(ExportCountryId))]
        [InverseProperty(nameof(Ncountry.ShipRegisterExportCountries))]
        public virtual Ncountry ExportCountry { get; set; }
        [ForeignKey(nameof(FlagCountryId))]
        [InverseProperty(nameof(Ncountry.ShipRegisterFlagCountries))]
        public virtual Ncountry FlagCountry { get; set; }
        [ForeignKey(nameof(FleetSegmentId))]
        [InverseProperty(nameof(Nsegment.ShipRegisters))]
        public virtual Nsegment FleetSegment { get; set; }
        [ForeignKey(nameof(FleetTypeId))]
        [InverseProperty(nameof(NfleetType.ShipRegisters))]
        public virtual NfleetType FleetType { get; set; }
        [ForeignKey(nameof(FuelTypeId))]
        [InverseProperty(nameof(NfuelType.ShipRegisters))]
        public virtual NfuelType FuelType { get; set; }
        [ForeignKey(nameof(HullMaterialId))]
        [InverseProperty(nameof(NhullMaterial.ShipRegisters))]
        public virtual NhullMaterial HullMaterial { get; set; }
        [ForeignKey(nameof(ImportCountryId))]
        [InverseProperty(nameof(Ncountry.ShipRegisterImportCountries))]
        public virtual Ncountry ImportCountry { get; set; }
        [ForeignKey(nameof(MainFishingGearId))]
        [InverseProperty(nameof(NfishingGear.ShipRegisterMainFishingGears))]
        public virtual NfishingGear MainFishingGear { get; set; }
        [ForeignKey(nameof(PortId))]
        [InverseProperty(nameof(Nport.ShipRegisterPorts))]
        public virtual Nport Port { get; set; }
        [ForeignKey(nameof(PublicAidTypeId))]
        [InverseProperty(nameof(NpublicAidType.ShipRegisters))]
        public virtual NpublicAidType PublicAidType { get; set; }
        [ForeignKey(nameof(RegisterApplicationId))]
        [InverseProperty(nameof(ShipRegister.InverseRegisterApplication))]
        public virtual ShipRegister RegisterApplication { get; set; }
        [ForeignKey(nameof(SailAreaId))]
        [InverseProperty(nameof(NsailArea.ShipRegisters))]
        public virtual NsailArea SailArea { get; set; }
        [ForeignKey(nameof(ShipAssociationId))]
        [InverseProperty(nameof(NshipAssociation.ShipRegisters))]
        public virtual NshipAssociation ShipAssociation { get; set; }
        [ForeignKey(nameof(StayPortId))]
        [InverseProperty(nameof(Nport.ShipRegisterStayPorts))]
        public virtual Nport StayPort { get; set; }
        [ForeignKey(nameof(VesselTypeId))]
        [InverseProperty(nameof(NvesselType.ShipRegisters))]
        public virtual NvesselType VesselType { get; set; }
        [InverseProperty(nameof(ApplicationChangeOfCircumstance.Ship))]
        public virtual ICollection<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        [InverseProperty(nameof(CatchRecord.TransboardFromShip))]
        public virtual ICollection<CatchRecord> CatchRecords { get; set; }
        [InverseProperty(nameof(FishVesselsForm.Ship))]
        public virtual ICollection<FishVesselsForm> FishVesselsForms { get; set; }
        [InverseProperty(nameof(FishingGearCheck.Ship))]
        public virtual ICollection<FishingGearCheck> FishingGearChecks { get; set; }
        [InverseProperty(nameof(FvmsfishingActivityReport.Vessel))]
        public virtual ICollection<FvmsfishingActivityReport> FvmsfishingActivityReports { get; set; }
        [InverseProperty(nameof(InspectionLogBookPage.Ship))]
        public virtual ICollection<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        [InverseProperty(nameof(ShipRegister.RegisterApplication))]
        public virtual ICollection<ShipRegister> InverseRegisterApplication { get; set; }
        [InverseProperty(nameof(LogBook.Ship))]
        public virtual ICollection<LogBook> LogBooks { get; set; }
        [InverseProperty(nameof(ObservationAtSea.ObservedShip))]
        public virtual ICollection<ObservationAtSea> ObservationAtSeas { get; set; }
        [InverseProperty(nameof(OriginDeclarationFish.TransboardShip))]
        public virtual ICollection<OriginDeclarationFish> OriginDeclarationFishes { get; set; }
        [InverseProperty(nameof(PenalPointsRegister.Ship))]
        public virtual ICollection<PenalPointsRegister> PenalPointsRegisters { get; set; }
        [InverseProperty(nameof(PermitLicensesRegister.Ship))]
        public virtual ICollection<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        [InverseProperty(nameof(PermitRegister.Ship))]
        public virtual ICollection<PermitRegister> PermitRegisters { get; set; }
        [InverseProperty(nameof(ScientificPermitRegister.Ship))]
        public virtual ICollection<ScientificPermitRegister> ScientificPermitRegisters { get; set; }
        [InverseProperty(nameof(ShipCapacityRegister.Ship))]
        public virtual ICollection<ShipCapacityRegister> ShipCapacityRegisters { get; set; }
        [InverseProperty("Ship")]
        public virtual ICollection<ShipCatchQuota> ShipCatchQuota { get; set; }
        [InverseProperty(nameof(ShipInspection.InspectiedShip))]
        public virtual ICollection<ShipInspection> ShipInspections { get; set; }
        [InverseProperty(nameof(ShipLogBookPage.PartnerShip))]
        public virtual ICollection<ShipLogBookPage> ShipLogBookPages { get; set; }
        [InverseProperty(nameof(ShipOwner.ShipRegister))]
        public virtual ICollection<ShipOwner> ShipOwners { get; set; }
        [InverseProperty(nameof(ShipRegisterFile.Record))]
        public virtual ICollection<ShipRegisterFile> ShipRegisterFiles { get; set; }
    }
}
