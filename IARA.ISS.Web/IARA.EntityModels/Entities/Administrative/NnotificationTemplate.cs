// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace IARA.EntityModels.Entities
{
    /// <summary>
    /// Шаблони за съобщения по мейл/мобилно/web, които да се изпращат
    /// </summary>
    [Table("NNotificationTemplates", Schema = "Admin")]
    [Index(nameof(Code), nameof(SubCode), nameof(ValidTo), Name = "UK_NNotificationTemplates_Code_SubCode", IsUnique = true)]
    public partial class NnotificationTemplate
    {
        public NnotificationTemplate()
        {
            NotificationsLogs = new HashSet<NotificationsLog>();
        }

        /// <summary>
        /// Идентификатор на съобщение
        /// </summary>
        [Key]
        [Column("ID")]
        public int Id { get; set; }
        /// <summary>
        /// Код на шаблон
        /// </summary>
        [Required]
        [StringLength(100)]
        public string Code { get; set; }
        /// <summary>
        /// Под-тип на шаблон - използва се за вариации на едно и също съобщение като код
        /// </summary>
        [StringLength(50)]
        public string SubCode { get; set; }
        /// <summary>
        /// Заглавие на съобщението
        /// </summary>
        [Required]
        [StringLength(1000)]
        public string Subject { get; set; }
        /// <summary>
        /// Текст на съобщението
        /// </summary>
        [StringLength(4000)]
        public string Body { get; set; }
        /// <summary>
        /// Флаг дали да изпрати нотификация по мейл
        /// </summary>
        public bool HasEmailNotification { get; set; }
        /// <summary>
        /// Флаг дали да покаже нотификация в уеб приложението
        /// </summary>
        public bool HasWebNotification { get; set; }
        /// <summary>
        /// След колко минути след/преди настъпване на събитието (описано в Code) да изпрати нотификация
        /// </summary>
        public int DelayMinutes { get; set; }
        /// <summary>
        /// Начална дата на валидност на записа
        /// </summary>
        public DateTime ValidFrom { get; set; }
        /// <summary>
        /// Крайна дата на валидност на записа
        /// </summary>
        public DateTime ValidTo { get; set; }
        /// <summary>
        /// Потребител създал записа
        /// </summary>
        [Required]
        [StringLength(500)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Дата и час на създаване на записа
        /// </summary>
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Потребител последно актуализирал записа
        /// </summary>
        [StringLength(500)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Дата и час на последна актуализация на записа
        /// </summary>
        public DateTime? UpdatedOn { get; set; }

        [InverseProperty(nameof(NotificationsLog.Notification))]
        public virtual ICollection<NotificationsLog> NotificationsLogs { get; set; }
    }
}