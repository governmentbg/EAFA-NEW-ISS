// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using IARA.EntityModels.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IARA.DataAccess
{
    public partial class BaseIARADbContext : DbContext
    {
        public BaseIARADbContext()
        {
        }

        public BaseIARADbContext(DbContextOptions<BaseIARADbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcquiredCapacityCertificate> AcquiredCapacityCertificates { get; set; }
        public virtual DbSet<AcquiredCapacityRegister> AcquiredCapacityRegisters { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AdmissionLogBookPage> AdmissionLogBookPages { get; set; }
        public virtual DbSet<AdmissionLogBookPageFile> AdmissionLogBookPageFiles { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationChangeHistory> ApplicationChangeHistories { get; set; }
        public virtual DbSet<ApplicationChangeHistoryFile> ApplicationChangeHistoryFiles { get; set; }
        public virtual DbSet<ApplicationChangeOfCircumstance> ApplicationChangeOfCircumstances { get; set; }
        public virtual DbSet<ApplicationDelivery> ApplicationDeliveries { get; set; }
        public virtual DbSet<ApplicationFile> ApplicationFiles { get; set; }
        public virtual DbSet<ApplicationPayment> ApplicationPayments { get; set; }
        public virtual DbSet<ApplicationPaymentTariff> ApplicationPaymentTariffs { get; set; }
        public virtual DbSet<ApplicationRegiXcache> ApplicationRegiXcaches { get; set; }
        public virtual DbSet<ApplicationRegiXcheck> ApplicationRegiXchecks { get; set; }
        public virtual DbSet<AquacultureBabhCertificate> AquacultureBabhCertificates { get; set; }
        public virtual DbSet<AquacultureFacilityCoordinate> AquacultureFacilityCoordinates { get; set; }
        public virtual DbSet<AquacultureFacilityFish> AquacultureFacilityFishes { get; set; }
        public virtual DbSet<AquacultureFacilityInstallation> AquacultureFacilityInstallations { get; set; }
        public virtual DbSet<AquacultureFacilityRegister> AquacultureFacilityRegisters { get; set; }
        public virtual DbSet<AquacultureFacilityRegisterFile> AquacultureFacilityRegisterFiles { get; set; }
        public virtual DbSet<AquacultureFacilityStatus> AquacultureFacilityStatuses { get; set; }
        public virtual DbSet<AquacultureFormFullSystemInstallation> AquacultureFormFullSystemInstallations { get; set; }
        public virtual DbSet<AquacultureFormNonFullSystemInstallation> AquacultureFormNonFullSystemInstallations { get; set; }
        public virtual DbSet<AquacultureHatcheryEquipment> AquacultureHatcheryEquipments { get; set; }
        public virtual DbSet<AquacultureInspection> AquacultureInspections { get; set; }
        public virtual DbSet<AquacultureInstallationBasin> AquacultureInstallationBasins { get; set; }
        public virtual DbSet<AquacultureInstallationCollector> AquacultureInstallationCollectors { get; set; }
        public virtual DbSet<AquacultureInstallationNetCage> AquacultureInstallationNetCages { get; set; }
        public virtual DbSet<AquacultureInstallationRaft> AquacultureInstallationRafts { get; set; }
        public virtual DbSet<AquacultureInstallationRecirculatorySystem> AquacultureInstallationRecirculatorySystems { get; set; }
        public virtual DbSet<AquacultureLogBookPage> AquacultureLogBookPages { get; set; }
        public virtual DbSet<AquacultureLogBookPageFile> AquacultureLogBookPageFiles { get; set; }
        public virtual DbSet<AquacultureOvosCertificate> AquacultureOvosCertificates { get; set; }
        public virtual DbSet<AquacultureUsageDocument> AquacultureUsageDocuments { get; set; }
        public virtual DbSet<AquacultureWaterLawCertificate> AquacultureWaterLawCertificates { get; set; }
        public virtual DbSet<AquacutlureForm> AquacutlureForms { get; set; }
        public virtual DbSet<AquacutlureFormBroodstock> AquacutlureFormBroodstocks { get; set; }
        public virtual DbSet<AquacutlureFormGivenMedicine> AquacutlureFormGivenMedicines { get; set; }
        public virtual DbSet<AquacutlureFormStockingMaterial> AquacutlureFormStockingMaterials { get; set; }
        public virtual DbSet<AuanconfiscatedFish> AuanconfiscatedFishes { get; set; }
        public virtual DbSet<AuanconfiscatedFishingGear> AuanconfiscatedFishingGears { get; set; }
        public virtual DbSet<Auanregister> Auanregisters { get; set; }
        public virtual DbSet<AuanregisterFile> AuanregisterFiles { get; set; }
        public virtual DbSet<AuanviolatedRegulation> AuanviolatedRegulations { get; set; }
        public virtual DbSet<Auanwitness> Auanwitnesses { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<BuyerLicense> BuyerLicenses { get; set; }
        public virtual DbSet<BuyerLicenseFile> BuyerLicenseFiles { get; set; }
        public virtual DbSet<BuyerPremiseUsageDocument> BuyerPremiseUsageDocuments { get; set; }
        public virtual DbSet<BuyerRegister> BuyerRegisters { get; set; }
        public virtual DbSet<BuyerRegisterFile> BuyerRegisterFiles { get; set; }
        public virtual DbSet<BuyerRegisterStatus> BuyerRegisterStatuses { get; set; }
        public virtual DbSet<CancellationDetail> CancellationDetails { get; set; }
        public virtual DbSet<CapacityCertificatesRegister> CapacityCertificatesRegisters { get; set; }
        public virtual DbSet<CapacityChangeHistory> CapacityChangeHistories { get; set; }
        public virtual DbSet<CapacityChangeHistoryCertificate> CapacityChangeHistoryCertificates { get; set; }
        public virtual DbSet<CatchQuota> CatchQuotas { get; set; }
        public virtual DbSet<CatchQuotaFile> CatchQuotaFiles { get; set; }
        public virtual DbSet<CatchQuotaUnloadPort> CatchQuotaUnloadPorts { get; set; }
        public virtual DbSet<CatchQuotasHist> CatchQuotasHists { get; set; }
        public virtual DbSet<CatchRecord> CatchRecords { get; set; }
        public virtual DbSet<CatchRecordFish> CatchRecordFishes { get; set; }
        public virtual DbSet<ConstativeProtocolInspection> ConstativeProtocolInspections { get; set; }
        public virtual DbSet<CountryCapacityRegister> CountryCapacityRegisters { get; set; }
        public virtual DbSet<CrossCheck> CrossChecks { get; set; }
        public virtual DbSet<CrossCheckResult> CrossCheckResults { get; set; }
        public virtual DbSet<DuplicatesRegister> DuplicatesRegisters { get; set; }
        public virtual DbSet<DuplicatesRegisterFile> DuplicatesRegisterFiles { get; set; }
        public virtual DbSet<EmailAddress> EmailAddresses { get; set; }
        public virtual DbSet<EmployeeStatCount> EmployeeStatCounts { get; set; }
        public virtual DbSet<EmployeeStatNumericValue> EmployeeStatNumericValues { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<FirstSaleInspection> FirstSaleInspections { get; set; }
        public virtual DbSet<FirstSaleLogBookPage> FirstSaleLogBookPages { get; set; }
        public virtual DbSet<FirstSaleLogBookPageFile> FirstSaleLogBookPageFiles { get; set; }
        public virtual DbSet<FishVesselsForm> FishVesselsForms { get; set; }
        public virtual DbSet<FishermanInspection> FishermanInspections { get; set; }
        public virtual DbSet<FishermenRegister> FishermenRegisters { get; set; }
        public virtual DbSet<FishermenRegisterFile> FishermenRegisterFiles { get; set; }
        public virtual DbSet<FishingAssociation> FishingAssociations { get; set; }
        public virtual DbSet<FishingAssociationFile> FishingAssociationFiles { get; set; }
        public virtual DbSet<FishingAssociationMember> FishingAssociationMembers { get; set; }
        public virtual DbSet<FishingCatchRecord> FishingCatchRecords { get; set; }
        public virtual DbSet<FishingCatchRecordFile> FishingCatchRecordFiles { get; set; }
        public virtual DbSet<FishingCatchRecordFish> FishingCatchRecordFishes { get; set; }
        public virtual DbSet<FishingGearCheck> FishingGearChecks { get; set; }
        public virtual DbSet<FishingGearMark> FishingGearMarks { get; set; }
        public virtual DbSet<FishingGearPinger> FishingGearPingers { get; set; }
        public virtual DbSet<FishingGearRegister> FishingGearRegisters { get; set; }
        public virtual DbSet<FishingTicket> FishingTickets { get; set; }
        public virtual DbSet<FishingTicketFile> FishingTicketFiles { get; set; }
        public virtual DbSet<Fluxflaprequest> Fluxflaprequests { get; set; }
        public virtual DbSet<Fluxfvmsrequest> Fluxfvmsrequests { get; set; }
        public virtual DbSet<FvmsfishingActivityReport> FvmsfishingActivityReports { get; set; }
        public virtual DbSet<FvmsfishingActivityReportLogBookPage> FvmsfishingActivityReportLogBookPages { get; set; }
        public virtual DbSet<HolderGroundsForUse> HolderGroundsForUses { get; set; }
        public virtual DbSet<InspDelivery> InspDeliveries { get; set; }
        public virtual DbSet<InspectedFishingGear> InspectedFishingGears { get; set; }
        public virtual DbSet<InspectedPerson> InspectedPersons { get; set; }
        public virtual DbSet<InspectionCatchMeasure> InspectionCatchMeasures { get; set; }
        public virtual DbSet<InspectionCheck> InspectionChecks { get; set; }
        public virtual DbSet<InspectionEngine> InspectionEngines { get; set; }
        public virtual DbSet<InspectionInspector> InspectionInspectors { get; set; }
        public virtual DbSet<InspectionLastPortVisit> InspectionLastPortVisits { get; set; }
        public virtual DbSet<InspectionLogBookPage> InspectionLogBookPages { get; set; }
        public virtual DbSet<InspectionObservationText> InspectionObservationTexts { get; set; }
        public virtual DbSet<InspectionObservationTool> InspectionObservationTools { get; set; }
        public virtual DbSet<InspectionPatrolVehicle> InspectionPatrolVehicles { get; set; }
        public virtual DbSet<InspectionPermitLicense> InspectionPermitLicenses { get; set; }
        public virtual DbSet<InspectionRegister> InspectionRegisters { get; set; }
        public virtual DbSet<InspectionRegisterFile> InspectionRegisterFiles { get; set; }
        public virtual DbSet<InspectionVessel> InspectionVessels { get; set; }
        public virtual DbSet<InspectionVesselActivity> InspectionVesselActivities { get; set; }
        public virtual DbSet<Inspector> Inspectors { get; set; }
        public virtual DbSet<InstallationAquarium> InstallationAquariums { get; set; }
        public virtual DbSet<InstallationBasin> InstallationBasins { get; set; }
        public virtual DbSet<InstallationDam> InstallationDams { get; set; }
        public virtual DbSet<Legal> Legals { get; set; }
        public virtual DbSet<LegalEmailAddress> LegalEmailAddresses { get; set; }
        public virtual DbSet<LegalFile> LegalFiles { get; set; }
        public virtual DbSet<LegalPhoneNumber> LegalPhoneNumbers { get; set; }
        public virtual DbSet<LegalsAddress> LegalsAddresses { get; set; }
        public virtual DbSet<LetterOfAttorney> LetterOfAttorneys { get; set; }
        public virtual DbSet<LogBook> LogBooks { get; set; }
        public virtual DbSet<LogBookPageProduct> LogBookPageProducts { get; set; }
        public virtual DbSet<LogBookPermitLicense> LogBookPermitLicenses { get; set; }
        public virtual DbSet<MapApplicationTypeDeliveryType> MapApplicationTypeDeliveryTypes { get; set; }
        public virtual DbSet<MapApplicationTypeSubmittedByRole> MapApplicationTypeSubmittedByRoles { get; set; }
        public virtual DbSet<MapStatFormTypesEmployeeStatTypeGroup> MapStatFormTypesEmployeeStatTypeGroups { get; set; }
        public virtual DbSet<MapStatFormTypesNumericStatTypeGroup> MapStatFormTypesNumericStatTypeGroups { get; set; }
        public virtual DbSet<MapTariffFish> MapTariffFishes { get; set; }
        public virtual DbSet<MapTariffFishingGear> MapTariffFishingGears { get; set; }
        public virtual DbSet<MapWaterTypePermitType> MapWaterTypePermitTypes { get; set; }
        public virtual DbSet<MdrAcdrCatchStatus> MdrAcdrCatchStatuses { get; set; }
        public virtual DbSet<MdrAgreementType> MdrAgreementTypes { get; set; }
        public virtual DbSet<MdrBooleanType> MdrBooleanTypes { get; set; }
        public virtual DbSet<MdrCharteringType> MdrCharteringTypes { get; set; }
        public virtual DbSet<MdrCommEquipType> MdrCommEquipTypes { get; set; }
        public virtual DbSet<MdrConversionFactor> MdrConversionFactors { get; set; }
        public virtual DbSet<MdrCountryCurrency> MdrCountryCurrencies { get; set; }
        public virtual DbSet<MdrCrFishingCategory> MdrCrFishingCategories { get; set; }
        public virtual DbSet<MdrCrLandIndicator> MdrCrLandIndicators { get; set; }
        public virtual DbSet<MdrCrReportType> MdrCrReportTypes { get; set; }
        public virtual DbSet<MdrCrSovWater> MdrCrSovWaters { get; set; }
        public virtual DbSet<MdrCrUnit> MdrCrUnits { get; set; }
        public virtual DbSet<MdrDataType> MdrDataTypes { get; set; }
        public virtual DbSet<MdrDeckMachineryType> MdrDeckMachineryTypes { get; set; }
        public virtual DbSet<MdrEffortZone> MdrEffortZones { get; set; }
        public virtual DbSet<MdrFaBaitType> MdrFaBaitTypes { get; set; }
        public virtual DbSet<MdrFaBftSizeCategory> MdrFaBftSizeCategories { get; set; }
        public virtual DbSet<MdrFaBrDef> MdrFaBrDefs { get; set; }
        public virtual DbSet<MdrFaBrEu> MdrFaBrEus { get; set; }
        public virtual DbSet<MdrFaCatchType> MdrFaCatchTypes { get; set; }
        public virtual DbSet<MdrFaCharacteristic> MdrFaCharacteristics { get; set; }
        public virtual DbSet<MdrFaDeviceGearAttachment> MdrFaDeviceGearAttachments { get; set; }
        public virtual DbSet<MdrFaFishery> MdrFaFisheries { get; set; }
        public virtual DbSet<MdrFaGearCharacteristic> MdrFaGearCharacteristics { get; set; }
        public virtual DbSet<MdrFaGearProblem> MdrFaGearProblems { get; set; }
        public virtual DbSet<MdrFaGearRecovery> MdrFaGearRecoveries { get; set; }
        public virtual DbSet<MdrFaGearRole> MdrFaGearRoles { get; set; }
        public virtual DbSet<MdrFaNeafcStock> MdrFaNeafcStocks { get; set; }
        public virtual DbSet<MdrFaQueryParameter> MdrFaQueryParameters { get; set; }
        public virtual DbSet<MdrFaQueryType> MdrFaQueryTypes { get; set; }
        public virtual DbSet<MdrFaReasonArrival> MdrFaReasonArrivals { get; set; }
        public virtual DbSet<MdrFaReasonDeparture> MdrFaReasonDepartures { get; set; }
        public virtual DbSet<MdrFaReasonDiscard> MdrFaReasonDiscards { get; set; }
        public virtual DbSet<MdrFaReasonEntry> MdrFaReasonEntries { get; set; }
        public virtual DbSet<MdrFaTripIdType> MdrFaTripIdTypes { get; set; }
        public virtual DbSet<MdrFaVesselRole> MdrFaVesselRoles { get; set; }
        public virtual DbSet<MdrFaoFishingArea> MdrFaoFishingAreas { get; set; }
        public virtual DbSet<MdrFaoSpecy> MdrFaoSpecies { get; set; }
        public virtual DbSet<MdrFarFishCategory> MdrFarFishCategories { get; set; }
        public virtual DbSet<MdrFarm> MdrFarms { get; set; }
        public virtual DbSet<MdrFishFinderEquipType> MdrFishFinderEquipTypes { get; set; }
        public virtual DbSet<MdrFishFreshness> MdrFishFreshnesses { get; set; }
        public virtual DbSet<MdrFishPackaging> MdrFishPackagings { get; set; }
        public virtual DbSet<MdrFishPresentation> MdrFishPresentations { get; set; }
        public virtual DbSet<MdrFishPreservation> MdrFishPreservations { get; set; }
        public virtual DbSet<MdrFishSizeCategory> MdrFishSizeCategories { get; set; }
        public virtual DbSet<MdrFishSizeClass> MdrFishSizeClasses { get; set; }
        public virtual DbSet<MdrFishingTripType> MdrFishingTripTypes { get; set; }
        public virtual DbSet<MdrFlapCharacteristic> MdrFlapCharacteristics { get; set; }
        public virtual DbSet<MdrFlapCoastalParty> MdrFlapCoastalParties { get; set; }
        public virtual DbSet<MdrFlapDocType> MdrFlapDocTypes { get; set; }
        public virtual DbSet<MdrFlapFlagState> MdrFlapFlagStates { get; set; }
        public virtual DbSet<MdrFlapIdType> MdrFlapIdTypes { get; set; }
        public virtual DbSet<MdrFlapQuotaType> MdrFlapQuotaTypes { get; set; }
        public virtual DbSet<MdrFlapRequestPurpose> MdrFlapRequestPurposes { get; set; }
        public virtual DbSet<MdrFlapWfStep> MdrFlapWfSteps { get; set; }
        public virtual DbSet<MdrFluxContactRole> MdrFluxContactRoles { get; set; }
        public virtual DbSet<MdrFluxFaFmc> MdrFluxFaFmcs { get; set; }
        public virtual DbSet<MdrFluxFaReportType> MdrFluxFaReportTypes { get; set; }
        public virtual DbSet<MdrFluxFaType> MdrFluxFaTypes { get; set; }
        public virtual DbSet<MdrFluxGpMessageId> MdrFluxGpMessageIds { get; set; }
        public virtual DbSet<MdrFluxGpParty> MdrFluxGpParties { get; set; }
        public virtual DbSet<MdrFluxGpPurpose> MdrFluxGpPurposes { get; set; }
        public virtual DbSet<MdrFluxGpResponse> MdrFluxGpResponses { get; set; }
        public virtual DbSet<MdrFluxGpValLevel> MdrFluxGpValLevels { get; set; }
        public virtual DbSet<MdrFluxGpValType> MdrFluxGpValTypes { get; set; }
        public virtual DbSet<MdrFluxLocationChar> MdrFluxLocationChars { get; set; }
        public virtual DbSet<MdrFluxLocationType> MdrFluxLocationTypes { get; set; }
        public virtual DbSet<MdrFluxMdrQueryType> MdrFluxMdrQueryTypes { get; set; }
        public virtual DbSet<MdrFluxProcessType> MdrFluxProcessTypes { get; set; }
        public virtual DbSet<MdrFluxSalesPartyIdType> MdrFluxSalesPartyIdTypes { get; set; }
        public virtual DbSet<MdrFluxSalesPartyRole> MdrFluxSalesPartyRoles { get; set; }
        public virtual DbSet<MdrFluxSalesQueryParam> MdrFluxSalesQueryParams { get; set; }
        public virtual DbSet<MdrFluxSalesQueryParamRole> MdrFluxSalesQueryParamRoles { get; set; }
        public virtual DbSet<MdrFluxSalesType> MdrFluxSalesTypes { get; set; }
        public virtual DbSet<MdrFluxTelecomUse> MdrFluxTelecomUses { get; set; }
        public virtual DbSet<MdrFluxUnit> MdrFluxUnits { get; set; }
        public virtual DbSet<MdrFluxVehicleIdType> MdrFluxVehicleIdTypes { get; set; }
        public virtual DbSet<MdrFluxVesselAdminType> MdrFluxVesselAdminTypes { get; set; }
        public virtual DbSet<MdrFluxVesselConstrType> MdrFluxVesselConstrTypes { get; set; }
        public virtual DbSet<MdrFluxVesselDimType> MdrFluxVesselDimTypes { get; set; }
        public virtual DbSet<MdrFluxVesselEngineRole> MdrFluxVesselEngineRoles { get; set; }
        public virtual DbSet<MdrFluxVesselEquipType> MdrFluxVesselEquipTypes { get; set; }
        public virtual DbSet<MdrFluxVesselGearRole> MdrFluxVesselGearRoles { get; set; }
        public virtual DbSet<MdrFluxVesselHistChar> MdrFluxVesselHistChars { get; set; }
        public virtual DbSet<MdrFluxVesselIdType> MdrFluxVesselIdTypes { get; set; }
        public virtual DbSet<MdrFluxVesselPositionType> MdrFluxVesselPositionTypes { get; set; }
        public virtual DbSet<MdrFluxVesselQueryParam> MdrFluxVesselQueryParams { get; set; }
        public virtual DbSet<MdrFluxVesselQueryType> MdrFluxVesselQueryTypes { get; set; }
        public virtual DbSet<MdrFluxVesselRegstrType> MdrFluxVesselRegstrTypes { get; set; }
        public virtual DbSet<MdrFluxVesselReportType> MdrFluxVesselReportTypes { get; set; }
        public virtual DbSet<MdrFluxVesselTechType> MdrFluxVesselTechTypes { get; set; }
        public virtual DbSet<MdrGearType> MdrGearTypes { get; set; }
        public virtual DbSet<MdrGender> MdrGenders { get; set; }
        public virtual DbSet<MdrGfcmGsa> MdrGfcmGsas { get; set; }
        public virtual DbSet<MdrLocation> MdrLocations { get; set; }
        public virtual DbSet<MdrManagementArea> MdrManagementAreas { get; set; }
        public virtual DbSet<MdrMdmBr> MdrMdmBrs { get; set; }
        public virtual DbSet<MdrMdmBrDef> MdrMdmBrDefs { get; set; }
        public virtual DbSet<MdrMemberState> MdrMemberStates { get; set; }
        public virtual DbSet<MdrNavigEquipType> MdrNavigEquipTypes { get; set; }
        public virtual DbSet<MdrProductDestination> MdrProductDestinations { get; set; }
        public virtual DbSet<MdrPropellerType> MdrPropellerTypes { get; set; }
        public virtual DbSet<MdrQuotaLocation> MdrQuotaLocations { get; set; }
        public virtual DbSet<MdrQuotaObject> MdrQuotaObjects { get; set; }
        public virtual DbSet<MdrRfmo> MdrRfmos { get; set; }
        public virtual DbSet<MdrSalesBr> MdrSalesBrs { get; set; }
        public virtual DbSet<MdrSalesBrDef> MdrSalesBrDefs { get; set; }
        public virtual DbSet<MdrStatRect> MdrStatRects { get; set; }
        public virtual DbSet<MdrStorageType> MdrStorageTypes { get; set; }
        public virtual DbSet<MdrTargetSpeciesGroup> MdrTargetSpeciesGroups { get; set; }
        public virtual DbSet<MdrTerritory> MdrTerritories { get; set; }
        public virtual DbSet<MdrUnDataType> MdrUnDataTypes { get; set; }
        public virtual DbSet<MdrVehicleType> MdrVehicleTypes { get; set; }
        public virtual DbSet<MdrVesselActivity> MdrVesselActivities { get; set; }
        public virtual DbSet<MdrVesselBr> MdrVesselBrs { get; set; }
        public virtual DbSet<MdrVesselBrDef> MdrVesselBrDefs { get; set; }
        public virtual DbSet<MdrVesselCategory> MdrVesselCategories { get; set; }
        public virtual DbSet<MdrVesselCrewType> MdrVesselCrewTypes { get; set; }
        public virtual DbSet<MdrVesselEvent> MdrVesselEvents { get; set; }
        public virtual DbSet<MdrVesselExportType> MdrVesselExportTypes { get; set; }
        public virtual DbSet<MdrVesselHullType> MdrVesselHullTypes { get; set; }
        public virtual DbSet<MdrVesselPhotoType> MdrVesselPhotoTypes { get; set; }
        public virtual DbSet<MdrVesselPort> MdrVesselPorts { get; set; }
        public virtual DbSet<MdrVesselPublicAidType> MdrVesselPublicAidTypes { get; set; }
        public virtual DbSet<MdrVesselSegment> MdrVesselSegments { get; set; }
        public virtual DbSet<MdrVesselStorageType> MdrVesselStorageTypes { get; set; }
        public virtual DbSet<MdrVesselType> MdrVesselTypes { get; set; }
        public virtual DbSet<MdrVmsBr> MdrVmsBrs { get; set; }
        public virtual DbSet<MdrVmsBrDef> MdrVmsBrDefs { get; set; }
        public virtual DbSet<MdrVmsBrParam> MdrVmsBrParams { get; set; }
        public virtual DbSet<MdrVmsSatelliteOper> MdrVmsSatelliteOpers { get; set; }
        public virtual DbSet<MdrWeightMeasureType> MdrWeightMeasureTypes { get; set; }
        public virtual DbSet<NaddressType> NaddressTypes { get; set; }
        public virtual DbSet<NapplicationStatus> NapplicationStatuses { get; set; }
        public virtual DbSet<NapplicationStatusHierarchy> NapplicationStatusHierarchies { get; set; }
        public virtual DbSet<NapplicationStatusHierarchyType> NapplicationStatusHierarchyTypes { get; set; }
        public virtual DbSet<NapplicationType> NapplicationTypes { get; set; }
        public virtual DbSet<NapplicationTypeGroup> NapplicationTypeGroups { get; set; }
        public virtual DbSet<NapplicationTypeHierType> NapplicationTypeHierTypes { get; set; }
        public virtual DbSet<NapplicationTypeTariff> NapplicationTypeTariffs { get; set; }
        public virtual DbSet<NaquacultureInstallationType> NaquacultureInstallationTypes { get; set; }
        public virtual DbSet<NaquaculturePowerSupplyType> NaquaculturePowerSupplyTypes { get; set; }
        public virtual DbSet<NaquacultureStatus> NaquacultureStatuses { get; set; }
        public virtual DbSet<NaquacultureWaterAreaType> NaquacultureWaterAreaTypes { get; set; }
        public virtual DbSet<Nauanstatus> Nauanstatuses { get; set; }
        public virtual DbSet<NauditLogActionType> NauditLogActionTypes { get; set; }
        public virtual DbSet<NauditLogTable> NauditLogTables { get; set; }
        public virtual DbSet<NbuyerLicenseType> NbuyerLicenseTypes { get; set; }
        public virtual DbSet<NbuyerStatus> NbuyerStatuses { get; set; }
        public virtual DbSet<NbuyerType> NbuyerTypes { get; set; }
        public virtual DbSet<NcancellationReason> NcancellationReasons { get; set; }
        public virtual DbSet<NcatchFishUnloadType> NcatchFishUnloadTypes { get; set; }
        public virtual DbSet<NcatchInspectionType> NcatchInspectionTypes { get; set; }
        public virtual DbSet<NcatchType> NcatchTypes { get; set; }
        public virtual DbSet<NcatchZone> NcatchZones { get; set; }
        public virtual DbSet<NchangeOfCircumstancesType> NchangeOfCircumstancesTypes { get; set; }
        public virtual DbSet<NcheckResolution> NcheckResolutions { get; set; }
        public virtual DbSet<NcommercialFishingPermitLicenseType> NcommercialFishingPermitLicenseTypes { get; set; }
        public virtual DbSet<NcommercialFishingPermitType> NcommercialFishingPermitTypes { get; set; }
        public virtual DbSet<NconfiscatedAppliance> NconfiscatedAppliances { get; set; }
        public virtual DbSet<NconfiscationAction> NconfiscationActions { get; set; }
        public virtual DbSet<NconfiscationInstitution> NconfiscationInstitutions { get; set; }
        public virtual DbSet<Ncountry> Ncountries { get; set; }
        public virtual DbSet<Ncourt> Ncourts { get; set; }
        public virtual DbSet<NdeliveryType> NdeliveryTypes { get; set; }
        public virtual DbSet<Ndepartment> Ndepartments { get; set; }
        public virtual DbSet<Ndistrict> Ndistricts { get; set; }
        public virtual DbSet<NdocumentType> NdocumentTypes { get; set; }
        public virtual DbSet<NemployeeStatType> NemployeeStatTypes { get; set; }
        public virtual DbSet<NemployeeStatTypeGroup> NemployeeStatTypeGroups { get; set; }
        public virtual DbSet<NeventType> NeventTypes { get; set; }
        public virtual DbSet<NeventTypeGroup> NeventTypeGroups { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsDistrict> NewsDistricts { get; set; }
        public virtual DbSet<NewsDistrictUserSubscription> NewsDistrictUserSubscriptions { get; set; }
        public virtual DbSet<NewsFile> NewsFiles { get; set; }
        public virtual DbSet<NfileType> NfileTypes { get; set; }
        public virtual DbSet<Nfish> Nfishes { get; set; }
        public virtual DbSet<NfishFamily> NfishFamilies { get; set; }
        public virtual DbSet<NfishFreshness> NfishFreshnesses { get; set; }
        public virtual DbSet<NfishGroup> NfishGroups { get; set; }
        public virtual DbSet<NfishPresentation> NfishPresentations { get; set; }
        public virtual DbSet<NfishSalePurpose> NfishSalePurposes { get; set; }
        public virtual DbSet<NfishSex> NfishSexes { get; set; }
        public virtual DbSet<NfishSize> NfishSizes { get; set; }
        public virtual DbSet<NfishSizeCategory> NfishSizeCategories { get; set; }
        public virtual DbSet<NfishingGear> NfishingGears { get; set; }
        public virtual DbSet<NfishingGearCheckReason> NfishingGearCheckReasons { get; set; }
        public virtual DbSet<NfishingGearMarkStatus> NfishingGearMarkStatuses { get; set; }
        public virtual DbSet<NfishingGearPingerStatus> NfishingGearPingerStatuses { get; set; }
        public virtual DbSet<NfishingGearRecheckReason> NfishingGearRecheckReasons { get; set; }
        public virtual DbSet<NfishingGearType> NfishingGearTypes { get; set; }
        public virtual DbSet<NfleetType> NfleetTypes { get; set; }
        public virtual DbSet<NfuelType> NfuelTypes { get; set; }
        public virtual DbSet<Ngender> Ngenders { get; set; }
        public virtual DbSet<NgrossTonageStatInterval> NgrossTonageStatIntervals { get; set; }
        public virtual DbSet<NhatcheryEquipmentType> NhatcheryEquipmentTypes { get; set; }
        public virtual DbSet<NholderGroundsForUseType> NholderGroundsForUseTypes { get; set; }
        public virtual DbSet<NhullMaterial> NhullMaterials { get; set; }
        public virtual DbSet<NinspDeliveryConfirmationType> NinspDeliveryConfirmationTypes { get; set; }
        public virtual DbSet<NinspDeliveryType> NinspDeliveryTypes { get; set; }
        public virtual DbSet<NinspectedPersonType> NinspectedPersonTypes { get; set; }
        public virtual DbSet<NinspectionCheckType> NinspectionCheckTypes { get; set; }
        public virtual DbSet<NinspectionObservationTextCategory> NinspectionObservationTextCategories { get; set; }
        public virtual DbSet<NinspectionState> NinspectionStates { get; set; }
        public virtual DbSet<NinspectionType> NinspectionTypes { get; set; }
        public virtual DbSet<NinstallationBasinMaterialType> NinstallationBasinMaterialTypes { get; set; }
        public virtual DbSet<NinstallationBasinPurposeType> NinstallationBasinPurposeTypes { get; set; }
        public virtual DbSet<NinstallationCollectorType> NinstallationCollectorTypes { get; set; }
        public virtual DbSet<NinstallationNetCageType> NinstallationNetCageTypes { get; set; }
        public virtual DbSet<Ninstitution> Ninstitutions { get; set; }
        public virtual DbSet<NlogBookStatus> NlogBookStatuses { get; set; }
        public virtual DbSet<NlogBookType> NlogBookTypes { get; set; }
        public virtual DbSet<NmobileVersion> NmobileVersions { get; set; }
        public virtual DbSet<Nmunicipality> Nmunicipalities { get; set; }
        public virtual DbSet<NnomenclatureGroup> NnomenclatureGroups { get; set; }
        public virtual DbSet<NnomenclatureTable> NnomenclatureTables { get; set; }
        public virtual DbSet<NnotificationTemplate> NnotificationTemplates { get; set; }
        public virtual DbSet<NnumericStatType> NnumericStatTypes { get; set; }
        public virtual DbSet<NnumericStatTypeGroup> NnumericStatTypeGroups { get; set; }
        public virtual DbSet<NobservationTool> NobservationTools { get; set; }
        public virtual DbSet<NotificationsLog> NotificationsLogs { get; set; }
        public virtual DbSet<NpageCode> NpageCodes { get; set; }
        public virtual DbSet<NpatrolVehicleType> NpatrolVehicleTypes { get; set; }
        public virtual DbSet<NpaymentStatus> NpaymentStatuses { get; set; }
        public virtual DbSet<NpaymentType> NpaymentTypes { get; set; }
        public virtual DbSet<NpenalAuthorityType> NpenalAuthorityTypes { get; set; }
        public virtual DbSet<NpenalDecreeSanctionType> NpenalDecreeSanctionTypes { get; set; }
        public virtual DbSet<NpenalDecreeStatusType> NpenalDecreeStatusTypes { get; set; }
        public virtual DbSet<NpenalDecreeType> NpenalDecreeTypes { get; set; }
        public virtual DbSet<NpenalPointStatus> NpenalPointStatuses { get; set; }
        public virtual DbSet<Npermission> Npermissions { get; set; }
        public virtual DbSet<NpermissionGroup> NpermissionGroups { get; set; }
        public virtual DbSet<NpermissionType> NpermissionTypes { get; set; }
        public virtual DbSet<NpermitReason> NpermitReasons { get; set; }
        public virtual DbSet<NpermitStatus> NpermitStatuses { get; set; }
        public virtual DbSet<NpopulatedArea> NpopulatedAreas { get; set; }
        public virtual DbSet<Nport> Nports { get; set; }
        public virtual DbSet<NportGroup> NportGroups { get; set; }
        public virtual DbSet<NpoundNetCategoryType> NpoundNetCategoryTypes { get; set; }
        public virtual DbSet<NpoundNetSeasonType> NpoundNetSeasonTypes { get; set; }
        public virtual DbSet<NpoundNetStatus> NpoundNetStatuses { get; set; }
        public virtual DbSet<NpublicAidType> NpublicAidTypes { get; set; }
        public virtual DbSet<NreportParameter> NreportParameters { get; set; }
        public virtual DbSet<NrequiredFileType> NrequiredFileTypes { get; set; }
        public virtual DbSet<NreworkProductType> NreworkProductTypes { get; set; }
        public virtual DbSet<NsailArea> NsailAreas { get; set; }
        public virtual DbSet<Nsector> Nsectors { get; set; }
        public virtual DbSet<Nsegment> Nsegments { get; set; }
        public virtual DbSet<NshipAssociation> NshipAssociations { get; set; }
        public virtual DbSet<NstatisticalFormType> NstatisticalFormTypes { get; set; }
        public virtual DbSet<NsubmittedByRole> NsubmittedByRoles { get; set; }
        public virtual DbSet<NsuspensionReason> NsuspensionReasons { get; set; }
        public virtual DbSet<NsuspensionType> NsuspensionTypes { get; set; }
        public virtual DbSet<NsystemParameter> NsystemParameters { get; set; }
        public virtual DbSet<Ntariff> Ntariffs { get; set; }
        public virtual DbSet<NterritoryUnit> NterritoryUnits { get; set; }
        public virtual DbSet<NticketPeriod> NticketPeriods { get; set; }
        public virtual DbSet<NticketStatus> NticketStatuses { get; set; }
        public virtual DbSet<NticketType> NticketTypes { get; set; }
        public virtual DbSet<NtranslationGroup> NtranslationGroups { get; set; }
        public virtual DbSet<NtranslationResource> NtranslationResources { get; set; }
        public virtual DbSet<NtransportVehicleType> NtransportVehicleTypes { get; set; }
        public virtual DbSet<NturbotSizeGroup> NturbotSizeGroups { get; set; }
        public virtual DbSet<NusageDocumentType> NusageDocumentTypes { get; set; }
        public virtual DbSet<NvesselActivity> NvesselActivities { get; set; }
        public virtual DbSet<NvesselLengthStatInterval> NvesselLengthStatIntervals { get; set; }
        public virtual DbSet<NvesselType> NvesselTypes { get; set; }
        public virtual DbSet<NviolationSignalType> NviolationSignalTypes { get; set; }
        public virtual DbSet<NwaterBodyType> NwaterBodyTypes { get; set; }
        public virtual DbSet<NwaterLawCertificateType> NwaterLawCertificateTypes { get; set; }
        public virtual DbSet<NwaterType> NwaterTypes { get; set; }
        public virtual DbSet<ObservationAtSea> ObservationAtSeas { get; set; }
        public virtual DbSet<OriginDeclaration> OriginDeclarations { get; set; }
        public virtual DbSet<OriginDeclarationFish> OriginDeclarationFishes { get; set; }
        public virtual DbSet<PenalDecreeFishCompensation> PenalDecreeFishCompensations { get; set; }
        public virtual DbSet<PenalDecreePaymentSchedule> PenalDecreePaymentSchedules { get; set; }
        public virtual DbSet<PenalDecreeSanction> PenalDecreeSanctions { get; set; }
        public virtual DbSet<PenalDecreeSeizedFishingGear> PenalDecreeSeizedFishingGears { get; set; }
        public virtual DbSet<PenalDecreeStatus> PenalDecreeStatuses { get; set; }
        public virtual DbSet<PenalDecreesRegister> PenalDecreesRegisters { get; set; }
        public virtual DbSet<PenalDecreesRegisterFile> PenalDecreesRegisterFiles { get; set; }
        public virtual DbSet<PenalPointComplaintStatus> PenalPointComplaintStatuses { get; set; }
        public virtual DbSet<PenalPointsRegister> PenalPointsRegisters { get; set; }
        public virtual DbSet<PermitLicenseRegisterFish> PermitLicenseRegisterFishes { get; set; }
        public virtual DbSet<PermitLicenseRegisterFishingGear> PermitLicenseRegisterFishingGears { get; set; }
        public virtual DbSet<PermitLicenseSuspensionChangeHistory> PermitLicenseSuspensionChangeHistories { get; set; }
        public virtual DbSet<PermitLicensesRegister> PermitLicensesRegisters { get; set; }
        public virtual DbSet<PermitLicensesRegisterFile> PermitLicensesRegisterFiles { get; set; }
        public virtual DbSet<PermitRegister> PermitRegisters { get; set; }
        public virtual DbSet<PermitRegisterFile> PermitRegisterFiles { get; set; }
        public virtual DbSet<PermitRegisterFish> PermitRegisterFishes { get; set; }
        public virtual DbSet<PermitRegisterFishingGear> PermitRegisterFishingGears { get; set; }
        public virtual DbSet<PermitSuspensionChangeHistory> PermitSuspensionChangeHistories { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<PersonAddress> PersonAddresses { get; set; }
        public virtual DbSet<PersonDocument> PersonDocuments { get; set; }
        public virtual DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; }
        public virtual DbSet<PersonFile> PersonFiles { get; set; }
        public virtual DbSet<PersonPhoneNumber> PersonPhoneNumbers { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public virtual DbSet<PoundNetCoordinate> PoundNetCoordinates { get; set; }
        public virtual DbSet<PoundNetRegister> PoundNetRegisters { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportGroup> ReportGroups { get; set; }
        public virtual DbSet<ReportParameter> ReportParameters { get; set; }
        public virtual DbSet<ReportRolePermission> ReportRolePermissions { get; set; }
        public virtual DbSet<ReportUserPermission> ReportUserPermissions { get; set; }
        public virtual DbSet<ReworkForm> ReworkForms { get; set; }
        public virtual DbSet<ReworkProduct> ReworkProducts { get; set; }
        public virtual DbSet<ReworkRawMaterial> ReworkRawMaterials { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<ScientificPermitOuting> ScientificPermitOutings { get; set; }
        public virtual DbSet<ScientificPermitOutingCatch> ScientificPermitOutingCatches { get; set; }
        public virtual DbSet<ScientificPermitOwner> ScientificPermitOwners { get; set; }
        public virtual DbSet<ScientificPermitReason> ScientificPermitReasons { get; set; }
        public virtual DbSet<ScientificPermitRegister> ScientificPermitRegisters { get; set; }
        public virtual DbSet<ScientificPermitRegisterFile> ScientificPermitRegisterFiles { get; set; }
        public virtual DbSet<ShipCapacityRegister> ShipCapacityRegisters { get; set; }
        public virtual DbSet<ShipCatchQuota> ShipCatchQuotas { get; set; }
        public virtual DbSet<ShipCatchQuotasHist> ShipCatchQuotasHists { get; set; }
        public virtual DbSet<ShipInspection> ShipInspections { get; set; }
        public virtual DbSet<ShipLogBookPage> ShipLogBookPages { get; set; }
        public virtual DbSet<ShipLogBookPageFile> ShipLogBookPageFiles { get; set; }
        public virtual DbSet<ShipOwner> ShipOwners { get; set; }
        public virtual DbSet<ShipRegister> ShipRegisters { get; set; }
        public virtual DbSet<ShipRegisterFile> ShipRegisterFiles { get; set; }
        public virtual DbSet<StatisticalFormsRegister> StatisticalFormsRegisters { get; set; }
        public virtual DbSet<StatisticalFormsRegisterFile> StatisticalFormsRegisterFiles { get; set; }
        public virtual DbSet<TransportVehicleInspection> TransportVehicleInspections { get; set; }
        public virtual DbSet<TransportationLogBookPage> TransportationLogBookPages { get; set; }
        public virtual DbSet<TransportationLogBookPageFile> TransportationLogBookPageFiles { get; set; }
        public virtual DbSet<UnregisteredPerson> UnregisteredPersons { get; set; }
        public virtual DbSet<UnregisteredVessel> UnregisteredVessels { get; set; }
        public virtual DbSet<UsageDocument> UsageDocuments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserInfo> UserInfos { get; set; }
        public virtual DbSet<UserLegal> UserLegals { get; set; }
        public virtual DbSet<UserMobileDevice> UserMobileDevices { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<VesselDaysAtSea> VesselDaysAtSeas { get; set; }
        public virtual DbSet<WaterObjectCheck> WaterObjectChecks { get; set; }
        public virtual DbSet<WorkerQueue> WorkerQueues { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("mysql_fdw")
                .HasPostgresExtension("postgis")
                .HasAnnotation("Relational:Collation", "en_US.UTF-8");

            modelBuilder.Entity<AcquiredCapacityCertificate>(entity =>
            {
                entity.HasComment("Удостоверения за свободен капацитет към осигурен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"acquiredcapacitycertificates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AcquiredCapacityId).HasComment("Осигурен капацитет");

                entity.Property(e => e.CapacityCertificateId).HasComment("Удостоверение за свободен капацитет");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AcquiredCapacity)
                    .WithMany(p => p.AcquiredCapacityCertificates)
                    .HasForeignKey(d => d.AcquiredCapacityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AcquiredCapacityCertificates_AcquiredCapacityRegister");

                entity.HasOne(d => d.CapacityCertificate)
                    .WithMany(p => p.AcquiredCapacityCertificates)
                    .HasForeignKey(d => d.CapacityCertificateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AcquiredCapacityCertificates_CapacityCertificatesRegister");
            });

            modelBuilder.Entity<AcquiredCapacityRegister>(entity =>
            {
                entity.HasComment("Осигурен риболовен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"acquiredcapacityregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AcquiredType).HasComment("Начин на осигуряване на свободния капацитет (Ranking - чрез класиране в процедура по чл. 37; FreeCapLicence - чрез удостоверение за свободен капацитет).");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Осигурена мощност (kW) чрез класиране");

                entity.Property(e => e.GrossTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Осигурен бруто тонаж чрез класиране");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasComment("Адреси");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"addresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApartmentNum).HasComment("Апартамент");

                entity.Property(e => e.BlockNum).HasComment("Блок");

                entity.Property(e => e.CountryId).HasComment("Държава");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DistrictId).HasComment("Област");

                entity.Property(e => e.EntranceNum).HasComment("Вход");

                entity.Property(e => e.FloorNum).HasComment("Етаж");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MunicipalityId).HasComment("Община");

                entity.Property(e => e.PopulatedAreaId).HasComment("Населено място");

                entity.Property(e => e.PostCode).HasComment("Пощенски код");

                entity.Property(e => e.Region).HasComment("Регион");

                entity.Property(e => e.Street).HasComment("Улица име или Жилищен комплекс");

                entity.Property(e => e.StreetNum).HasComment("Номер на улица");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_ISS_Addresses_ISS_Countries");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Addresses_NRegions");

                entity.HasOne(d => d.Municipality)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.MunicipalityId)
                    .HasConstraintName("FK_Addresses_NMunicipalities");

                entity.HasOne(d => d.PopulatedArea)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.PopulatedAreaId)
                    .HasConstraintName("FK_Addresses_NPopulatedAreas");
            });

            modelBuilder.Entity<AdmissionLogBookPage>(entity =>
            {
                entity.HasComment("Страници от дневник за приемане (декларации за Приемане)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"admissionlogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CancelationReason).HasComment("Причина за анулиране (при статус Canceled)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HandoverDate).HasComment("Дата на предаване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LogBookPermitLicenseId).HasComment("Удостоверение към дневник");

                entity.Property(e => e.OriginDeclarationId).HasComment("Декларация за произход");

                entity.Property(e => e.PageNum).HasComment("Номер на страница");

                entity.Property(e => e.Status).HasComment("Статус на страницата (InProgress, Submitted, Canceled, Missing)");

                entity.Property(e => e.StorageLocation).HasComment("Място на складиране");

                entity.Property(e => e.TransportationDocumentId).HasComment("Документ за превоз");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.AdmissionLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdmissionLogBookPages_LogBooks");

                entity.HasOne(d => d.LogBookPermitLicense)
                    .WithMany(p => p.AdmissionLogBookPages)
                    .HasForeignKey(d => d.LogBookPermitLicenseId)
                    .HasConstraintName("FK_AdmissionLogBookPages_LogBookPermitLicenses");

                entity.HasOne(d => d.OriginDeclaration)
                    .WithMany(p => p.AdmissionLogBookPages)
                    .HasForeignKey(d => d.OriginDeclarationId)
                    .HasConstraintName("FK_AdmissionLogBookPages_OriginDeclarations");

                entity.HasOne(d => d.TransportationDocument)
                    .WithMany(p => p.AdmissionLogBookPages)
                    .HasForeignKey(d => d.TransportationDocumentId)
                    .HasConstraintName("FK_AdmissionLogBookPages_TransportationLogBookPages");
            });

            modelBuilder.Entity<AdmissionLogBookPageFile>(entity =>
            {
                entity.HasComment("Файлове към страници от дневник за приемане");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"admissionlogbookpagefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от дневник за приемане");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AdmissionLogBookPageFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdmissionLogBookPageFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.AdmissionLogBookPageFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdmissionLogBookPageFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.AdmissionLogBookPageFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdmissionLogBookPageFiles_AdmissionLogBookPages");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.HasComment("Заявления за административни услуги");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applications_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AccessCode).HasComment("Уникален код за достъп и назначаване на отговорник");

                entity.Property(e => e.ApplicationDraftContents).HasComment("Съдържание на заявлението в JSON формат, когато то е DRAFT и още не е подадено към ИАРА");

                entity.Property(e => e.ApplicationStatusHierTypeId).HasComment("Тип на процеса за обработка (електронен, на хартия, билет)");

                entity.Property(e => e.ApplicationStatusId).HasComment("Статус на заявление");

                entity.Property(e => e.ApplicationTypeId).HasComment("Тип заявление");

                entity.Property(e => e.AssignedUserId).HasComment("Служител, назначен за обработка на заявлението");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryId).HasComment("Данни за връчване на резултата от заявлението");

                entity.Property(e => e.EventisNum).HasComment("Входящ/Изходящ номер в Евентис");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PaymentStatusId).HasComment("Състояние на плащане (NotNeeded, Unpaid, PaymentFail, PaidOK)");

                entity.Property(e => e.StatusReason).HasComment("Основание за промяна на статуса");

                entity.Property(e => e.SubmitDateTime).HasComment("Дата и час на подаване на заявление");

                entity.Property(e => e.SubmittedByLetterOfAttorneyId).HasComment("Данни за пълномощно ако SubmittedByPersonID е пълномощник");

                entity.Property(e => e.SubmittedByPersonId).HasComment("Физическо лице, заявител на услугата (ако заявлението е подадено онлайн, това съвпада с ФЛ на SubmittedByUserID, ако не, това е истинското ФЛ, което подава заявлението, а в SubmittedByUserID е служител на ИАРА обработил заявлението)");

                entity.Property(e => e.SubmittedByPersonRoleId).HasComment("Роля на подаващия заявление спрямо получателя");

                entity.Property(e => e.SubmittedByUserId).HasComment("Потребител, подал заявлението (може да е служител на ИАРА)");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Юридическо лице, за което е заявлението (титуляр на заявлението)");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Физическо лице, за което е заявлението (титуляр на заявлението)");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториална единица (взема се от AssignedUserID)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ApplicationStatusHierType)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.ApplicationStatusHierTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Applications_NApplicationStatusHierarchyTypes");

                entity.HasOne(d => d.ApplicationStatus)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.ApplicationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Applications_NApplicationStatuses");

                entity.HasOne(d => d.ApplicationType)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.ApplicationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Applications_NApplicationTypes");

                entity.HasOne(d => d.AssignedUser)
                    .WithMany(p => p.ApplicationAssignedUsers)
                    .HasForeignKey(d => d.AssignedUserId)
                    .HasConstraintName("FK_Applications_Users");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.DeliveryId)
                    .HasConstraintName("FK_Applications_ApplicationDelivery");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Applications_NPaymentStatuses");

                entity.HasOne(d => d.SubmittedByLetterOfAttorney)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.SubmittedByLetterOfAttorneyId)
                    .HasConstraintName("FK_Applications_SubmittedByLetterOfAttorney");

                entity.HasOne(d => d.SubmittedByPerson)
                    .WithMany(p => p.ApplicationSubmittedByPeople)
                    .HasForeignKey(d => d.SubmittedByPersonId)
                    .HasConstraintName("FK_Applications_SubmittedByPerson");

                entity.HasOne(d => d.SubmittedByPersonRole)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.SubmittedByPersonRoleId)
                    .HasConstraintName("FK_Applications_NSubmittedByRoles");

                entity.HasOne(d => d.SubmittedByUser)
                    .WithMany(p => p.ApplicationSubmittedByUsers)
                    .HasForeignKey(d => d.SubmittedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Applications_Users_SubmittedBy");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_Applications_Legals_Hist");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.ApplicationSubmittedForPeople)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_Applications_Persons_Hist");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_Applications_NTerritoryUnits");
            });

            modelBuilder.Entity<ApplicationChangeHistory>(entity =>
            {
                entity.HasComment("История на промени на заявления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationchangehistory_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationDraftContents).HasComment("Съдържание на заявлението в JSON формат, към момента на редакцията");

                entity.Property(e => e.ApplicationStatusId).HasComment("Статус");

                entity.Property(e => e.AssignedUserId).HasComment("Служител, назначен за обработка на заявлението");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ModifiedByUserId).HasComment("Потребител, направил промяната в заявлението (може да е служител на ИАРА или титуляр на заявлението )");

                entity.Property(e => e.ModifiedDateTime).HasComment("Дата и час на промяната");

                entity.Property(e => e.PaymentStatusId).HasComment("Състояние на плащане (NotNeeded, Unpaid, PaymentFail, PaidOK)");

                entity.Property(e => e.StatusReason).HasComment("Основание за промяна на статуса");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториална единица (взема се от AssignedUserID)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationChangeHistories)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationHistory_Applications");

                entity.HasOne(d => d.ApplicationStatus)
                    .WithMany(p => p.ApplicationChangeHistories)
                    .HasForeignKey(d => d.ApplicationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistory_NApplicationStatuses");

                entity.HasOne(d => d.AssignedUser)
                    .WithMany(p => p.ApplicationChangeHistoryAssignedUsers)
                    .HasForeignKey(d => d.AssignedUserId)
                    .HasConstraintName("FK_ApplicationChangeHistory_AssignedUser");

                entity.HasOne(d => d.ModifiedByUser)
                    .WithMany(p => p.ApplicationChangeHistoryModifiedByUsers)
                    .HasForeignKey(d => d.ModifiedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistory_Users_ModifiedBy");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.ApplicationChangeHistories)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistory_NPaymentStatuses");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.ApplicationChangeHistories)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_ApplicationChangeHistory_NTerritoryUnits");
            });

            modelBuilder.Entity<ApplicationChangeHistoryFile>(entity =>
            {
                entity.HasComment("Файлове за заявления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationchangehistoryfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Заявление (история)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ApplicationChangeHistoryFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistoryFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.ApplicationChangeHistoryFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistoryFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.ApplicationChangeHistoryFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationChangeHistoryFiles_ApplicationChangeHistory");
            });

            modelBuilder.Entity<ApplicationChangeOfCircumstance>(entity =>
            {
                entity.HasComment("Заявления за промяна в обстоятелствата или прекратяване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationchangeofcircumstances_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Данни за адрес за промяна");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Аквакултурно стопанство за промяна");

                entity.Property(e => e.BuyerId).HasComment("Купувач/ЦПП, за който се отнася промяната");

                entity.Property(e => e.ChangeDescription).HasComment("Описание на заявлението за промяна");

                entity.Property(e => e.ChangeOfCircumstancesTypeId).HasComment("Вид на промяната");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EventDateTime).HasComment("Дата и час на събитието");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalId).HasComment("Данни за юридическо лице за промяна");

                entity.Property(e => e.PermitId).HasComment("Разрешително за стопански риболов за промяна");

                entity.Property(e => e.PermitLicenceId).HasComment("Удостоверение за стопански риболов за промяна");

                entity.Property(e => e.PersonId).HasComment("Данни за физическо лице за промяна");

                entity.Property(e => e.ShipId).HasComment("Данни за кораб за промяна");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Данни за потребител за промяна");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_ApplChangeOfCirc_Addresses");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplChangeOfCirc_Applications");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .HasConstraintName("FK_ApplChangeOfCirc_AquacultureFacilityRegister");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.BuyerId)
                    .HasConstraintName("FK_ApplicationChangeOfCircumstances_BuyerRegister");

                entity.HasOne(d => d.ChangeOfCircumstancesType)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.ChangeOfCircumstancesTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplChangeOfCirc_NChangeOfCircumstancesTypes");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.LegalId)
                    .HasConstraintName("FK_ApplChangeOfCirc_Legals");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.PermitId)
                    .HasConstraintName("FK_ApplChangeOfCirc_PermitRegister");

                entity.HasOne(d => d.PermitLicence)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.PermitLicenceId)
                    .HasConstraintName("FK_ApplChangeOfCirc_PermitLicensesRegister");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_ApplChangeOfCirc_Persons");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_ApplChangeOfCirc_ShipRegister");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApplicationChangeOfCircumstances)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ApplChangeOfCirc_Users");
            });

            modelBuilder.Entity<ApplicationDelivery>(entity =>
            {
                entity.HasComment("Детайли за начин на връчване на заявление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationdelivery_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес за доставка");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryDate).HasComment("Дата на връчване");

                entity.Property(e => e.DeliveryTypeId).HasComment("Начин на връчване (Personal/eDelivery/ByMail)");

                entity.Property(e => e.EmailId).HasComment("Email за доставка - само за eDelivery или изпращане по пощата");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsDelivered).HasComment("Флаг дали е връчено");

                entity.Property(e => e.ReferenceNum).HasComment("Номер за референция (обратна разписка или eDelivery идентификатор)");

                entity.Property(e => e.SentDate).HasComment("Дата на изпращане (по пощата)");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено за получаване");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ApplicationDeliveries)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_ApplicationDelivery_Addresses");

                entity.HasOne(d => d.DeliveryType)
                    .WithMany(p => p.ApplicationDeliveries)
                    .HasForeignKey(d => d.DeliveryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationDelivery_NDeliveryTypes");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.ApplicationDeliveries)
                    .HasForeignKey(d => d.EmailId)
                    .HasConstraintName("FK_ApplicationDelivery_EmailAddresses");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.ApplicationDeliveries)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_ApplicationDelivery_NTerritoryUnits");
            });

            modelBuilder.Entity<ApplicationFile>(entity =>
            {
                entity.HasComment("Файлове за заявления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Разрешително");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ApplicationFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.ApplicationFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.ApplicationFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationFiles_Applications");
            });

            modelBuilder.Entity<ApplicationPayment>(entity =>
            {
                entity.HasComment("Плащане на заявление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationpayments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PaymentDateTime).HasComment("Дата и час на плащане");

                entity.Property(e => e.PaymentRefNum).HasComment("Референтен номер на плащането във външната система за плащания");

                entity.Property(e => e.PaymentStatusId).HasComment("Състояние на плащане (Unpaid, PaymentFail, PaidOK, NotNeeded)");

                entity.Property(e => e.PaymentTypeId).HasComment("Тип на плащането (Касово, ePay, PayEGov, ePOS)");

                entity.Property(e => e.TotalAmountBgn)
                    .HasPrecision(6, 2)
                    .HasComment("Обща сума на плащането");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithOne(p => p.ApplicationPayment)
                    .HasForeignKey<ApplicationPayment>(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationPayments_Applications");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.ApplicationPayments)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationPayments_NPaymentStatuses");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.ApplicationPayments)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .HasConstraintName("FK_ApplicationPayments_NPaymentTypes");
            });

            modelBuilder.Entity<ApplicationPaymentTariff>(entity =>
            {
                entity.HasComment("Тарифа за конкретни плащания за дадено заявление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationpaymenttariffs_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AmountBgn)
                    .HasPrecision(6, 2)
                    .HasComment("Сума на плащането за тази тарифа");

                entity.Property(e => e.Comments).HasComment("Бележки ако например са променили цената на тарифата.");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PaymentId).HasComment("Плащане");

                entity.Property(e => e.Quantity)
                    .HasPrecision(6, 2)
                    .HasDefaultValueSql("1")
                    .HasComment("Количество от тази тарифа");

                entity.Property(e => e.TariffId).HasComment("Тарифа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.ApplicationPaymentTariffs)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationPaymentTariffs_ApplicationPayments");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.ApplicationPaymentTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationPaymentTariffs_NTariff");
            });

            modelBuilder.Entity<ApplicationRegiXcache>(entity =>
            {
                entity.HasComment("Кеш на направени проверки срещу RegiX");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationregixcache_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EgnLnc).HasComment("ЕГН / ЛНЧ");

                entity.Property(e => e.Eik).HasComment("ЕИК/БУЛСТАТ");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RequestContent).HasComment("Съдържание на заявката");

                entity.Property(e => e.ResponseContent).HasComment("Съдържание на отговора");

                entity.Property(e => e.ResponseDateTime).HasComment("Дата и час на подаване на заявката");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WebServiceName).HasComment("Име на извиканата услуга в RegiX (пр. TechnoLogica.RegiX.GraoNBDAdapter.APIService.INBDAPI.PersonDataSearch)");
            });

            modelBuilder.Entity<ApplicationRegiXcheck>(entity =>
            {
                entity.HasComment("Проверки на заявление срещу RegiX");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"applicationregixchecks_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AdditianalIdentifier).HasComment("Идентификатор на лице, подаден към RegiX");

                entity.Property(e => e.ApplicationChangeHistoryId).HasComment("Конкретна стъпка от историята на промение на заявлението");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.Attempts)
                    .HasDefaultValueSql("1")
                    .HasComment("Брой направени опити");

                entity.Property(e => e.CheckType).HasComment("Вид на проверяваното лице:\r\nAgentPerson = 1 << 1,\r\nAgentAddress = AgentPerson | 1,\r\nChangeLegal = 1 << 2,\r\nChangePerson = 1 << 3,\r\nChangeAddress = ChangePerson | 1,\r\nHolderLegal = 1 << 4,\r\nHolderPerson = 1 << 5,\r\nHolderAddress = HolderPerson | 1,\r\nLegal = 1 << 6,\r\nLegalAuthorizedPerson = 1 << 7,\r\nLessorLegal = 1 << 8,\r\nLessorPerson = 1 << 9,\r\nLessorAddress = LessorLegal | 1,\r\nOrganizerPerson = 1 << 10,\r\nOrganizerAddress = OrganizerPerson | 1,\r\nOwnerLegal = 1 << 11,\r\nOwnerPerson = 1 << 12,\r\nOwnerAddress = OwnerLegal | 1,\r\nReceiverPerson = 1 << 13,\r\nReceiverAddress = ReceiverPerson | 1,\r\nRepresentativePerson = 1 << 14,\r\nRepresentativeAddress = RepresentativePerson | 1,\r\nRequesterPerson = 1 << 15,\r\nRequesterAddress = RequesterPerson | 1,\r\nShip = 1 << 16,\r\nSubmittedByPerson = 1 << 17,\r\nSubmittedByAddress = SubmittedByPerson | 1,\r\nSubmittedForLegal = 1 << 18,\r\nSubmittedForPerson = 1 << 19,\r\nSubmittedForAddress = SubmittedForPerson | 1,\r\nDisabledPerson = 1 << 20,");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ErrorDescription).HasComment("Описание на намерените грешки");

                entity.Property(e => e.ErrorLevel)
                    .HasDefaultValueSql("'NONE'::character varying")
                    .HasComment("Флаг дали са намерени грешки (NONE/WARN/ERROR)");

                entity.Property(e => e.ExpectedResponseContent).HasComment("Съдържание на данните в нашата система, което сравняваме с данните в RegiX");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RemoteAddress).HasComment("Адрес на RegiX ядрото");

                entity.Property(e => e.RequestContent).HasComment("Съдържание на заявката");

                entity.Property(e => e.RequestDateTime).HasComment("Дата и час на подаване на заявката");

                entity.Property(e => e.ResponseContent).HasComment("Съдържание на отговора");

                entity.Property(e => e.ResponseDateTime).HasComment("Дата и час на отговора");

                entity.Property(e => e.ResponseStatus).HasComment("Статус на отговора (Cache, OK, Error)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WebServiceName).HasComment("Име на извиканата услуга в RegiX (пр. TechnoLogica.RegiX.GraoNBDAdapter.APIService.INBDAPI.PersonDataSearch)");

                entity.HasOne(d => d.ApplicationChangeHistory)
                    .WithMany(p => p.ApplicationRegiXchecks)
                    .HasForeignKey(d => d.ApplicationChangeHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationRegiXChecks_ApplicationChangeHistory");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationRegiXchecks)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationRegiXChecks_Applications");
            });

            modelBuilder.Entity<AquacultureBabhCertificate>(entity =>
            {
                entity.HasComment("Удостоверения от БАБХ на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturebabhcertificates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.CertificateIssueDate).HasComment("Дата на издаване на удостоверението");

                entity.Property(e => e.CertificateIssuer).HasComment("Издател на удостоверението");

                entity.Property(e => e.CertificateNum).HasComment("Номер на удостоверението");

                entity.Property(e => e.CertificateValidFrom).HasComment("Начална дата на валидност на удостоверението");

                entity.Property(e => e.CertificateValidTo).HasComment("Крайна дата на валидност на удостоверението");

                entity.Property(e => e.Comments).HasComment("Коментар");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureBabhCertificates)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureBabhCertificates_AquacultureFacilityRegister");
            });

            modelBuilder.Entity<AquacultureFacilityCoordinate>(entity =>
            {
                entity.HasComment("Координати на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilitycoordinates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.Coordinates).HasComment("Координати на точката (WGS84)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PointNum).HasComment("Пореден номер на точката");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureFacilityCoordinates)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityCoordinates_AquacultureFacilityRegister");
            });

            modelBuilder.Entity<AquacultureFacilityFish>(entity =>
            {
                entity.HasComment("Развъждани видове риба и/или други водни организми");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilityfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishTypeId).HasComment("Уникален идентификатор на вид риба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureFacilityFishes)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityFishes_AquacultureFacilityRegister");

                entity.HasOne(d => d.FishType)
                    .WithMany(p => p.AquacultureFacilityFishes)
                    .HasForeignKey(d => d.FishTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityFishes_NFishes");
            });

            modelBuilder.Entity<AquacultureFacilityInstallation>(entity =>
            {
                entity.HasComment("Съоръжения към аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilityinstallations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InstallationAquariumId).HasComment("Аквариум");

                entity.Property(e => e.InstallationDamId).HasComment("Язовир");

                entity.Property(e => e.InstallationTypeId).HasComment("Вид съоръжение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureFacilityInstallations)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityInstalls_AquacultureFacilityInstalls");

                entity.HasOne(d => d.InstallationAquarium)
                    .WithMany(p => p.AquacultureFacilityInstallations)
                    .HasForeignKey(d => d.InstallationAquariumId)
                    .HasConstraintName("FK_AquaFacilityInstalls_InstallationAquariums");

                entity.HasOne(d => d.InstallationDam)
                    .WithMany(p => p.AquacultureFacilityInstallations)
                    .HasForeignKey(d => d.InstallationDamId)
                    .HasConstraintName("FK_AquaFacilityInstalls_InstallationDams");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.AquacultureFacilityInstallations)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityInstalls_NAquaInstallTypes");
            });

            modelBuilder.Entity<AquacultureFacilityRegister>(entity =>
            {
                entity.HasComment("Регистър аквакултурни стопанства");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilityregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.AquacultureStatusId).HasComment("Статус на стопанството (Application/Requested/Approved/Canceled)");

                entity.Property(e => e.Comments).HasComment("Коментари и бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HatcheryCapacity)
                    .HasPrecision(15, 2)
                    .HasComment("Капацитет на риболюпилнята (бр)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LocationDescription).HasComment("Допълнителни бележки към местоположението на аквакултурното стопанство");

                entity.Property(e => e.Name).HasComment("Име на аквакултурното стопанство");

                entity.Property(e => e.PopulatedAreaId).HasComment("Населено място, където се намира стопанството");

                entity.Property(e => e.PowerSupplyDebit)
                    .HasPrecision(10, 2)
                    .HasComment("Дебит към захранващ източник");

                entity.Property(e => e.PowerSupplyName).HasComment("Име на захранващ източник");

                entity.Property(e => e.PowerSupplyTypeId).HasComment("Вид захранващ източник");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров:  Application / Register");

                entity.Property(e => e.RegNum).HasComment("Пореден номер на регистров запис");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Получател - ЮЛ");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Получател - ФЛ");

                entity.Property(e => e.System).HasComment("Система");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено (използва се при генериране на УРОР)");

                entity.Property(e => e.TotalProductionCapacity)
                    .HasPrecision(15, 2)
                    .HasComment("Общ производствен капацитет (кг)");

                entity.Property(e => e.TotalWaterArea)
                    .HasPrecision(15, 2)
                    .HasComment("Обща водна площ (кв.м)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UrorNum).HasComment("Номер по УРОР");

                entity.Property(e => e.WaterAreaTypeId).HasComment("Вид воден обект");

                entity.Property(e => e.WaterSalinity).HasComment("Вид на стопанството според солеността на водата");

                entity.Property(e => e.WaterTemperature).HasComment("Вид на стопанството според температурата на водата");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityRegister_Applications");

                entity.HasOne(d => d.AquacultureStatus)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.AquacultureStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityRegister_NAquacultureStatuses");

                entity.HasOne(d => d.PopulatedArea)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.PopulatedAreaId)
                    .HasConstraintName("FK_AquaFacilityRegister_NPopulatedAreas");

                entity.HasOne(d => d.PowerSupplyType)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.PowerSupplyTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityRegister_NAquaculturePowerSupplyTypes");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_AquaFacilityRegister_AquacultureFacilityRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_AquaFacilityRegister_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_AquacultureFacilityRegister_Persons");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityRegister_NTerritoryUnits");

                entity.HasOne(d => d.WaterAreaType)
                    .WithMany(p => p.AquacultureFacilityRegisters)
                    .HasForeignKey(d => d.WaterAreaTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFacilityRegister_NAquacultureWaterAreaTypes");
            });

            modelBuilder.Entity<AquacultureFacilityRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilityregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Аквакултурно стопанство");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AquacultureFacilityRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.AquacultureFacilityRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.AquacultureFacilityRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityFiles_AquaFacilityRegister");
            });

            modelBuilder.Entity<AquacultureFacilityStatus>(entity =>
            {
                entity.HasComment("Статуси на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturefacilitystatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Аквакултурно стопанство");

                entity.Property(e => e.CancellationReasonId).HasComment("Вид прекратяване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DateOfChange).HasComment("Дата на прекратяване/възстановяване");

                entity.Property(e => e.Description).HasComment("Описание (свободен текст)");

                entity.Property(e => e.IsCancelled).HasComment("Флаг дали стопанството е прекратено");

                entity.Property(e => e.IssueOrderNum).HasComment("Номер на заповед");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureFacilityStatuses)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityStatuses_AquacultureFacilityRegister");

                entity.HasOne(d => d.CancellationReason)
                    .WithMany(p => p.AquacultureFacilityStatuses)
                    .HasForeignKey(d => d.CancellationReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureFacilityStatuses_NCancellationReasons");
            });

            modelBuilder.Entity<AquacultureFormFullSystemInstallation>(entity =>
            {
                entity.HasComment("Пълносистемни съоръжения към статистически формуляр за аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacultureformfullsysteminstallations_id_seq\"'::text)::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AquacultureFormId).HasComment("Аквакултурно стопанство");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InstallationTypeId).HasComment("Тип съоръжение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsInstallationUsed).HasComment("Флаг дали съоръжението се използва");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureForm)
                    .WithMany(p => p.AquacultureFormFullSystemInstallations)
                    .HasForeignKey(d => d.AquacultureFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormFullSystemInstalls_AquaeForms");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.AquacultureFormFullSystemInstallations)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormFullSystemInstalls_NAquaInstallTypes");
            });

            modelBuilder.Entity<AquacultureFormNonFullSystemInstallation>(entity =>
            {
                entity.HasComment("Непълносистемни съоръжения към статистически формуляр за аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacultureformnonfullsysteminstallations_id_seq\"'::text)::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AquacultureFormId).HasComment("Аквакултурно стопанство");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InstallationTypeId).HasComment("Тип съоръжение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsUsedForBreedingMaterial).HasComment("Флаг дали съоръжението се изпозлва за зарибителен материал");

                entity.Property(e => e.IsUsedForConsumationFish).HasComment("Флаг дали съоръжението се използва за риба за консумация");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureForm)
                    .WithMany(p => p.AquacultureFormNonFullSystemInstallations)
                    .HasForeignKey(d => d.AquacultureFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormNonFullSystemInstalls_AquaForms");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.AquacultureFormNonFullSystemInstallations)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormNonFullSystemInstalls_NAquaInstallTypes");
            });

            modelBuilder.Entity<AquacultureHatcheryEquipment>(entity =>
            {
                entity.HasComment("Технологично оборудване в риболюпилня към аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturehatcheryequipment_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Стопанство");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EquipmentTypeId).HasComment("Вид оборудване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Volume)
                    .HasPrecision(10, 2)
                    .HasComment("Обем (куб. м.)");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureHatcheryEquipments)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaHatcheryEquipment_AquacultureFacilityRegister");

                entity.HasOne(d => d.EquipmentType)
                    .WithMany(p => p.AquacultureHatcheryEquipments)
                    .HasForeignKey(d => d.EquipmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaHatcheryEquipment_NHatcheryEquipmentTypes");
            });

            modelBuilder.Entity<AquacultureInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_AquacultureInspections");

                entity.HasComment("Инспекции при първа продажба");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.AquacultureRegisterId).HasComment("Регистрирано аквакултурно стопанство");

                entity.Property(e => e.Coordinates).HasComment("Координати на точката (WGS84)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OtherFishingToolsDescription).HasComment("Други открити средства за риболов");

                entity.Property(e => e.RepresentativeComment).HasComment("Коментар на представител");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureRegister)
                    .WithMany(p => p.AquacultureInspections)
                    .HasForeignKey(d => d.AquacultureRegisterId)
                    .HasConstraintName("FK_AquacultureInspections_AquacultureFacilityRegister");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.AquacultureInspection)
                    .HasForeignKey<AquacultureInspection>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureInspections_InspectionRegister");
            });

            modelBuilder.Entity<AquacultureInstallationBasin>(entity =>
            {
                entity.HasComment("Басейни към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureinstallationbasins_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacutureInstallationId).HasComment("Съоръжение");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InstallationBasinId).HasComment("Басейн");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacutureInstallation)
                    .WithMany(p => p.AquacultureInstallationBasins)
                    .HasForeignKey(d => d.AquacutureInstallationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureInstallBasins_AquacultureFacilityInstalls");

                entity.HasOne(d => d.InstallationBasin)
                    .WithMany(p => p.AquacultureInstallationBasins)
                    .HasForeignKey(d => d.InstallationBasinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureInstallBasins_InstallationBasins");
            });

            modelBuilder.Entity<AquacultureInstallationCollector>(entity =>
            {
                entity.HasComment("Колектори към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureinstallationcollectors_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureInstallationId).HasComment("Съоръжение");

                entity.Property(e => e.CollectorTypeId).HasComment("Вид колектор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.TotalArea)
                    .HasPrecision(18, 2)
                    .HasComment("Обща площ (кв. м.)");

                entity.Property(e => e.TotalCount).HasComment("Общ брой колектори");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureInstallation)
                    .WithMany(p => p.AquacultureInstallationCollectors)
                    .HasForeignKey(d => d.AquacultureInstallationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallCollectors_AquacultureFacilityInstalls");

                entity.HasOne(d => d.CollectorType)
                    .WithMany(p => p.AquacultureInstallationCollectors)
                    .HasForeignKey(d => d.CollectorTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallCollectors_NInstallationCollectorTypes");
            });

            modelBuilder.Entity<AquacultureInstallationNetCage>(entity =>
            {
                entity.HasComment("Мрежени клетки (садки) към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureinstallationnetcages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureInstallationId).HasComment("Съоръжение");

                entity.Property(e => e.Area)
                    .HasPrecision(15, 2)
                    .HasComment("Площ (кв. м.)");

                entity.Property(e => e.Comments).HasComment("Коментари");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Height)
                    .HasPrecision(10, 2)
                    .HasComment("Височина (м)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Length)
                    .HasPrecision(10, 2)
                    .HasComment("Дължина (м)");

                entity.Property(e => e.NetCageShape).HasComment("Форма");

                entity.Property(e => e.NetCageTypeId).HasComment("Вид мрежена клетка");

                entity.Property(e => e.Radius)
                    .HasPrecision(10, 2)
                    .HasComment("Радиус (м)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Volume)
                    .HasPrecision(15, 2)
                    .HasComment("Обем (куб. м.)");

                entity.Property(e => e.Width)
                    .HasPrecision(10, 2)
                    .HasComment("Широчина (м)");

                entity.HasOne(d => d.AquacultureInstallation)
                    .WithMany(p => p.AquacultureInstallationNetCages)
                    .HasForeignKey(d => d.AquacultureInstallationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallNetCages_AquacultureFacilityInstalls");

                entity.HasOne(d => d.NetCageType)
                    .WithMany(p => p.AquacultureInstallationNetCages)
                    .HasForeignKey(d => d.NetCageTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacInstallNetCages_NInstallationNetCageTypes");
            });

            modelBuilder.Entity<AquacultureInstallationRaft>(entity =>
            {
                entity.HasComment("Рафтове към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureinstallationrafts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureInstallationId).HasComment("Съоръжение");

                entity.Property(e => e.Area)
                    .HasPrecision(15, 2)
                    .HasComment("Площ (кв. м.)");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Length)
                    .HasPrecision(10, 2)
                    .HasComment("Дължина (м)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Width)
                    .HasPrecision(10, 2)
                    .HasComment("Ширина (м)");

                entity.HasOne(d => d.AquacultureInstallation)
                    .WithMany(p => p.AquacultureInstallationRafts)
                    .HasForeignKey(d => d.AquacultureInstallationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallRafts_AquacultureFacilityInstallations");
            });

            modelBuilder.Entity<AquacultureInstallationRecirculatorySystem>(entity =>
            {
                entity.HasComment("Рециркулационни системи към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureinstallationrecirculatorysystems_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureInstallationId).HasComment("Съоръжение");

                entity.Property(e => e.Comments).HasComment("Коментари");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InstallationBasinId).HasComment("Басейн");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureInstallation)
                    .WithMany(p => p.AquacultureInstallationRecirculatorySystems)
                    .HasForeignKey(d => d.AquacultureInstallationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallRecircSystems_AquaFacilityInstalls");

                entity.HasOne(d => d.InstallationBasin)
                    .WithMany(p => p.AquacultureInstallationRecirculatorySystems)
                    .HasForeignKey(d => d.InstallationBasinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaInstallRecircSystems_InstallationBasins");
            });

            modelBuilder.Entity<AquacultureLogBookPage>(entity =>
            {
                entity.HasComment("Страници от дневник на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"aquaculturelogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BuyerPersonType).HasComment("Тип на купувача - физическо лице, юридическо лице или регистриран купувач/ЦПП");

                entity.Property(e => e.CancelationReason).HasComment("Причина за анулиране (при статус Canceled)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FillingDate).HasComment("Дата на попълване");

                entity.Property(e => e.IaraacceptanceDateTime).HasComment("Дата и час на приемане в ИАРА");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalBuyerId).HasComment("Купувач - юридическо лице");

                entity.Property(e => e.LogBookId).HasComment("Дневник");

                entity.Property(e => e.PageNum).HasComment("Номер на страница");

                entity.Property(e => e.PersonBuyerId).HasComment("Купувач - физическо лице");

                entity.Property(e => e.RegisteredBuyerId).HasComment("Регистриран купувач/ЦПП");

                entity.Property(e => e.Status).HasComment("Статус на страницата (InProgress, Submitted, Canceled, Missing)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LegalBuyer)
                    .WithMany(p => p.AquacultureLogBookPages)
                    .HasForeignKey(d => d.LegalBuyerId)
                    .HasConstraintName("FK_AquacultureLogBookPages_Legals");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.AquacultureLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureLogBookPages_LogBooks");

                entity.HasOne(d => d.PersonBuyer)
                    .WithMany(p => p.AquacultureLogBookPages)
                    .HasForeignKey(d => d.PersonBuyerId)
                    .HasConstraintName("FK_AquacultureLogBookPages_Persons");

                entity.HasOne(d => d.RegisteredBuyer)
                    .WithMany(p => p.AquacultureLogBookPages)
                    .HasForeignKey(d => d.RegisteredBuyerId)
                    .HasConstraintName("FK_AquacultureLogBookPages_BuyerRegister");
            });

            modelBuilder.Entity<AquacultureLogBookPageFile>(entity =>
            {
                entity.HasComment("Файлове към страници от дневник за аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"aquaculturelogbookpagefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от дневник за аквакултурно стопанство");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AquacultureLogBookPageFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureLogBookPageFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.AquacultureLogBookPageFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureLogBookPageFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.AquacultureLogBookPageFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureLogBookPageFiles_AquacultureLogBookPages");
            });

            modelBuilder.Entity<AquacultureOvosCertificate>(entity =>
            {
                entity.HasComment("Разрешителни по ОВОС на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureovoscertificates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.CertificateIssueDate).HasComment("Дата на издаване на разрешителното");

                entity.Property(e => e.CertificateIssuer).HasComment("Издател на разрешителното");

                entity.Property(e => e.CertificateNum).HasComment("Номер на разрешителното");

                entity.Property(e => e.CertificateValidFrom).HasComment("Начална дата на валидност на разрешителното");

                entity.Property(e => e.CertificateValidTo).HasComment("Крайна дата на валидност на разрешителното");

                entity.Property(e => e.Comments).HasComment("Коментар");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureOvosCertificates)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacultureOvosCertificates_AquacultureFacilityRegister");
            });

            modelBuilder.Entity<AquacultureUsageDocument>(entity =>
            {
                entity.HasComment("Документи за ползване на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquacultureusagedocuments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификтор на аквакултурно стопанство");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UsageDocumentId).HasComment("Документ за ползване");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureUsageDocuments)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaUsageDocuments_AquacultureFacilityRegister");

                entity.HasOne(d => d.UsageDocument)
                    .WithMany(p => p.AquacultureUsageDocuments)
                    .HasForeignKey(d => d.UsageDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaUsageDocuments_UsageDocuments");
            });

            modelBuilder.Entity<AquacultureWaterLawCertificate>(entity =>
            {
                entity.HasComment("Разрешителни на аквакултурно стопанство по Закона за водите");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"aquaculturewaterlawcertificates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Уникален идентификатор на аквакултурно стопанство");

                entity.Property(e => e.CertificateIssuer).HasComment("Издател на разрешителното");

                entity.Property(e => e.CertificateNum).HasComment("Номер на разрешителното");

                entity.Property(e => e.CertificateTypeId).HasComment("Уникален идентификатор на тип разрешително по Закона за водите");

                entity.Property(e => e.CertificateValidFrom).HasComment("Начална дата на валидност на разрешителното");

                entity.Property(e => e.CertificateValidTo).HasComment("Крайна дата на валидност на разрешителното");

                entity.Property(e => e.Comments).HasComment("Коментар");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacultureWaterLawCertificates)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaWaterLawCertificates_AquaFacilityRegister");

                entity.HasOne(d => d.CertificateType)
                    .WithMany(p => p.AquacultureWaterLawCertificates)
                    .HasForeignKey(d => d.CertificateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaWaterLawCertificates_NWaterLawCertificateTypes");
            });

            modelBuilder.Entity<AquacutlureForm>(entity =>
            {
                entity.HasComment("ИСФ за аквакултурни стопанства");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacutlureforms_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BreedingMaterialDeathRate).HasComment("Смъртност на зарибителния материал (%)");

                entity.Property(e => e.BroodstockDeathRate).HasComment("Смъртност на маточното стадо (%)");

                entity.Property(e => e.ConsumationFishDeathRate).HasComment("Смъртност на рибата за консумация (%)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GivenMedicineNotes).HasComment("Бележки за приложени препарати или лечение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.StatisticalFormId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.AquacutlureForms)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .HasConstraintName("FK_AquacutlureForms_AquacultureFacilityRegister");

                entity.HasOne(d => d.StatisticalForm)
                    .WithOne(p => p.AquacutlureForm)
                    .HasForeignKey<AquacutlureForm>(d => d.StatisticalFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacutlureForms_StatisticalFormsRegister");
            });

            modelBuilder.Entity<AquacutlureFormBroodstock>(entity =>
            {
                entity.HasComment("Маточно стадо (разплодници) за аквакултирни ИСФ");

                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacutlureformbroodstocks_id_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FemaleAge).HasComment("Женски индивиди - възраст (год)");

                entity.Property(e => e.FemaleCount).HasComment("Женски индивиди - брой");

                entity.Property(e => e.FemaleWeight).HasComment("Женски индивиди - тегло (гр)");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.InstallationTypeId).HasComment("За тип съоражение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MaleAge).HasComment("Възраст (год)");

                entity.Property(e => e.MaleCount).HasComment("Мъжки индивиди - брой");

                entity.Property(e => e.MaleWeight).HasComment("Мъжки индивиди - тегло гр");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureForm)
                    .WithMany(p => p.AquacutlureFormBroodstocks)
                    .HasForeignKey(d => d.AquacultureFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormBrood_AquacutlureForms");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.AquacutlureFormBroodstocks)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacutlureFormBroodstocks_NFishes");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.AquacutlureFormBroodstocks)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormBrood_NAquacultureInstallationTypes");
            });

            modelBuilder.Entity<AquacutlureFormGivenMedicine>(entity =>
            {
                entity.HasComment("Приложени препарати или лечение");

                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacutlureformgivenmedicines_id_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GivenGrams).HasComment("Мъжки индивиди - брой");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Medicine).HasComment("Вид лекарство");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureForm)
                    .WithMany(p => p.AquacutlureFormGivenMedicines)
                    .HasForeignKey(d => d.AquacultureFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaMedicines_AquacutlureForms");
            });

            modelBuilder.Entity<AquacutlureFormStockingMaterial>(entity =>
            {
                entity.HasComment("Произведени, продадени и нереализирани количества за аквакултирни ИСФ");

                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"RInfStat\".\"aquacutlureformstockingmaterials_id_seq\"'::text)::regclass)");

                entity.Property(e => e.CaviarForConsumptionWeight).HasComment("Хайвер за консумация (кг)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.ForConsumptionWeight).HasComment("За консумация (кг)");

                entity.Property(e => e.InstallationTypeId).HasComment("За тип съоражение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OneStripBreedingMaterialCount).HasComment("Еднолентен материал (бр.)");

                entity.Property(e => e.OneStripBreedingMaterialWeight).HasComment("Еднолентен материал (ср.т.гр)");

                entity.Property(e => e.OneYearBreedingMaterialCount).HasComment("Едногодишен материал (бр)");

                entity.Property(e => e.OneYearBreedingMaterialWeight).HasComment("Едногодишен материал (ср.т.гр.)");

                entity.Property(e => e.ReportType).HasComment("Вид отчет (Produced/Sold/Unrealized)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureForm)
                    .WithMany(p => p.AquacutlureFormStockingMaterials)
                    .HasForeignKey(d => d.AquacultureFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormStMat_AquacutlureForms");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.AquacutlureFormStockingMaterials)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquacutlureFormStockingMaterials_NFishes");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.AquacutlureFormStockingMaterials)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AquaFormStMat_NAquacultureInstallationTypes");
            });

            modelBuilder.Entity<AuanconfiscatedFish>(entity =>
            {
                entity.HasComment("Конфискувана риба към АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanconfiscatedfish_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicanceId).HasComment("Конфискувано приспособление");

                entity.Property(e => e.AuanregisterId).HasComment("АУАН");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.ConfiscationActionId).HasComment("Предприето действие");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PenalDecreeRegisterId).HasComment("Наказателно постановление");

                entity.Property(e => e.TerritoryUnitId).HasComment("ТЗ за съхранение");

                entity.Property(e => e.TurbotSizeGroupId).HasComment("Размерна група за калкан");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Weight)
                    .HasPrecision(10, 2)
                    .HasComment("Тегло (кг)");

                entity.HasOne(d => d.Applicance)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.ApplicanceId)
                    .HasConstraintName("FK_AUANConfiscatedFish_NConfiscatedAppliances");

                entity.HasOne(d => d.Auanregister)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.AuanregisterId)
                    .HasConstraintName("FK_AUANConfiscatedFish_AUANRegister");

                entity.HasOne(d => d.ConfiscationAction)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.ConfiscationActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANConfiscatedFish_NConfiscationActions");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.FishId)
                    .HasConstraintName("FK_AUANConfiscatedFish_NFishes");

                entity.HasOne(d => d.PenalDecreeRegister)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.PenalDecreeRegisterId)
                    .HasConstraintName("FK_AUANConfiscatedFish_PenalDecreesRegister");

                entity.HasOne(d => d.TurbotSizeGroup)
                    .WithMany(p => p.AuanconfiscatedFishes)
                    .HasForeignKey(d => d.TurbotSizeGroupId)
                    .HasConstraintName("FK_AUANConfiscatedFish_NTurbotSizeGroups");
            });

            modelBuilder.Entity<AuanconfiscatedFishingGear>(entity =>
            {
                entity.HasComment("Конфискувани риболовни уреди към АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanconfiscatedfishinggear_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AuanregisterId).HasComment("АУАН");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.ConfiscationActionId).HasComment("Предприето действие");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Length).HasComment("Дължина");

                entity.Property(e => e.NetEyeSize).HasComment("Размер на окото");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Auanregister)
                    .WithMany(p => p.AuanconfiscatedFishingGears)
                    .HasForeignKey(d => d.AuanregisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANConfiscatedFishingGear_AUANRegister");

                entity.HasOne(d => d.ConfiscationAction)
                    .WithMany(p => p.AuanconfiscatedFishingGears)
                    .HasForeignKey(d => d.ConfiscationActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANConfiscatedFishingGear_NConfiscationActions");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.AuanconfiscatedFishingGears)
                    .HasForeignKey(d => d.FishingGearId)
                    .HasConstraintName("FK_AUANConfiscatedFishingGear_NFishingGears");
            });

            modelBuilder.Entity<Auanregister>(entity =>
            {
                entity.HasComment("Регистър АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AuanNum).HasComment("№ на АУАН");

                entity.Property(e => e.ConstatationComments).HasComment("Бележки относно констатациите");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryId).HasComment("Връчване");

                entity.Property(e => e.DraftDate).HasComment("Дата на съставяне");

                entity.Property(e => e.HasObjection).HasComment("Постъпило възражение на АУАН");

                entity.Property(e => e.InspectedLegalId).HasComment("Проверявано юридическо лице");

                entity.Property(e => e.InspectedPersonId).HasComment("Проверявано физическо лице");

                entity.Property(e => e.InspectedPersonWorkPlace).HasComment("Месторабота на проверявано физическо лице");

                entity.Property(e => e.InspectedPersonWorkPosition).HasComment("Длъжност на проверявано физическо лице");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LocationDescription).HasComment("Описание на проверявания обект");

                entity.Property(e => e.ObjectionDate).HasComment("Дата на възражение");

                entity.Property(e => e.OffenderComments).HasComment("Бележки от нарушителя");

                entity.Property(e => e.ResolutionDate).HasComment("Дата на резолюцията");

                entity.Property(e => e.ResolutionNum).HasComment("Номер на резолюцията");

                entity.Property(e => e.ResolutionType).HasComment("Прекратен или частично прекратен/изменен");

                entity.Property(e => e.StatusId).HasComment("Статус");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.Auanregisters)
                    .HasForeignKey(d => d.DeliveryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANRegister_InspDelivery");

                entity.HasOne(d => d.InspectedLegal)
                    .WithMany(p => p.Auanregisters)
                    .HasForeignKey(d => d.InspectedLegalId)
                    .HasConstraintName("FK_AUANRegister_Legals");

                entity.HasOne(d => d.InspectedPerson)
                    .WithMany(p => p.Auanregisters)
                    .HasForeignKey(d => d.InspectedPersonId)
                    .HasConstraintName("FK_AUANRegister_Persons_Inspected");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.Auanregisters)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANRegister_InspectionsRegister");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Auanregisters)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_AUANRegister_NAUANStatuses");
            });

            modelBuilder.Entity<AuanregisterFile>(entity =>
            {
                entity.HasComment("Файлове към АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("АУАН");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AuanregisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.AuanregisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.AuanregisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANRegisterFiles_AUANRegister");
            });

            modelBuilder.Entity<AuanviolatedRegulation>(entity =>
            {
                entity.HasComment("Нарушени разпоредби към АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanviolatedregulations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Article).HasComment("Член");

                entity.Property(e => e.AuanregisterId).HasComment("АУАН");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Letter).HasComment("Буква");

                entity.Property(e => e.Paragraph).HasComment("Алинея");

                entity.Property(e => e.PenalDecreeRegisterId).HasComment("Наказателно постановление");

                entity.Property(e => e.RegulationType).HasComment("Тип разпоредба");

                entity.Property(e => e.Section).HasComment("Точка");

                entity.Property(e => e.SectionType).HasComment("В коя част на документа се описват тези разпоредби (в 1 НП може да има на няколко места)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Auanregister)
                    .WithMany(p => p.AuanviolatedRegulations)
                    .HasForeignKey(d => d.AuanregisterId)
                    .HasConstraintName("FK_AUANViolatedRegulations_AUANRegister");

                entity.HasOne(d => d.PenalDecreeRegister)
                    .WithMany(p => p.AuanviolatedRegulations)
                    .HasForeignKey(d => d.PenalDecreeRegisterId)
                    .HasConstraintName("FK_AUANViolatedRegulations_PenalDecreesRegister");
            });

            modelBuilder.Entity<Auanwitness>(entity =>
            {
                entity.HasComment("Свидетели в АУАН");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"auanwitnesses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес");

                entity.Property(e => e.AuanregisterId).HasComment("Свидетел към АУАН");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DateOfBirth).HasComment("Дата на раждане");

                entity.Property(e => e.InspDeliveryId).HasComment("Свидетел към връчване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OrderNum).HasDefaultValueSql("1");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WitnessNames).HasComment("Имена");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.Auanwitnesses)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUANWitnesses_Addresses");

                entity.HasOne(d => d.Auanregister)
                    .WithMany(p => p.Auanwitnesses)
                    .HasForeignKey(d => d.AuanregisterId)
                    .HasConstraintName("FK_AUANWitnesses_AUANRegister");

                entity.HasOne(d => d.InspDelivery)
                    .WithMany(p => p.Auanwitnesses)
                    .HasForeignKey(d => d.InspDeliveryId)
                    .HasConstraintName("FK_AUANWitnesses_InspDelivery");
            });

            modelBuilder.Entity<AuditLog>(entity =>
            {
                entity.HasComment("Детайлен лог на промените по обектите в базата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"auditlog_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Action).HasComment("Действие (контролер/метод)");

                entity.Property(e => e.ActionType).HasComment("Тип действие (Insert/Update/Delete)");

                entity.Property(e => e.Application).HasComment("Приложение в системата (Area)");

                entity.Property(e => e.BrowserInfo).HasComment("Информация за браузера на потребителя");

                entity.Property(e => e.Ipaddress).HasComment("IP адрес на потребителя");

                entity.Property(e => e.LogDate).HasComment("Дата на действие");

                entity.Property(e => e.NewValue).HasComment("Нова стойност");

                entity.Property(e => e.OldValue).HasComment("Стара стойност");

                entity.Property(e => e.SchemaName).HasComment("Име на схема в базата");

                entity.Property(e => e.TableId).HasComment("Първичен ключ на записа, който е променен");

                entity.Property(e => e.TableName).HasComment("Таблица, в която е направена промяната");

                entity.Property(e => e.Username).HasComment("Потребител");
            });

            modelBuilder.Entity<BuyerLicense>(entity =>
            {
                entity.HasComment("Удостоверения от други институции (БАБХ, регистрация на транспортно средство, ..)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerlicenses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BuyerId).HasComment("Регистриран купувач");

                entity.Property(e => e.Comment).HasComment("Коментар");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DocIssuer).HasComment("Издател ");

                entity.Property(e => e.DocNum).HasComment("Номер на документ");

                entity.Property(e => e.DocValidFrom).HasComment("Валидност от");

                entity.Property(e => e.DocValidTo).HasComment("Валидност до");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsUnlimited).HasComment("Флаг дали е безсрочен");

                entity.Property(e => e.IssueDate).HasComment("Дата на издаване");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.BuyerLicenses)
                    .HasForeignKey(d => d.BuyerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RCPP_BuyerLicenses_RCPP_BuyersRegister");

                entity.HasOne(d => d.BuyerLicenceType)
                    .WithMany(p => p.BuyerLicenses)
                    .HasForeignKey(d => d.BuyerLicenceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerLicenses_NBuyerLicenseTypes");
            });

            modelBuilder.Entity<BuyerLicenseFile>(entity =>
            {
                entity.HasComment("Прикачени файлове по разрешения по ОВОС от Закон за опазване на околната среда");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerlicensefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.BuyerLicenseFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerLicenseFiles_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.BuyerLicenseFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerLicenseFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.BuyerLicenseFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerLicenseFiles_BuyerLicenses");
            });

            modelBuilder.Entity<BuyerPremiseUsageDocument>(entity =>
            {
                entity.HasComment("Основания за ползване на помещение от купувач");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerpremiseusagedocuments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BuyerId).HasComment("Регистриран купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UsageDocumentId).HasComment("Документ за ползване");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.BuyerPremiseUsageDocuments)
                    .HasForeignKey(d => d.BuyerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RCPP_BuyerUsageDocuments_RCPP_BuyersRegister");

                entity.HasOne(d => d.UsageDocument)
                    .WithMany(p => p.BuyerPremiseUsageDocuments)
                    .HasForeignKey(d => d.UsageDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerPremiseUsageDocuments_UsageDocuments");
            });

            modelBuilder.Entity<BuyerRegister>(entity =>
            {
                entity.HasComment("Регистър купувачи и центрове за първа продажба");

                entity.HasIndex(e => new { e.RecordType, e.BuyerTypeId, e.SubmittedForLegalId }, "IXUK_RCPP_BuyersRegister_LegalOwner")
                    .IsUnique()
                    .HasFilter("((\"CreatedBy\")::text <> 'MigrateScript-IARA-Old-cpp'::text)");

                entity.HasIndex(e => new { e.RecordType, e.BuyerTypeId, e.SubmittedForPersonId }, "IXUK_RCPP_BuyersRegister_PersonOwner")
                    .IsUnique()
                    .HasFilter("((\"CreatedBy\")::text <> 'MigrateScript-IARA-Old-cpp'::text)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AgentId).HasComment("Агент (за рег. купувач)");

                entity.Property(e => e.AnnualTurnoverBgn)
                    .HasPrecision(10, 2)
                    .HasComment("Годишен оборот (използва се за кръстосани проверки)");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.BuyerStatusId).HasComment("Статус на купувач (Заявен, Активен, Прекратен)");

                entity.Property(e => e.BuyerTypeId).HasComment("Тип купувач (регистриран, ЦПП)");

                entity.Property(e => e.Comments).HasComment("Коментари и бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasUtility).HasComment("Флаг дали купувачът има магазин");

                entity.Property(e => e.HasVehicle).HasComment("Флаг дали купувачът има транспортно средство");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsAgentSameAsSubmittedBy).HasComment("Флаг дали агентът (при купувач) съвпада със заявителя на услугата");

                entity.Property(e => e.IsAgentSameAsSubmittedForCustodianOfProperty).HasComment("Флаг дали агентът (при купувач) съвпада с материално отговорното лице на получателя на услугата");

                entity.Property(e => e.IsOrganizingPersonSameAsSubmittedBy).HasComment("Флаг дали организаторът (при ЦПП) съвпада със заявителя на услугата)");

                entity.Property(e => e.OrganizingPersonId).HasComment("Организатор (за ЦПП)");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.RegistrationNum).HasComment("Регистрационен номер ");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Титуляр - юридическо  лице");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Титуляр, ако е физическо лице");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено, към което е регистриран купувачът");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UrrorNum).HasComment("Номер по УРОР генериран по формата на наредбата");

                entity.Property(e => e.UtilityAddressId).HasComment("Адрес на помещението");

                entity.Property(e => e.UtilityName).HasComment("Наименование на обект/магазин");

                entity.Property(e => e.VehicleNumber).HasComment("Номер на транспортно средство, при налично такова");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyersRegister_Applications");

                entity.HasOne(d => d.BuyerStatus)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.BuyerStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerRegister_NBuyerStatuses");

                entity.HasOne(d => d.BuyerType)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.BuyerTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RCPP_BuyersRegister_RCPP_NBuyerTypes");

                entity.HasOne(d => d.OrganizingPerson)
                    .WithMany(p => p.BuyerRegisterOrganizingPeople)
                    .HasForeignKey(d => d.OrganizingPersonId)
                    .HasConstraintName("FK_RCPP_BuyersRegister_ISS_Persons");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_BuyersRegister_BuyersRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_RCPP_BuyersRegister_ISS_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.BuyerRegisterSubmittedForPeople)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_BuyerRegister_Persons");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_BuyerRegister_NTerritoryUnits");

                entity.HasOne(d => d.UtilityAddress)
                    .WithMany(p => p.BuyerRegisters)
                    .HasForeignKey(d => d.UtilityAddressId)
                    .HasConstraintName("FK_BuyersRegister_Addresses");
            });

            modelBuilder.Entity<BuyerRegisterFile>(entity =>
            {
                entity.HasComment("Прикачени файлове по регистър купувачи");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.BuyerRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RCPP_BuyerRegisterFiles_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.BuyerRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.BuyerRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RCPP_BuyerRegisterFiles_RCPP_BuyersRegister");
            });

            modelBuilder.Entity<BuyerRegisterStatus>(entity =>
            {
                entity.HasComment("Статуси на прекратяване и възстановяване на купувач и ЦПП");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"buyerregisterstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BuyersRegisterId).HasComment("Купувач");

                entity.Property(e => e.CancellationReasonId).HasComment("Вид прекратяване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DateOfChange).HasComment("Дата на прекратяване/възстановяване");

                entity.Property(e => e.Description).HasComment("Описание (свободен текст)");

                entity.Property(e => e.IsCancelled).HasComment("Флаг дали стопанството е прекратено");

                entity.Property(e => e.IssueOrderNum).HasComment("Номер на заповед");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.BuyersRegister)
                    .WithMany(p => p.BuyerRegisterStatuses)
                    .HasForeignKey(d => d.BuyersRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerRegisterStatuses_BuyerRegister");

                entity.HasOne(d => d.CancellationReason)
                    .WithMany(p => p.BuyerRegisterStatuses)
                    .HasForeignKey(d => d.CancellationReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuyerRegisterStatuses_NCancellationReasons");
            });

            modelBuilder.Entity<CancellationDetail>(entity =>
            {
                entity.HasComment("Данни за прекратяване/заличаване/отказ на регистровия запис");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"cancellationdetails_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CancelDate).HasComment("Дата на прекратяване");

                entity.Property(e => e.CancelReasonId).HasComment("Тип причина за прекратяване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Основание/Причина за отказа - свободен текст");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IssueOrderNum).HasComment("Номер на заповед за прекратяване");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CancelReason)
                    .WithMany(p => p.CancellationDetails)
                    .HasForeignKey(d => d.CancelReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CancellationDetails_NCancellationReasons");
            });

            modelBuilder.Entity<CapacityCertificatesRegister>(entity =>
            {
                entity.HasComment("Удостоверения за свободен риболовен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"capacitycertificatesregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CertificateNum).HasComment("Номер на удостоверение (само при Register запис)");

                entity.Property(e => e.CertificateValidFrom).HasComment("Начална дата на валидност на удостоверението");

                entity.Property(e => e.CertificateValidTo).HasComment("Крайна дата на валидност на удостоверението (3 години след началната)");

                entity.Property(e => e.Comments).HasComment("Коментари и бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GrossTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Бруто тонаж");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице титуляр на удостоверението");

                entity.Property(e => e.MainEnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност на главния двигател (kW)");

                entity.Property(e => e.PersonId).HasComment("Физическо лице титуляр на удостоверението");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.CapacityCertificatesRegisters)
                    .HasForeignKey(d => d.LegalId)
                    .HasConstraintName("FK_CapacityCertificatesRegister_Legals");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CapacityCertificatesRegisters)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_CapacityCertificatesRegister_Persons");
            });

            modelBuilder.Entity<CapacityChangeHistory>(entity =>
            {
                entity.HasComment("История на промени в риболовен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"capacitychangehistory_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AcquiredFishingCapacityId).HasComment("Осигурен риболовен капацитет при увеличаване");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CapacityCertificateTransferId).HasComment("Удостоверение за капацитет при прехвърляне");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DateOfChange)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Дата на промяната");

                entity.Property(e => e.GrossTonnageChange)
                    .HasPrecision(10, 2)
                    .HasComment("Бруто тонаж за увеличаване/намаляване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PowerChange)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност за увеличаване/намаляване");

                entity.Property(e => e.ReasonOfChange).HasComment("Причина за промяна");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.ShipCapacityId).HasComment("Корабен капацитет при увеличаване и намаляване");

                entity.Property(e => e.TypeOfChange).HasComment("Тип на промяната (Increase, Decrease, Transfer, Duplicate)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AcquiredFishingCapacity)
                    .WithMany(p => p.CapacityChangeHistories)
                    .HasForeignKey(d => d.AcquiredFishingCapacityId)
                    .HasConstraintName("FK_CapacityChangeHistory_AcquiredCapacityRegister");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.CapacityChangeHistories)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_CapacityChangeHistory_Applications");

                entity.HasOne(d => d.CapacityCertificateTransfer)
                    .WithMany(p => p.CapacityChangeHistories)
                    .HasForeignKey(d => d.CapacityCertificateTransferId)
                    .HasConstraintName("FK_CapacityChangeHistory_CapacityCertificatesReg_Transfer");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_CapacityChangeHistory_CapacityChangeHistory");

                entity.HasOne(d => d.ShipCapacity)
                    .WithMany(p => p.CapacityChangeHistories)
                    .HasForeignKey(d => d.ShipCapacityId)
                    .HasConstraintName("FK_CapacityChangeHistory_ShipCapacityRegister");
            });

            modelBuilder.Entity<CapacityChangeHistoryCertificate>(entity =>
            {
                entity.HasComment("Удостоверения при промяна на риболовен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"capacitychangehistorycertificates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CapacityCertificate)
                    .WithMany(p => p.CapacityChangeHistoryCertificates)
                    .HasForeignKey(d => d.CapacityCertificateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CapacityChngHistCert_CapacityCertificatesRegister");

                entity.HasOne(d => d.CapacityChangeHistory)
                    .WithMany(p => p.CapacityChangeHistoryCertificates)
                    .HasForeignKey(d => d.CapacityChangeHistoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CapacityChngHistCert_CapacityChangeHistory");
            });

            modelBuilder.Entity<CatchQuota>(entity =>
            {
                entity.HasComment("Квоти за улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"catchquotas_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба, за която е квотата");

                entity.Property(e => e.HasShipQuotas).HasComment("Флаг дали за тази квота има разпределение по кораби");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PeriodEnd).HasComment("Край на период за квота");

                entity.Property(e => e.PeriodStart).HasComment("Начало на период за квота");

                entity.Property(e => e.QuotaSize).HasComment("Количество улов");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.CatchQuota)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchQuotas_NFishes");
            });

            modelBuilder.Entity<CatchQuotaFile>(entity =>
            {
                entity.HasComment("Типове кораби в корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"catchquotafiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.CatchQuotaFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RQuo_CatchQuotaFiles_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.CatchQuotaFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchQuotaFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.CatchQuotaFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RQuo_CatchQuotaFiles_RQuo_CatchQuotas");
            });

            modelBuilder.Entity<CatchQuotaUnloadPort>(entity =>
            {
                entity.HasComment("Разрешени пристанища за разтоварване на дадена квота");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"catchquotaunloadports_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchQuotaId).HasComment("Квота");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PortId).HasComment("Пристанище");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchQuota)
                    .WithMany(p => p.CatchQuotaUnloadPorts)
                    .HasForeignKey(d => d.CatchQuotaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchQuotaUnloadPorts_CatchQuotas");

                entity.HasOne(d => d.Port)
                    .WithMany(p => p.CatchQuotaUnloadPorts)
                    .HasForeignKey(d => d.PortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchQuotaUnloadPorts_NPorts");
            });

            modelBuilder.Entity<CatchQuotasHist>(entity =>
            {
                entity.HasComment("Квоти за улов - история на промените");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"catchquotas_hist_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.PeriodEnd).HasComment("Край на период за квота");

                entity.Property(e => e.PeriodStart).HasComment("Начало на период за квота");

                entity.Property(e => e.QuotaIncrement).HasComment("Промяна в квотата");

                entity.Property(e => e.QuotaSize).HasComment("Количество улов");

                entity.Property(e => e.UpdateReason).HasComment("Основание за промяна на статуса (указ № и др.)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.CatchQuota)
                    .WithMany(p => p.CatchQuotasHists)
                    .HasForeignKey(d => d.CatchQuotaId)
                    .HasConstraintName("FK_RQuo_CatchQuotas_Hist_RQuo_CatchQuotas");
            });

            modelBuilder.Entity<CatchRecord>(entity =>
            {
                entity.HasComment("Данни за улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"catchrecords_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchOperCount).HasComment("Брой риболовни операции");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Depth).HasComment("Дълбочина");

                entity.Property(e => e.GearEntryTime).HasComment("Дата и час на поставяне на уреда");

                entity.Property(e => e.GearExitTime).HasComment("Дата и час на изтегляне на уреда");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.TransboardFromShipId).HasComment("Кораб от който е получен улова при трансбордиране");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LogBookPage)
                    .WithMany(p => p.CatchRecords)
                    .HasForeignKey(d => d.LogBookPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_CatchRecords_CatchSales_LogBookPages");

                entity.HasOne(d => d.TransboardFromShip)
                    .WithMany(p => p.CatchRecords)
                    .HasForeignKey(d => d.TransboardFromShipId)
                    .HasConstraintName("FK_CatchRecords_ShipRegister");
            });

            modelBuilder.Entity<CatchRecordFish>(entity =>
            {
                entity.HasComment("Данни за улов за вид риба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"catchrecordfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchRecordId).HasComment("Данни за улов");

                entity.Property(e => e.CatchSizeId).HasComment("Размер на рибата - LSC, BMS");

                entity.Property(e => e.CatchTypeId).HasComment("Тип на действието, направено с уова - задържан на борда, изхвърлен..");

                entity.Property(e => e.CatchZoneId).HasComment("Квадрант на улова");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба / морски организъм");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsContinentalCatch).HasComment("Флаг дали е континентален риболов");

                entity.Property(e => e.Quantity)
                    .HasPrecision(10, 2)
                    .HasComment("Количество улов в КГ");

                entity.Property(e => e.SturgeonGender).HasComment("Пол за есетровите риби");

                entity.Property(e => e.SturgeonSize)
                    .HasPrecision(10, 2)
                    .HasComment("Размер за есетровите риби");

                entity.Property(e => e.SturgeonWeightKg)
                    .HasPrecision(10, 2)
                    .HasComment("Тегло на есетровите риби в килограми");

                entity.Property(e => e.ThirdCountryCatchZone).HasComment("Риболовна зона на трета държава");

                entity.Property(e => e.TurbotCount).HasComment("Брой калкани");

                entity.Property(e => e.TurbotSizeGroupId).HasComment("Размерна група на калкан");

                entity.Property(e => e.UnloadedQuantity)
                    .HasPrecision(10, 2)
                    .HasComment("Разтоварено/трансбордирано количество улов (участващ вече в декларация за произход)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchRecord)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.CatchRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_CatchRecordFishes_CatchSales_CatchRecords");

                entity.HasOne(d => d.CatchSize)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.CatchSizeId)
                    .HasConstraintName("FK_CatchRecordFishes_NFishSizes");

                entity.HasOne(d => d.CatchType)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.CatchTypeId)
                    .HasConstraintName("FK_CatchRecordFishes_NCatchTypes");

                entity.HasOne(d => d.CatchZone)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.CatchZoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_CatchRecordFishes_CatchSales_NCatchZones");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_CatchRecordFishes_ISS_NFishes");

                entity.HasOne(d => d.TurbotSizeGroup)
                    .WithMany(p => p.CatchRecordFishes)
                    .HasForeignKey(d => d.TurbotSizeGroupId)
                    .HasConstraintName("FK_CatchRecordFishes_NTurbotSizeGroups");
            });

            modelBuilder.Entity<ConstativeProtocolInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_ConstativeProtocolInspections");

                entity.HasComment("Констативни протоколи от старата система");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectorName).HasComment("Имена на инспектор");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Location).HasComment("Местоположение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Witness1Name).HasComment("Свидетел");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.ConstativeProtocolInspection)
                    .HasForeignKey<ConstativeProtocolInspection>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConstativeProtocolInspections_InspectionRegister");
            });

            modelBuilder.Entity<CountryCapacityRegister>(entity =>
            {
                entity.HasComment("Пределен риболовен капацитет");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"countrycapacityregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност (kW)");

                entity.Property(e => e.GrossTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Бруто тонаж");

                entity.Property(e => e.Regulation).HasComment("Регламент на ЕС");

                entity.Property(e => e.RegulationDate).HasComment("Дата на регламента");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<CrossCheck>(entity =>
            {
                entity.HasComment("Кръстосани проверки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Checks\".\"crosschecks_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AutoExecFrequency)
                    .HasDefaultValueSql("'Manual'::character varying")
                    .HasComment("Честота на автоматично изпълнение (Repeating=на интервал минути / Daily= веднъж на ден / Weekly=веднъж на седмица / Monthly= веднъж на месец / Manual= само ръчно изпълнение / Manual-ISS= само ИСС може да я изпълнява като валидация).");

                entity.Property(e => e.CheckDescription).HasComment("Описание на проверката");

                entity.Property(e => e.CheckSource).HasComment("Проверка на източника на данни (описание)");

                entity.Property(e => e.CheckSourceColumns).HasComment("Проверка на полета с данни (описание)");

                entity.Property(e => e.CheckTableName).HasComment("Име на таблица за проверяване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataSource).HasComment("Източник на данни за задействане (описание)");

                entity.Property(e => e.DataSourceColumns).HasComment("Описание на колони за полета за задействане");

                entity.Property(e => e.ErrorLevel).HasComment("Ниво на грешката");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LastExecDateTime).HasComment("Дата и час на последно изпълнение");

                entity.Property(e => e.LastExecRowCount).HasComment("Брой намерени редове от последното изпъление");

                entity.Property(e => e.Puprose).HasComment("Цел на проверката");

                entity.Property(e => e.ReportId).HasComment("Данни за справка за изпълнение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Report)
                    .WithOne(p => p.CrossCheck)
                    .HasForeignKey<CrossCheck>(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossChecks_Reports");
            });

            modelBuilder.Entity<CrossCheckResult>(entity =>
            {
                entity.HasComment("Резултати от кръстосани проверки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Checks\".\"crosscheckresults_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AssignedUserId).HasComment("Потребител, отговорен за корекцията на грешката");

                entity.Property(e => e.CheckId).HasComment("Кръстосана проверка");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ErrorDescription).HasComment("Описание на грешката");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит (май е излишно тук)");

                entity.Property(e => e.PageCode).HasComment("Име на таблица за проверка");

                entity.Property(e => e.RecordUid).HasComment("Уникален идентификатор в рамките на TableID (може да е null, ако в рамките на TableID има само един запис)");

                entity.Property(e => e.ResolutionDetails).HasComment("Пояснения по разрешаването на проверката (коригирана декларация, издаден АУАН и др.)");

                entity.Property(e => e.ResolutionId).HasComment("Статус на резултат от кръстосана проверка");

                entity.Property(e => e.TableId).HasComment("Идентификатор на записа с резултат от проверка");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.AssignedUser)
                    .WithMany(p => p.CrossCheckResults)
                    .HasForeignKey(d => d.AssignedUserId)
                    .HasConstraintName("FK_CrossCheckResults_Users");

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.CrossCheckResults)
                    .HasForeignKey(d => d.CheckId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Check_CrossCheckResults_Check_CrossChecks");

                entity.HasOne(d => d.Resolution)
                    .WithMany(p => p.CrossCheckResults)
                    .HasForeignKey(d => d.ResolutionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CrossCheckResults_NCheckResolutions");
            });

            modelBuilder.Entity<DuplicatesRegister>(entity =>
            {
                entity.HasComment("Дубликати");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"duplicatesregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.BuyerId).HasComment("Купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishermanId).HasComment("Правоспособен рибар");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PermitId).HasComment("РСР");

                entity.Property(e => e.PermitLicenceId).HasComment("УСР");

                entity.Property(e => e.Reason).HasComment("Причина");

                entity.Property(e => e.RecordType).HasDefaultValueSql("'Application'::character varying");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Получател - ЮЛ");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Получател - ФЛ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DuplicatesRegister_Applications");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.BuyerId)
                    .HasConstraintName("FK_DuplicatesRegister_BuyerRegister");

                entity.HasOne(d => d.Fisherman)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.FishermanId)
                    .HasConstraintName("FK_DuplicatesRegister_FishermenRegister");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.PermitId)
                    .HasConstraintName("FK_DuplicatesRegister_PermitRegister");

                entity.HasOne(d => d.PermitLicence)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.PermitLicenceId)
                    .HasConstraintName("FK_DuplicatesRegister_PermitLicensesRegister");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_DuplicatesRegister_DuplicatesRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_DuplicatesRegister_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.DuplicatesRegisters)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_DuplicatesRegister_Persons");
            });

            modelBuilder.Entity<DuplicatesRegisterFile>(entity =>
            {
                entity.HasComment("Файлове за дубликати");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"duplicatesregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Дубликат");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.DuplicatesRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DuplicatesRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.DuplicatesRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DuplicatesRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.DuplicatesRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DuplicatesRegisterFiles_DuplicatesRegister");
            });

            modelBuilder.Entity<EmailAddress>(entity =>
            {
                entity.HasComment("E-mail адреси");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"emailaddresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Email).HasComment("E-mail адрес");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<EmployeeStatCount>(entity =>
            {
                entity.HasComment("Информация за заети лица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"employeestatcounts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EmployeeStatTypeId).HasComment("Тип статистика");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MenWithPayCount).HasComment("Мъже със заплащане (бр.)");

                entity.Property(e => e.MenWithouPayCount).HasComment("Мъже без заплащане (бр.)");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.StatisticalFormId).HasComment("ИСФ ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WomenWithPayCount).HasComment("Жени със заплащане (бр.)");

                entity.Property(e => e.WomenWithoutPayCount).HasComment("Жени без заплащане (бр.)");

                entity.HasOne(d => d.EmployeeStatType)
                    .WithMany(p => p.EmployeeStatCounts)
                    .HasForeignKey(d => d.EmployeeStatTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeStatCounts_NEmployeeStatTypes");

                entity.HasOne(d => d.StatisticalForm)
                    .WithMany(p => p.EmployeeStatCounts)
                    .HasForeignKey(d => d.StatisticalFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeStatCounts_StatisticalFormsRegister");
            });

            modelBuilder.Entity<EmployeeStatNumericValue>(entity =>
            {
                entity.HasComment("Числова статистическа информация за ИСФ (Приходи от риболов, Разходи за екипаж, Стойност на труда, ...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"employeestatnumericvalues_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.NumericStatTypeId).HasComment("Тип числова статистика");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.StatValue).HasComment("Стойност на статистиката");

                entity.Property(e => e.StatisticalFormId).HasComment("ИСФ ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.NumericStatType)
                    .WithMany(p => p.EmployeeStatNumericValues)
                    .HasForeignKey(d => d.NumericStatTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeStatNumericValues_NNumericStatTypes");

                entity.HasOne(d => d.StatisticalForm)
                    .WithMany(p => p.EmployeeStatNumericValues)
                    .HasForeignKey(d => d.StatisticalFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeStatNumericValues_StatisticalFormsRegister");
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasComment("Лог на възникналите грешки в работата на системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"errorlog_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Class).HasComment("Клас");

                entity.Property(e => e.Client).HasComment("Идентификатор на клиента (Angular, Xamarin ver...)");

                entity.Property(e => e.ExceptionSource).HasComment("Източник (Exception Source)");

                entity.Property(e => e.LogDate).HasComment("Дата и час на събитие");

                entity.Property(e => e.Message).HasComment("Съобщение на грешката");

                entity.Property(e => e.Method).HasComment("Метод");

                entity.Property(e => e.Severity).HasComment("Критичност (Info/Warn/Error/Debug)");

                entity.Property(e => e.StackTrace).HasComment("StackTrace на грешката");

                entity.Property(e => e.Username).HasComment("Потребител");
            });

            modelBuilder.Entity<File>(entity =>
            {
                entity.HasComment("Прикачени файлове");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"files_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comments).HasComment("Коментари / Бележки");

                entity.Property(e => e.Content).HasComment("Съдържание на файла");

                entity.Property(e => e.ContentHash).HasComment("Хеш на съдържанието на файла по SHA-256");

                entity.Property(e => e.ContentLength).HasComment("Дължина на съдържанието в байтове");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MimeType).HasComment(" Mime тип на файла");

                entity.Property(e => e.Name).HasComment("Име на файла");

                entity.Property(e => e.ReferenceCounter)
                    .HasDefaultValueSql("1")
                    .HasComment("Брой FK, които сочат към този ред. Когато стане 0, правим IsActive=False, преди това при триене намаляме counter-a.");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<FirstSaleInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_FirstSaleInspections");

                entity.HasComment("Инспекции при първа продажба");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.Address).HasComment("Адрес на пазар / помещение");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Name).HasComment("Име на пазар / помещение");

                entity.Property(e => e.RepresentativeComment).HasComment("Коментар на представител");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.FirstSaleInspection)
                    .HasForeignKey<FirstSaleInspection>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FirstSaleInspections_InspectionRegister");
            });

            modelBuilder.Entity<FirstSaleLogBookPage>(entity =>
            {
                entity.HasComment("Страници от дневник за първа продажба (декларации за ПП)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"firstsalelogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AdmissionLogBookPageId).HasComment("Страницa от дневник за приемане (декларации за Приемане)");

                entity.Property(e => e.BuyerId).HasComment("Купувач - регистриран купувач или Център за първа продажба");

                entity.Property(e => e.CancelationReason).HasComment("Причина за анулиране (при статус Canceled)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LogBookId).HasComment("Дневник");

                entity.Property(e => e.OriginDeclarationId).HasComment("Декларация за произход");

                entity.Property(e => e.PageNum).HasComment("Номер на страница");

                entity.Property(e => e.SaleContractDate).HasComment("Дата на договор за продажба");

                entity.Property(e => e.SaleContractNumber).HasComment("Номер на договор за продажба");

                entity.Property(e => e.SaleDate).HasComment("Дата на продажба");

                entity.Property(e => e.SaleLocation).HasComment("Място на продажба");

                entity.Property(e => e.Status).HasComment("Статус на страницата (InProgress, Submitted, Canceled, Missing)");

                entity.Property(e => e.TransportationDocumentId).HasComment("Документ за превоз");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AdmissionLogBookPage)
                    .WithMany(p => p.FirstSaleLogBookPages)
                    .HasForeignKey(d => d.AdmissionLogBookPageId)
                    .HasConstraintName("FK_FirstSaleLogBookPages_AdmissionLogBookPages");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.FirstSaleLogBookPages)
                    .HasForeignKey(d => d.BuyerId)
                    .HasConstraintName("FK_FirstSaleLogBookPages_BuyerRegister");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.FirstSaleLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FirstSaleLogBookPages_LogBooks");

                entity.HasOne(d => d.OriginDeclaration)
                    .WithMany(p => p.FirstSaleLogBookPages)
                    .HasForeignKey(d => d.OriginDeclarationId)
                    .HasConstraintName("FK_FirstSaleLogBookPages_OriginDeclarations");

                entity.HasOne(d => d.TransportationDocument)
                    .WithMany(p => p.FirstSaleLogBookPages)
                    .HasForeignKey(d => d.TransportationDocumentId)
                    .HasConstraintName("FK_FirstSaleLogBookPages_TransportationLogBookPages");
            });

            modelBuilder.Entity<FirstSaleLogBookPageFile>(entity =>
            {
                entity.HasComment("Файлове към страници от дневник за първа продажба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"firstsalelogbookpagefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от дневник за приемане");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FirstSaleLogBookPageFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FirstSaleLogBookPageFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FirstSaleLogBookPageFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FirstSaleLogBookPageFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.FirstSaleLogBookPageFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FirstSaleLogBookPageFiles_FirstSaleLogBookPages");
            });

            modelBuilder.Entity<FishVesselsForm>(entity =>
            {
                entity.HasComment("ИСФ за риболовни кораби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"fishvesselsforms_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FuelConsumption).HasComment("Разход на гориво (л/час)");

                entity.Property(e => e.GrossTonnageIntervalId).HasComment("Интервал за бруто тегло на кораба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsFishingMainActivity).HasComment("Дейността от риболов е основна/допълнителна дейност");

                entity.Property(e => e.IsOwnerCrewMember).HasComment("Флаг дали собственика е член на екипажа");

                entity.Property(e => e.LengthStatIntervalId).HasComment("Интервал за обща дължина на кораба");

                entity.Property(e => e.OwnerCrewMemberPosition).HasComment("Описание на член на екипажа (капитан, механик, друго...)");

                entity.Property(e => e.ShipId).HasComment("Кораб");

                entity.Property(e => e.ShipPrice).HasComment("Цена на кораба");

                entity.Property(e => e.ShipUsedBy).HasComment("Дейността се осъществява от (Person/Legal/Association)");

                entity.Property(e => e.StatisticalFormId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FuelType)
                    .WithMany(p => p.FishVesselsForms)
                    .HasForeignKey(d => d.FuelTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishVesselsForms_NFuelTypes");

                entity.HasOne(d => d.GrossTonnageInterval)
                    .WithMany(p => p.FishVesselsForms)
                    .HasForeignKey(d => d.GrossTonnageIntervalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishVesselsForms_NGrossTonageStatIntervals");

                entity.HasOne(d => d.LengthStatInterval)
                    .WithMany(p => p.FishVesselsForms)
                    .HasForeignKey(d => d.LengthStatIntervalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishVesselsForms_NVesselLengthStatIntervals");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.FishVesselsForms)
                    .HasForeignKey(d => d.ShipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishVesselsForms_ShipRegister");

                entity.HasOne(d => d.StatisticalForm)
                    .WithOne(p => p.FishVesselsForm)
                    .HasForeignKey<FishVesselsForm>(d => d.StatisticalFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishVesselsForms_StatisticalFormsRegister");
            });

            modelBuilder.Entity<FishermanInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_FishermanInspections");

                entity.HasComment("Инспекции на любители рибари");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishermanComment).HasComment("Коментар на рибар");

                entity.Property(e => e.FishingRodCount).HasComment("Брой въдици");

                entity.Property(e => e.InpectionLocationCoordinates).HasComment("Локация на инспекцията - координати");

                entity.Property(e => e.InspectionLocation).HasComment("Локация на инспекцията - описание");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.TicketNum).HasComment("Уникален номер на билет");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.FishermanInspection)
                    .HasForeignKey<FishermanInspection>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishermanInspections_InspectionRegister");

                entity.HasOne(d => d.InspectionLocationZone)
                    .WithMany(p => p.FishermanInspections)
                    .HasForeignKey(d => d.InspectionLocationZoneId)
                    .HasConstraintName("FK_FishermanInspections_NCatchZones");

                entity.HasOne(d => d.UnregisteredPerson)
                    .WithMany(p => p.FishermanInspections)
                    .HasForeignKey(d => d.UnregisteredPersonId)
                    .HasConstraintName("FK_FishermanInspections_UnregisteredPersons");
            });

            modelBuilder.Entity<FishermenRegister>(entity =>
            {
                entity.HasComment("Регистър правоспособни рибари");

                entity.HasIndex(e => e.RegistrationDate, "IDX_RPravRib_FishermenRegister_RegistrationDate")
                    .HasSortOrder(new[] { SortOrder.Descending });

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RPravRib\".\"fishermenregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.Comments).HasComment("Коментари и бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DiplomaGraduationDate).HasComment("Дата на завършване в училище/университет");

                entity.Property(e => e.DiplomaIssuer).HasComment("Издател на диплома");

                entity.Property(e => e.DiplomaNum).HasComment("Номер на диплома в училище/университет");

                entity.Property(e => e.ExamDate).HasComment("Дата на изпит");

                entity.Property(e => e.ExamProtocolNum).HasComment("Номер на протокол от изпит");

                entity.Property(e => e.ExamTerritoryUnitId).HasComment("Град (териториална единица) на провеждане на изпита");

                entity.Property(e => e.HasExamLicense).HasComment("Флаг дали лицето е приминало успешно изпит за правоспосбност или притежава диплома от морско училище/университет");

                entity.Property(e => e.HasPassedExam).HasComment("Флаг дали е минал изпита в ИАРА за правоспособност - в случай че минава през заявление, т.е. има изпит");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsWithMaritimeEducation).HasComment("флаг дали правоспособният рибар е създаден служебно, заради наличие на морско образование");

                entity.Property(e => e.PersonId).HasComment("Правоспособен рибар - физическо лице ");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.RegistrationNum).HasComment("Номер на свидетелство (при регистров запис)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.FishermenRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_FishermenRegister_Applications");

                entity.HasOne(d => d.ExamTerritoryUnit)
                    .WithMany(p => p.FishermenRegisters)
                    .HasForeignKey(d => d.ExamTerritoryUnitId)
                    .HasConstraintName("FK_FishermenRegister_NTerritoryUnits");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.FishermenRegisters)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RPravRib_FishermenRegister_ISS_Persons");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_FishermenRegister_FishermenRegister");
            });

            modelBuilder.Entity<FishermenRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към регистър правоспособни рибари");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RPravRib\".\"fishermenregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Правоспособен рибар");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FishermenRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RPravRib_FishermenRegister_Files_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FishermenRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishermenRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.FishermenRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishermenRegisterFiles_FishermenRegister");
            });

            modelBuilder.Entity<FishingAssociation>(entity =>
            {
                entity.HasComment("Риболовни сдружения");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingassociations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AssociationLegalId).HasComment("Юридическо лице на сдружение");

                entity.Property(e => e.CancellationDate).HasComment("Дата на прекратяване");

                entity.Property(e => e.CancellationReason).HasComment("Причина за прекратяване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsCanceled).HasComment("Флаг дали Сдружението е Прекратено от достъп");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AssociationLegal)
                    .WithOne(p => p.FishingAssociation)
                    .HasForeignKey<FishingAssociation>(d => d.AssociationLegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociations_Legals_Hist");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.FishingAssociations)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociations_NTerritoryUnits");
            });

            modelBuilder.Entity<FishingAssociationFile>(entity =>
            {
                entity.HasComment("Файлове към сдружения за издаване на билети  за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingassociationfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Сдружение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FishingAssociationFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociationFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FishingAssociationFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociationFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.FishingAssociationFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociationFiles_FishingAssociations");
            });

            modelBuilder.Entity<FishingAssociationMember>(entity =>
            {
                entity.HasComment("Членове на сдружения за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingassociationmembers_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingAssociationId).HasComment("Сдружение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MembershipCardNum).HasComment("Номер на членска карта");

                entity.Property(e => e.MembershipFromDate).HasComment("Членство от дата");

                entity.Property(e => e.PersonId).HasComment("Физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingAssociation)
                    .WithMany(p => p.FishingAssociationMembers)
                    .HasForeignKey(d => d.FishingAssociationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociationMembers_FishingAssociations");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.FishingAssociationMembers)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingAssociationMembers_Persons");
            });

            modelBuilder.Entity<FishingCatchRecord>(entity =>
            {
                entity.HasComment("Данни за улов за билети за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingcatchrecords_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchDate).HasComment("Дата на улов");

                entity.Property(e => e.Coordinates).HasComment("Координати на улова");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание на улова ");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.TicketId).HasComment("Билет за любителски риболов");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WaterArea).HasComment("Воден обект");

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.FishingCatchRecords)
                    .HasForeignKey(d => d.TicketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecords_FishingTickets");
            });

            modelBuilder.Entity<FishingCatchRecordFile>(entity =>
            {
                entity.HasComment("Файлове към улов на риба за билети  за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingcatchrecordfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Улов");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FishingCatchRecordFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecordFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FishingCatchRecordFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecordFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.FishingCatchRecordFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecordFiles_CatchRecords");
            });

            modelBuilder.Entity<FishingCatchRecordFish>(entity =>
            {
                entity.HasComment("Данни за улов за вид риба за билети за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingcatchrecordfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchRecordId).HasComment("Данни за улов");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба / морски организъм");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Quantity)
                    .HasPrecision(10, 2)
                    .HasComment("Количество улов в КГ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchRecord)
                    .WithMany(p => p.FishingCatchRecordFishes)
                    .HasForeignKey(d => d.CatchRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecordFishes_CatchRecords");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.FishingCatchRecordFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchRecordFishes_NFishes");
            });

            modelBuilder.Entity<FishingGearCheck>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_FishingGearChecks");

                entity.HasComment("Проверка на средства за улов (Първоначално маркиране / Повторно маркиране / Инспекция)");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CheckReasonId).HasComment("Причини за маркиране на уреди");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingToolType).HasComment("Вид проверявани уреди (Ship=Уреди на кораб / PoundNet=Уреди на далян)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecheckDescription).HasComment("Причина за повторно маркиране на уредите - Друго в свободен текст");

                entity.Property(e => e.RecheckReasonId).HasComment("Причина за повторно маркиране на уредите");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CheckReason)
                    .WithMany(p => p.FishingGearChecks)
                    .HasForeignKey(d => d.CheckReasonId)
                    .HasConstraintName("FK_FishingGearChecks_NFishingGearCheckReasons");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.FishingGearCheck)
                    .HasForeignKey<FishingGearCheck>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearChecks_InspectionRegister");

                entity.HasOne(d => d.PoundNet)
                    .WithMany(p => p.FishingGearChecks)
                    .HasForeignKey(d => d.PoundNetId)
                    .HasConstraintName("FK_FishingGearChecks_PoundNetRegister");

                entity.HasOne(d => d.RecheckReason)
                    .WithMany(p => p.FishingGearChecks)
                    .HasForeignKey(d => d.RecheckReasonId)
                    .HasConstraintName("FK_FishingGearChecks_NFishingGearRecheckReasons");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.FishingGearChecks)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_FishingGearChecks_ShipRegister");

                entity.HasOne(d => d.UnregisteredShip)
                    .WithMany(p => p.FishingGearChecks)
                    .HasForeignKey(d => d.UnregisteredShipId)
                    .HasConstraintName("FK_FishingGearChecks_UnregisteredVessels");
            });

            modelBuilder.Entity<FishingGearMark>(entity =>
            {
                entity.HasComment("Марки за риболовен уред");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"fishinggearmarks_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.InspectionId).HasComment("Номер на инспекция ако марките са към уред за инспекция, null ако е регистриран уред (това го ползваме за да гарантираме уникалност по MarkNum за регистрирани уреди)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MarkNum).HasComment("Номер на марка");

                entity.Property(e => e.MarkStatusId).HasComment("Стаус на маркa за риболовен уред");

                entity.Property(e => e.PermitLicenseId).HasComment("Удостоверение, към което е свързан уредът");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.FishingGearMarks)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearMarks_FishingGearRegister");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.FishingGearMarks)
                    .HasForeignKey(d => d.InspectionId)
                    .HasConstraintName("FK_FishingGearMarks_InspectionRegister");

                entity.HasOne(d => d.MarkStatus)
                    .WithMany(p => p.FishingGearMarks)
                    .HasForeignKey(d => d.MarkStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearMarks_NFishingGearMarkStatuses");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.FishingGearMarks)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .HasConstraintName("FK_FishingGearMarks_PermitLicensesRegister");
            });

            modelBuilder.Entity<FishingGearPinger>(entity =>
            {
                entity.HasComment("Пингери за риболовен уред");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"fishinggearpingers_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Brand).HasComment("Марка");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Model).HasComment("Модел");

                entity.Property(e => e.PingerNum).HasComment("Номер на пингер");

                entity.Property(e => e.PingerStatusId).HasComment("Статус");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.FishingGearPingers)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearPingers_FishingGearRegister");

                entity.HasOne(d => d.PingerStatus)
                    .WithMany(p => p.FishingGearPingers)
                    .HasForeignKey(d => d.PingerStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearPingers_NFishingGearPingerStatuses");
            });

            modelBuilder.Entity<FishingGearRegister>(entity =>
            {
                entity.HasComment("Регистър на Риболовни уреди");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"fishinggearregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CordThickness).HasComment("Дебелина на кордата");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.FishingGearTypeId).HasComment("Риболовен уред");

                entity.Property(e => e.GearCount).HasComment("Брой уреди");

                entity.Property(e => e.HasPinger).HasComment("Флаг дали има наличен пингър");

                entity.Property(e => e.Height).HasComment("Височина");

                entity.Property(e => e.HookCount).HasComment("Брой куки");

                entity.Property(e => e.HouseLength).HasComment("Дължина на къщата (м.) - за тип на уреда DLN (далян)");

                entity.Property(e => e.HouseWidth).HasComment("Широчина на къщата (м) - за тип на уреда DLN (далян)");

                entity.Property(e => e.InspectionId).HasComment("Инспекция, към която е свързан уредът");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Length).HasComment("Дължина");

                entity.Property(e => e.LineCount).HasComment("Брой линии");

                entity.Property(e => e.NetEyeSize).HasComment("Размер на окото");

                entity.Property(e => e.PermitLicenseId).HasComment("Удостоверение, към което е свързан уредът");

                entity.Property(e => e.TowelLength).HasComment("Дължина на кърпата (м.) - за тип на уреда DLN (далян)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGearType)
                    .WithMany(p => p.FishingGearRegisters)
                    .HasForeignKey(d => d.FishingGearTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingGearRegister_NFishingGears");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.FishingGearRegisters)
                    .HasForeignKey(d => d.InspectionId)
                    .HasConstraintName("FK_FishingGearRegister_InspectionRegister");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.FishingGearRegisters)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .HasConstraintName("FK_FishingGearRegister_PermitLicensesRegister");
            });

            modelBuilder.Entity<FishingTicket>(entity =>
            {
                entity.HasComment("Билети за любителски риболов");

                entity.HasIndex(e => e.TicketNum, "IXUK_LRib_FishingTickets_TicketNum")
                    .IsUnique()
                    .HasFilter("((\"DuplicateOfTicketID\" IS NULL) AND ((\"CreatedBy\")::text <> 'MigrateScript-IARA-Old-Tickets-lrib'::text))");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingtickets_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.AssociationMemberId).HasComment("Членство в сдружение");

                entity.Property(e => e.Comment).HasComment("Коментари");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedByFishingAssociationId).HasComment("Издаден от сдружение");

                entity.Property(e => e.CreatedByUserId).HasComment("Издаден от потребител");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DuplicateOfTicketId).HasComment("Билет, за който текущия е дубликат");

                entity.Property(e => e.HasUserConfirmed)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг че лицето е съгласно със ЗРА");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsOnlineTicket).HasComment("Флаг дали билета е подаден онлайн (и само подателя може да редактира данните по заявлението) или е подаден на хартия (и служител на ИАРА може да го редактира)");

                entity.Property(e => e.PersonId).HasComment("Лице, за което е билета");

                entity.Property(e => e.PersonRepresentativeId).HasComment("Представител (за непълнолетни лица)");

                entity.Property(e => e.Price)
                    .HasPrecision(10, 2)
                    .HasComment("Цена на билета");

                entity.Property(e => e.TelkisIndefinite).HasComment("Флаг дали решението на ТЕЛК е безсрочно");

                entity.Property(e => e.Telknum).HasComment("Номер на експертно решение за ТЕЛК");

                entity.Property(e => e.TelkvalidTo).HasComment("Дата на валидност на експертно решение от ТЕЛК");

                entity.Property(e => e.TicketNum).HasComment("Уникален номер на билет");

                entity.Property(e => e.TicketPeriodId).HasComment("Период на билета");

                entity.Property(e => e.TicketStatusId).HasComment("Статус на билет (Заявен/Издаден/Потвърден/Анулиран/Дубликат)");

                entity.Property(e => e.TicketTypeId).HasComment("Тип на билета (стандартен, до 14г и др.)");

                entity.Property(e => e.TicketValidFrom).HasComment("Начална дата и час на валидност на билета");

                entity.Property(e => e.TicketValidTo).HasComment("Крайна дата на валидност на билета");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingTickets_Applications");

                entity.HasOne(d => d.AssociationMember)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.AssociationMemberId)
                    .HasConstraintName("FK_FishingTickets_FishingAssociationMembers");

                entity.HasOne(d => d.CreatedByFishingAssociation)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.CreatedByFishingAssociationId)
                    .HasConstraintName("FK_FishingTickets_FishingAssociations");

                entity.HasOne(d => d.CreatedByUser)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingTickets_CreatedBy_Users");

                entity.HasOne(d => d.DuplicateOfTicket)
                    .WithMany(p => p.InverseDuplicateOfTicket)
                    .HasForeignKey(d => d.DuplicateOfTicketId)
                    .HasConstraintName("FK_FishingTickets_DuplicateFishingTickets");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.FishingTicketPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRib_FishingTickets_ISS_Persons");

                entity.HasOne(d => d.PersonRepresentative)
                    .WithMany(p => p.FishingTicketPersonRepresentatives)
                    .HasForeignKey(d => d.PersonRepresentativeId)
                    .HasConstraintName("FK_FishingTickets_Persons_Hist_PersonRepresentative");

                entity.HasOne(d => d.TicketPeriod)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.TicketPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRib_FishingTickets_LRib_NTicketPeriods");

                entity.HasOne(d => d.TicketStatus)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.TicketStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingTickets_NTicketStatuses");

                entity.HasOne(d => d.TicketType)
                    .WithMany(p => p.FishingTickets)
                    .HasForeignKey(d => d.TicketTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRib_FishingTickets_LRib_NTicketTypes");
            });

            modelBuilder.Entity<FishingTicketFile>(entity =>
            {
                entity.HasComment("Файлове към билети за любителски риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"fishingticketfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OldDbTicketId).HasComment("ID на билета в старата база, използва се само за миграциите.");

                entity.Property(e => e.RecordId).HasComment("Риболовен билет");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FishingTicketFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRib_FishingTicketFiles_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.FishingTicketFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FishingTicketFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.FishingTicketFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRib_FishingTicketFiles_LRib_FishingTickets");
            });

            modelBuilder.Entity<Fluxflaprequest>(entity =>
            {
                entity.HasComment("FLAP заявки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"fluxflaprequests_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.FluxfvmsrequestId).HasComment("FLUXFVMSRequest запис");

                entity.Property(e => e.MdrFlapRequestPurposeId).HasComment("Причина за заявлението");

                entity.Property(e => e.RequestContent).HasComment("Съдържание на заявката");

                entity.Property(e => e.ResponseContent).HasComment("Съдържание на отговора");

                entity.Property(e => e.ShipId).HasComment("Идентификатор на кораб при изходящи заявки");

                entity.Property(e => e.ShipIdentifierType).HasComment("Тип идентификатор на кораб");

                entity.Property(e => e.ShipIdentifier).HasComment("Идентификатор на кораб");

                entity.Property(e => e.ShipName).HasComment("Име на кораб");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<Fluxfvmsrequest>(entity =>
            {
                entity.HasComment("Заявки за комуникация с FLUX/СНРК");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"fluxfvmsrequests_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Attempts)
                    .HasDefaultValueSql("1")
                    .HasComment("Брой направени опити");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ErrorDescription).HasComment("Описание на намерените грешки");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsOutgoing).HasComment("Флаг дали заявката е изходяща за ИСС или е входяща към ИСС.");

                entity.Property(e => e.RequestContent).HasComment("Съдържание на заявката");

                entity.Property(e => e.RequestDateTime).HasComment("Дата и час на подаване на заявката");

                entity.Property(e => e.ResponseContent).HasComment("Съдържание на отговора");

                entity.Property(e => e.ResponseDateTime).HasComment("Дата и час на отговора");

                entity.Property(e => e.ResponseStatus).HasComment("Статус на отговора (OK, Error)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WebServiceName).HasComment("Име на извиканата услуга ");

                entity.Property(e => e.DomainName).HasComment("Име на FLUX домейн");
            });

            modelBuilder.Entity<FvmsfishingActivityReport>(entity =>
            {
                entity.HasComment("Заявки от СНРК за части (или цял) рейс - електронен дневник");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"fvmsfishingactivityreports_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MdrFluxFaReportTypeId).HasComment("Тип на FA документа (DECLARATION/NOTIFICATION)");

                entity.Property(e => e.MdrFluxFaTypeId).HasComment("Тип на FA - отплаване, риболовна операция, пристигане на пристанище и т.н.");

                entity.Property(e => e.MdrFluxGpPurposeId).HasComment("Тип на съобщението - Original, Cancellation, Replace, Delete");

                entity.Property(e => e.ReferencedResponseUuid).HasComment("UUID на предишно съобщение, което е пряко свързано с текущото");

                entity.Property(e => e.ResponseMessage).HasComment("JSON - цялото съобщение, пристигнало от СНРК");

                entity.Property(e => e.ResponseUuid).HasComment("UUID на съобщението");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VesselId).HasComment("Идентификатор от нашата система на кораб, за който се отнася съобщението (може да лиспва при събития: изтриване и анулиране)");

                entity.HasOne(d => d.Vessel)
                    .WithMany(p => p.FvmsfishingActivityReports)
                    .HasForeignKey(d => d.VesselId)
                    .HasConstraintName("FK_FVMSFishingActivityReports_ShipRegister");
            });

            modelBuilder.Entity<FvmsfishingActivityReportLogBookPage>(entity =>
            {
                entity.HasComment("Номер на рейс за СНРК съобщение и страница от риболен дневник");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"fvmsfishingactivityreportlogbookpage_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingActivityReportId).HasComment("Уникален идентификатор на СНРК съобщение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ShipLogBookPageId).HasComment("Уникален идентификатор на страница от риболовен дневник");

                entity.Property(e => e.TripIdentifier).HasComment("Уникален идентификатор на риболовен рейс");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingActivityReport)
                    .WithMany(p => p.FvmsfishingActivityReportLogBookPages)
                    .HasForeignKey(d => d.FishingActivityReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FVMSFishngActRepLogBookPage_FVMSFishngActivityReports");

                entity.HasOne(d => d.ShipLogBookPage)
                    .WithMany(p => p.FvmsfishingActivityReportLogBookPages)
                    .HasForeignKey(d => d.ShipLogBookPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FVMSFishngActRepLogBookPage_ShipLogBookPages");
            });

            modelBuilder.Entity<HolderGroundsForUse>(entity =>
            {
                entity.HasComment("Детайли за основание за ползване на кораб/далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"holdergroundsforuse_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comment).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GroundsForUseTypeId).HasComment("Тип основание за ползване на кораб/далян");

                entity.Property(e => e.GroundsForUseValidFrom).HasComment("Пълномощно валидно от");

                entity.Property(e => e.GroundsForUseValidTo).HasComment("Пълномощно валидно до");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsGroundsForUseUnlimited).HasComment("Флаг дали пълномощното е безсрочно");

                entity.Property(e => e.Issuer).HasComment("Издател");

                entity.Property(e => e.Number).HasComment("Номер пълномощно на представител");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.GroundsForUseType)
                    .WithMany(p => p.HolderGroundsForUses)
                    .HasForeignKey(d => d.GroundsForUseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HolderGroundsForUse_NHolderGroundsForUseTypes");
            });

            modelBuilder.Entity<InspDelivery>(entity =>
            {
                entity.HasComment("Връчване на АУАН/НП");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspdelivery_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес за доставка");

                entity.Property(e => e.ConfirmationTypeId).HasComment("Тип на потвърждение за връчване");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryDate).HasComment("Дата на връчване");

                entity.Property(e => e.DeliveryTypeId).HasComment("Тип на връчване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsDelivered).HasComment("Флаг дали АУАН-ът/НП е връчен (или потвърден)");

                entity.Property(e => e.IsEdeliveryRequested)
                    .HasDefaultValueSql("false")
                    .HasComment("Флаг дали желае да бъде връчено през eDelivery");

                entity.Property(e => e.ReferenceNum).HasComment("Референтен номер");

                entity.Property(e => e.RefusalDate).HasComment("Дата на отказ");

                entity.Property(e => e.SentDate).HasComment("Дата на изпращане");

                entity.Property(e => e.StateService).HasComment("Държавен орган / служба");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено при връчване в офис на ИАРА");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.InspDeliveries)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_InspDelivery_Addresses");

                entity.HasOne(d => d.ConfirmationType)
                    .WithMany(p => p.InspDeliveries)
                    .HasForeignKey(d => d.ConfirmationTypeId)
                    .HasConstraintName("FK_InspDelivery_NInspDeliveryConfirmationTypes");

                entity.HasOne(d => d.DeliveryType)
                    .WithMany(p => p.InspDeliveries)
                    .HasForeignKey(d => d.DeliveryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspDelivery_NInspDeliveryTypes");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.InspDeliveries)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_InspDelivery_NTerritoryUnits");
            });

            modelBuilder.Entity<InspectedFishingGear>(entity =>
            {
                entity.HasComment("Риболовни уреди за инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectedfishinggears_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CheckInspectedMatchingRegisteredGear).HasComment("Флаг дали инспектираният уред съвпада с регистрираният (Y - съвпада, N - не съвпада, I -нерегистриран уред, намерен при инспекция, R - регистриран уред, неоткрит при инспекция, Null - непопълнено)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasAttachedAppliances).HasComment("Флаг дали има приспособления за прикачване към риболовния уред");

                entity.Property(e => e.InspectedFishingGearId).HasComment("Риболовен уред, който е инспектиран");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsStored).HasComment("Флаг дали е съхранен");

                entity.Property(e => e.IsTaken).HasComment("Флаг дали е иззет");

                entity.Property(e => e.RegisteredFishingGearId).HasComment("Регистриран уред, срещу когото е направена инспекцията");

                entity.Property(e => e.StorageLocation).HasComment("Място на съхранение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.InspectedFishingGearNavigation)
                    .WithMany(p => p.InspectedFishingGearInspectedFishingGearNavigations)
                    .HasForeignKey(d => d.InspectedFishingGearId)
                    .HasConstraintName("FK_InspectedFishingGears_FishingGearRegister_Inspected");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectedFishingGears)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectedFishingGears_InspectionRegister");

                entity.HasOne(d => d.RegisteredFishingGear)
                    .WithMany(p => p.InspectedFishingGearRegisteredFishingGears)
                    .HasForeignKey(d => d.RegisteredFishingGearId)
                    .HasConstraintName("FK_InspectedFishingGears_FishingGearRegister_Registered");
            });

            modelBuilder.Entity<InspectedPerson>(entity =>
            {
                entity.HasComment("Лица, установени по време на инспекция ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectedpersons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес на ЮЛ или ФЛ");

                entity.Property(e => e.BuyerId).HasComment("Регистриран купувач");

                entity.Property(e => e.CaptainFishermenId).HasComment("Капитан -> FishermenRegister");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectedPersonTypeId).HasComment("Тип на проверявано лице (Собственик, Ползвател, Купувач, Капитан, ...)");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Уникален идентификатор");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PersonId).HasComment("Собственик -> ShipOwners");

                entity.Property(e => e.UnregisteredPersonId).HasComment("Капитан -> UnregisteredPersons");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_InspectedPersons_Addresses");

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.BuyerId)
                    .HasConstraintName("FK_InspectedShipPersonnel_BuyerRegister");

                entity.HasOne(d => d.CaptainFishermen)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.CaptainFishermenId)
                    .HasConstraintName("FK_InspectedShipPersonnel_FishermenRegister");

                entity.HasOne(d => d.InspectedPersonType)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.InspectedPersonTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectedPersons_NInspectedPersonTypes");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectedShipPersonnel_InspectionRegister");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.LegalId)
                    .HasConstraintName("FK_InspectedShipPersonnel_Legals");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_InspectedPersons_Persons");

                entity.HasOne(d => d.UnregisteredPerson)
                    .WithMany(p => p.InspectedPeople)
                    .HasForeignKey(d => d.UnregisteredPersonId)
                    .HasConstraintName("FK_InspectedPersons_UnregisteredPersons");
            });

            modelBuilder.Entity<InspectionCatchMeasure>(entity =>
            {
                entity.HasComment("Измерен улов от всеки тип риба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectioncatchmeasures_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AllowedDeviation).HasComment("Допустимо отклонение");

                entity.Property(e => e.AverageSize).HasComment("Среден размер");

                entity.Property(e => e.CatchCount).HasComment("Количество Брой");

                entity.Property(e => e.CatchInspectionTypeId).HasComment("Вид отчет на улов (Стандартен улов, Маломерна риба и Изхвърляне)");

                entity.Property(e => e.CatchQuantity).HasComment("Уловено количество");

                entity.Property(e => e.CatchZoneId).HasComment("Зона на улов");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DestroyDocumentNum).HasComment("Документ за унищожаване");

                entity.Property(e => e.DestroyLocation).HasComment("Място на унищожаване");

                entity.Property(e => e.DonationLocation).HasComment("Място на дарение");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.FishSexId).HasComment("Пол на рибата");

                entity.Property(e => e.InspectedLogBookPageId).HasComment("Данни за обвързана декларация/документ");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsDestroyed).HasComment("Флаг дали е унищожена");

                entity.Property(e => e.IsDonated).HasComment("Флаг дали е дарена");

                entity.Property(e => e.IsStored).HasComment("Флаг дали е съхранен");

                entity.Property(e => e.IsTaken).HasComment("Флаг дали е иззет");

                entity.Property(e => e.MeasureComments).HasComment("Коментар за измерен улов (бр каси и др.)");

                entity.Property(e => e.PresentationId).HasComment("Представяне");

                entity.Property(e => e.StorageLocation).HasComment("Място на съхранение");

                entity.Property(e => e.UnloadedQuantity).HasComment("Разтоварено количество");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchInspectionType)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.CatchInspectionTypeId)
                    .HasConstraintName("FK_InspectionCatchMeasures_NCatchInspectionTypes");

                entity.HasOne(d => d.CatchZone)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.CatchZoneId)
                    .HasConstraintName("FK_InspectionCatchMeasures_NCatchZones");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.FishId)
                    .HasConstraintName("FK_InspectionCatchMeasures_NFishes");

                entity.HasOne(d => d.FishSex)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.FishSexId)
                    .HasConstraintName("FK_InspectionCatchMeasures_NFishSex");

                entity.HasOne(d => d.InspectedLogBookPage)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.InspectedLogBookPageId)
                    .HasConstraintName("FK_InspectionCatchMeasures_InspectionLogBookPages");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionCatchMeasures_InspectionRegister");

                entity.HasOne(d => d.Presentation)
                    .WithMany(p => p.InspectionCatchMeasures)
                    .HasForeignKey(d => d.PresentationId)
                    .HasConstraintName("FK_InspectionCatchMeasures_NFishPresentations");
            });

            modelBuilder.Entity<InspectionCheck>(entity =>
            {
                entity.HasComment("Проверки при инспектиране на кораб (тип Y/N/x/null)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionchecks_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CheckTypeId).HasComment("Тип проверка");

                entity.Property(e => e.CheckValue).HasComment("Стойност на проверка според CheckType ( Y / N / X / null )");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Детайли, въведени от инспектор");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UnregisteredObjectIdentifier).HasComment("Идентификатор на нов обект (дневник/УСР/декл. произход), който не съществува в регистъра и е добавен по време на проверката");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CheckType)
                    .WithMany(p => p.InspectionChecks)
                    .HasForeignKey(d => d.CheckTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionChecks_NInspectionCheckTypes");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionChecks)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionChecks_InspectionRegister");
            });

            modelBuilder.Entity<InspectionEngine>(entity =>
            {
                entity.HasComment("Двигатели за проверка (за Проверка на воден обект без инспекция)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionengines_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EngineDescription).HasComment("Цвят и отличителни белези");

                entity.Property(e => e.EngineModel).HasComment("Марка на главния двигател");

                entity.Property(e => e.EnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност на главния двигател (kW)");

                entity.Property(e => e.EngineType).HasComment("Тип на двигателя");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsStored).HasComment("Флаг дали е съхранен");

                entity.Property(e => e.IsTaken).HasComment("Флаг дали е иззет");

                entity.Property(e => e.StorageLocation).HasComment("Място на съхранение");

                entity.Property(e => e.TotalCount).HasComment("Общ брой");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionEngines)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionEngines_InspectionRegister");
            });

            modelBuilder.Entity<InspectionInspector>(entity =>
            {
                entity.HasComment("Инспектори за дадена инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectioninspectors_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasIdentifiedHimself).HasComment("Инспекторът се е идентифицирал по време на инспекцията");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.InspectorId).HasComment("Инспектор");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsInCharge).HasComment("В качество на Отговорен инспектор или не");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер за подредба");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionInspectors)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionInspectors_InspectionsRegister");

                entity.HasOne(d => d.Inspector)
                    .WithMany(p => p.InspectionInspectors)
                    .HasForeignKey(d => d.InspectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionInspectors_Inspectors");
            });

            modelBuilder.Entity<InspectionLastPortVisit>(entity =>
            {
                entity.HasComment("Последно посетено пристанище");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionlastportvisits_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PortId).HasComment("Пристанище");

                entity.Property(e => e.UnregisteredPortCountryId).HasComment("Държава на нерегистрирано пристанище");

                entity.Property(e => e.UnregisteredPortName).HasComment("Нерегистрирано пристанище");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VisitDate).HasComment("Дата на посещение");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionLastPortVisits)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionLastPortVisits_InspectionRegister");

                entity.HasOne(d => d.Port)
                    .WithMany(p => p.InspectionLastPortVisits)
                    .HasForeignKey(d => d.PortId)
                    .HasConstraintName("FK_InspectionLastPortVisits_NPorts");

                entity.HasOne(d => d.UnregisteredPortCountry)
                    .WithMany(p => p.InspectionLastPortVisits)
                    .HasForeignKey(d => d.UnregisteredPortCountryId)
                    .HasConstraintName("FK_InspectionLastPortVisits_NCountries_Unregistered");
            });

            modelBuilder.Entity<InspectionLogBookPage>(entity =>
            {
                entity.HasComment("Проверени страници от дневник по време на инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionlogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AdmissionLogBookPageId).HasComment("Декларация за приемане");

                entity.Property(e => e.CheckLogBookMatches).HasComment("Стойност на проверка според CheckType ( Y / N / X / null )");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Детайли, въведени от инспектор");

                entity.Property(e => e.FirstSaleLogBookPageId).HasComment("Декларация за първа продажба");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LogBookId).HasComment("Дневник, за който е проверката");

                entity.Property(e => e.LogBookType).HasComment("Тип на дневник или тип фактура (и в случай на регистриран и на нерегистриран дневник)");

                entity.Property(e => e.ShipId).HasComment("Кораб, за който е страницата");

                entity.Property(e => e.ShipLogBookPageId).HasComment("Декларация за произход, за която е проверката");

                entity.Property(e => e.TransportationLogBookPageId).HasComment("Декларация за транспорт/превоз");

                entity.Property(e => e.UnregisteredLogBookNum).HasComment("Идентификатор на нов дневник, който не съществува в регистъра и е добавен по време на проверката");

                entity.Property(e => e.UnregisteredPageDate).HasComment("Дата на нерегистрирана страница");

                entity.Property(e => e.UnregisteredPageNum).HasComment("Номер на нерегистрирана страница от дневник");

                entity.Property(e => e.UnregisteredShipId).HasComment("Нерегистриран кораб");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AdmissionLogBookPage)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.AdmissionLogBookPageId)
                    .HasConstraintName("FK_InspectionLogBookPages_AdmissionLogBookPages");

                entity.HasOne(d => d.FirstSaleLogBookPage)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.FirstSaleLogBookPageId)
                    .HasConstraintName("FK_InspectionLogBookPages_FirstSaleLogBookPages");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionLogBookPages_InspectionRegister");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .HasConstraintName("FK_InspectionLogBookPages_LogBooks");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_InspectionLogBookPages_ShipRegister");

                entity.HasOne(d => d.ShipLogBookPage)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.ShipLogBookPageId)
                    .HasConstraintName("FK_InspectionLogBookPages_ShipLogBookPages");

                entity.HasOne(d => d.TransportationLogBookPage)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.TransportationLogBookPageId)
                    .HasConstraintName("FK_InspectionLogBookPages_TransportationLogBookPages");

                entity.HasOne(d => d.UnregisteredShip)
                    .WithMany(p => p.InspectionLogBookPages)
                    .HasForeignKey(d => d.UnregisteredShipId)
                    .HasConstraintName("FK_InspectionLogBookPages_UnregisteredVessels");
            });

            modelBuilder.Entity<InspectionObservationText>(entity =>
            {
                entity.HasComment("Текстове за наблюдение и нарушение за дадена инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionobservationtexts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.InspectionTextCategoryId).HasComment("Тип категория");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionObservationTexts)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspObsTexts_InspectionRegister");

                entity.HasOne(d => d.InspectionTextCategory)
                    .WithMany(p => p.InspectionObservationTexts)
                    .HasForeignKey(d => d.InspectionTextCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspObsTexts_NInspectionObservationTextCategories");
            });

            modelBuilder.Entity<InspectionObservationTool>(entity =>
            {
                entity.HasComment("Използвани средства за наблюдение на кораб от инспектиращ кораб или Централа за наблюдение на кораби (по време на проверка или инспекция)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionobservationtools_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsOnBoard).HasComment("Дали инструментът се използва от борда на инспектиращия кораб, или от Център за наблюдение");

                entity.Property(e => e.ObservationToolDesc).HasComment("Име на средство за наблюдение от тип \"Други\"");

                entity.Property(e => e.ObservationToolId).HasComment("Вид средство за наблюдение (бинокъл, радар, AIS, VMS, друго...)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionObservationTools)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionObservationTools_InspectionsRegister");

                entity.HasOne(d => d.ObservationTool)
                    .WithMany(p => p.InspectionObservationTools)
                    .HasForeignKey(d => d.ObservationToolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionObservationTools_NObservationTools");
            });

            modelBuilder.Entity<InspectionPatrolVehicle>(entity =>
            {
                entity.HasComment("Патрулни средства");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionpatrolvehicles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PatrolUnregisteredVesselId).HasComment("Превозно средство");

                entity.Property(e => e.PatrolVesselCoordinates).HasComment("Координати на наблюдаващ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionPatrolVehicles)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionPatrolVehicles_InspectionsRegister");

                entity.HasOne(d => d.PatrolUnregisteredVessel)
                    .WithMany(p => p.InspectionPatrolVehicles)
                    .HasForeignKey(d => d.PatrolUnregisteredVesselId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionPatrolVehicles_UnregisteredVessels");
            });

            modelBuilder.Entity<InspectionPermitLicense>(entity =>
            {
                entity.HasComment("Проверени удостоверения за стопански риболов по време на инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionpermitlicenses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CheckPermitLicenseMatches).HasComment("Удостоверението отговаря на регистрираното ( Y / N / X / null )");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Детайли, въведени от инспектор");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PermitLicenseId).HasComment("Удостоверение, за което е проверката");

                entity.Property(e => e.UnregisteredLicenseNum).HasComment("Регистрационен номер на удостоверение, ако не е налично в системата");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionPermitLicenses)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionPermitLicences_InspectionRegister");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.InspectionPermitLicenses)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .HasConstraintName("FK_InspectionPermitLicences_PermitLicensesRegister");
            });

            modelBuilder.Entity<InspectionRegister>(entity =>
            {
                entity.HasComment("Регистър проверки и инспекции");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedByUserId).HasComment("Създадена от инспектор");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryId).HasComment("Данни за връчване на копие от инспекцията на провереното лице");

                entity.Property(e => e.InspectionDraft).HasComment("Draft JSON с описание на инспекцията преди да е подадена окончателно");

                entity.Property(e => e.InspectionEnd).HasComment("Дата и час на край на инспекцията");

                entity.Property(e => e.InspectionStart).HasComment("Дата и час на начало на инспекцията");

                entity.Property(e => e.InspectionTypeId).HasComment("Вид на инспекцията");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsByEmergencySignal).HasComment("Флаг дали инспекцията е след обаждане на 112");

                entity.Property(e => e.ReportNum).HasComment("Номер на доклад от инспекция  \"XXX-YYY-ZZZ\" X=Териториално звено; Y=Номер на служебна карта на инспектор; Z=Пореден номер на протокол на инспектора (InspectionInspectors.InspectionSeqNum). NULL ако инспекцяита е DRAFT статус.");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CreatedByUser)
                    .WithMany(p => p.InspectionRegisters)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionRegister_Users");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.InspectionRegisters)
                    .HasForeignKey(d => d.DeliveryId)
                    .HasConstraintName("FK_InspectionRegister_ApplicationDelivery");

                entity.HasOne(d => d.InspectionType)
                    .WithMany(p => p.InspectionRegisters)
                    .HasForeignKey(d => d.InspectionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionsRegister_NInspectionTypes");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.InspectionRegisters)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionsRegister_NInspectionStates");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.InspectionRegisters)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_InspectionRegister_NTerritoryUnits");
            });

            modelBuilder.Entity<InspectionRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към инспекции и проверки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Сдружение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.InspectionRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.InspectionRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.InspectionRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionRegisterFiles_InspectionsRegister");
            });

            modelBuilder.Entity<InspectionVessel>(entity =>
            {
                entity.HasComment("Проверени плавателни средства (за Проверка на воден обект без инспекция)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionvessels_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Color).HasComment("Цвят");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsStored).HasComment("Флаг дали е съхранен");

                entity.Property(e => e.IsTaken).HasComment("Флаг дали е иззет");

                entity.Property(e => e.Length).HasComment("Дължина");

                entity.Property(e => e.Number).HasComment("Идентификационен номер");

                entity.Property(e => e.StorageLocation).HasComment("Място на съхранение");

                entity.Property(e => e.TotalCount).HasComment("Общ брой");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Width).HasComment("Ширина");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionVessels)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionVessels_InspectionRegister");

                entity.HasOne(d => d.VesselType)
                    .WithMany(p => p.InspectionVessels)
                    .HasForeignKey(d => d.VesselTypeId)
                    .HasConstraintName("FK_InspectionVessels_NVesselTypes");
            });

            modelBuilder.Entity<InspectionVesselActivity>(entity =>
            {
                entity.HasComment("Инспектори за дадена инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectionvesselactivities_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ActivityDescr).HasComment("Описание");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VesselActivityId).HasComment("Тип дейност на кораб");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionVesselActivities)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionVesselActivities_InspectionsRegister");

                entity.HasOne(d => d.VesselActivity)
                    .WithMany(p => p.InspectionVesselActivities)
                    .HasForeignKey(d => d.VesselActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionVesselActivities_NVesselActivities");
            });

            modelBuilder.Entity<Inspector>(entity =>
            {
                entity.HasComment("Инспектори в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"inspectors_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectionSequenceNum)
                    .HasDefaultValueSql("1")
                    .HasComment("Пореден номер на извършена инспекция (използва се за генериране на Inspections.ReportNum)");

                entity.Property(e => e.InspectorCardNum).HasComment("Номер на служебна карта  (използва се за генериране на Inspections.ReportNum)");

                entity.Property(e => e.InstitutionId).HasComment("Институция от която е инспекторът NInsititutions ");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UnregisteredPersonId).HasComment("Идентификатор на инспектор в UnregisteredPersons, ако не съществува в системата");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Идентификатор на потребител в системата (ако е регистриран в системата)");

                entity.HasOne(d => d.Institution)
                    .WithMany(p => p.Inspectors)
                    .HasForeignKey(d => d.InstitutionId)
                    .HasConstraintName("FK_Inspectors_NInsititutions");

                entity.HasOne(d => d.UnregisteredPerson)
                    .WithMany(p => p.Inspectors)
                    .HasForeignKey(d => d.UnregisteredPersonId)
                    .HasConstraintName("FK_Inspectors_UnregisteredPersons");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Inspectors)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Inspectors_Users");
            });

            modelBuilder.Entity<InstallationAquarium>(entity =>
            {
                entity.HasComment("Аквариуми към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"installationaquariums_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Volume)
                    .HasPrecision(10, 2)
                    .HasComment("Обем (куб. м.)");
            });

            modelBuilder.Entity<InstallationBasin>(entity =>
            {
                entity.HasComment("Басейни към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"installationbasins_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Area)
                    .HasPrecision(10, 2)
                    .HasComment("Площ (кв. м.)");

                entity.Property(e => e.BasinMaterialTypeId).HasComment("Вид според материала");

                entity.Property(e => e.BasinPurposeTypeId).HasComment("Вид според предназначението");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Volume)
                    .HasPrecision(10, 2)
                    .HasComment("Обем (куб. м.)");

                entity.HasOne(d => d.BasinMaterialType)
                    .WithMany(p => p.InstallationBasins)
                    .HasForeignKey(d => d.BasinMaterialTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstallationBasins_NInstallBasinMaterialTypes");

                entity.HasOne(d => d.BasinPurposeType)
                    .WithMany(p => p.InstallationBasins)
                    .HasForeignKey(d => d.BasinPurposeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstallationBasins_NInstallBasinPurposeTypes");
            });

            modelBuilder.Entity<InstallationDam>(entity =>
            {
                entity.HasComment("Язовири към съоръжение на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"installationdams_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Area)
                    .HasPrecision(10, 2)
                    .HasComment("Площ (кв. м.)");

                entity.Property(e => e.Comments).HasComment("Коментари");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<Legal>(entity =>
            {
                entity.HasComment("Юридически лица - историческа таблица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legals_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Eik).HasComment("ЕИК/БУЛСТАТ");

                entity.Property(e => e.IsLegalOwnerSameAsApplicant).HasComment("Флаг дали МОЛ съвпада със заявителя на услугата");

                entity.Property(e => e.LegalOwnerId).HasComment("Собственик/Материално отговорно лице");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Legals)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_Legals_Applications");

                entity.HasOne(d => d.LegalOwner)
                    .WithMany(p => p.Legals)
                    .HasForeignKey(d => d.LegalOwnerId)
                    .HasConstraintName("FK_Legals_Persons");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_Legals_Legals");
            });

            modelBuilder.Entity<LegalEmailAddress>(entity =>
            {
                entity.HasComment("E-mail адреси на физическо лице");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legalemailaddresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EmailAddressId).HasComment("E-mail адрес");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.EmailAddress)
                    .WithMany(p => p.LegalEmailAddresses)
                    .HasForeignKey(d => d.EmailAddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalEmailAddresses_ISS_EmailAddresses");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.LegalEmailAddresses)
                    .HasForeignKey(d => d.LegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalEmailAddresses_ISS_Legals");
            });

            modelBuilder.Entity<LegalFile>(entity =>
            {
                entity.HasComment("Файлове на юридическо лице - връзка към Files");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legalfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл на снимката");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Юридическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.LegalFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.LegalFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.LegalFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LegalFiles_Legals");
            });

            modelBuilder.Entity<LegalPhoneNumber>(entity =>
            {
                entity.HasComment("Телефонни номера на юридически лица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legalphonenumbers_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице");

                entity.Property(e => e.PhoneId).HasComment("Телефон");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.LegalPhoneNumbers)
                    .HasForeignKey(d => d.LegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalPhoneNumbers_ISS_Legals");

                entity.HasOne(d => d.Phone)
                    .WithMany(p => p.LegalPhoneNumbers)
                    .HasForeignKey(d => d.PhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalPhoneNumbers_ISS_PhoneNumbers");
            });

            modelBuilder.Entity<LegalsAddress>(entity =>
            {
                entity.HasComment("Адреси на юридически лица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"legalsaddresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес");

                entity.Property(e => e.AddressTypeId).HasComment("Тип адрес");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.LegalsAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalsAddresses_ISS_Addresses");

                entity.HasOne(d => d.AddressType)
                    .WithMany(p => p.LegalsAddresses)
                    .HasForeignKey(d => d.AddressTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalsAddresses_ISS_AddressTypes");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.LegalsAddresses)
                    .HasForeignKey(d => d.LegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_LegalsAddresses_ISS_Legals");
            });

            modelBuilder.Entity<LetterOfAttorney>(entity =>
            {
                entity.HasComment("Детайли за пълномощно");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"letterofattorney_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsUnlimited).HasComment("Флаг дали пълномощното е безсрочно");

                entity.Property(e => e.LetterNum).HasComment("Номер пълномощно на представител");

                entity.Property(e => e.LetterValidFrom).HasComment("Пълномощно валидно от");

                entity.Property(e => e.LetterValidTo).HasComment("Пълномощно валидно до");

                entity.Property(e => e.NotaryNames).HasComment("Нотариус на пълномощно");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<LogBook>(entity =>
            {
                entity.HasComment("Риболовни дневници");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"logbooks_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquacultureFacilityId).HasComment("Аквакултурно стопанство, за което е дневникът - при днев. за аквакултурно стопанство");

                entity.Property(e => e.Comments).HasComment("Коментари");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.CurrentPermitLicenseId).HasComment("Текущо удостоверение към този дневник (ако е корабен)");

                entity.Property(e => e.EndPageNum).HasComment("Крайна страница");

                entity.Property(e => e.FinishDate).HasComment("Дата на приключване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsOnline).HasComment("Флаг дали дневникът е електронен, или е на хартия");

                entity.Property(e => e.IssueDate).HasComment("Дата на предоставяне");

                entity.Property(e => e.LastPageNum).HasComment("Последен (използван) номер на страница");

                entity.Property(e => e.LegalId).HasComment("Юрид. лице, за което е дневникът - при днев. за приемане и превоз");

                entity.Property(e => e.LogBookOwnerType).HasComment("Тип на притежателя на дневника - person, legal, registeredBuyer (не важи за риболовен и аквакултурно)");

                entity.Property(e => e.LogNum).HasComment("Номер на дневник (генерира се от системата)");

                entity.Property(e => e.PersonId).HasComment("Физ. лице, за което е дневникът - при днев. за приемане и превоз");

                entity.Property(e => e.Price)
                    .HasPrecision(10, 2)
                    .HasComment("Цена");

                entity.Property(e => e.RegisteredBuyerId).HasComment("Регистриран купувач, за когото е дневникът - при днев. за ПП, приемане и превоз");

                entity.Property(e => e.ShipId).HasComment("Кораб, за който е дневникът - при риболовен дневник");

                entity.Property(e => e.StartPageNum).HasComment("Начална страница");

                entity.Property(e => e.StatusId).HasComment("Статус на дневника (нов, прекратен, презаверен)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AquacultureFacility)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.AquacultureFacilityId)
                    .HasConstraintName("FK_LogBooks_AquacultureFacilityRegister");

                entity.HasOne(d => d.CurrentPermitLicense)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.CurrentPermitLicenseId)
                    .HasConstraintName("FK_LogBooks_PermitLicensesRegister");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.LegalId)
                    .HasConstraintName("FK_LogBooks_Legals");

                entity.HasOne(d => d.LogBookType)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.LogBookTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBooks_NLogBookTypes");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_LogBooks_Persons");

                entity.HasOne(d => d.RegisteredBuyer)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.RegisteredBuyerId)
                    .HasConstraintName("FK_LogBooks_BuyerRegister");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_LogBooks_ShipRegister");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.LogBooks)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBooks_NLogBookStatuses");
            });

            modelBuilder.Entity<LogBookPageProduct>(entity =>
            {
                entity.HasComment("Продукти към страница от дневник (за превоз, първа продажба, приемане и стопанство)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"logbookpageproducts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AdmissionLogBookPageId).HasComment("Страница от дневник за Приемане");

                entity.Property(e => e.AquacultureLogBookPageId).HasComment("Страница от дневник за Аквакултурно стопанство");

                entity.Property(e => e.AverageUnitWeightKg)
                    .HasPrecision(10, 2)
                    .HasComment("Средно единично тегло в кг");

                entity.Property(e => e.CatchLocation).HasComment("Място на улова");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FirstSaleLogBookPageId).HasComment("Страница от дневник за Първа продажба");

                entity.Property(e => e.FishId).HasComment("Воден организъм");

                entity.Property(e => e.FishSizeCategoryId).HasComment("Размерна група на водния организъм (не се отнася за Калкан)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MinSize)
                    .HasPrecision(10, 2)
                    .HasComment("Минимален размер");

                entity.Property(e => e.OriginDeclarationFishId).HasComment("От коя разтоварена вече риба идва този продукт (когато имаме продукт, който идва от улов на кораб)");

                entity.Property(e => e.OriginProductId).HasComment("Първообраз на продукта (от свързан документ)");

                entity.Property(e => e.ProductFreshnessId).HasComment("Категория свежест");

                entity.Property(e => e.ProductPresentationId).HasComment("Представяне");

                entity.Property(e => e.ProductPurposeId).HasComment("Предназначение");

                entity.Property(e => e.QuantityKg)
                    .HasPrecision(10, 2)
                    .HasComment("Количество в килограми");

                entity.Property(e => e.TransportationLogBookPageId).HasComment("Страница от дненвик за Превоз");

                entity.Property(e => e.TurbotSizeGroupId).HasComment("Размерна група за калкан");

                entity.Property(e => e.UnitCount).HasComment("Брой екземпляри ");

                entity.Property(e => e.UnitPrice)
                    .HasPrecision(10, 2)
                    .HasComment("Единична цена");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AdmissionLogBookPage)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.AdmissionLogBookPageId)
                    .HasConstraintName("FK_LogBookPageProducts_AdmissionLogBookPages");

                entity.HasOne(d => d.AquacultureLogBookPage)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.AquacultureLogBookPageId)
                    .HasConstraintName("FK_LogBookPageProducts_AquacultureLogBookPages");

                entity.HasOne(d => d.FirstSaleLogBookPage)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.FirstSaleLogBookPageId)
                    .HasConstraintName("FK_LogBookPageProducts_FirstSaleLogBookPages");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBookPageProducts_NFishes");

                entity.HasOne(d => d.FishSizeCategory)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.FishSizeCategoryId)
                    .HasConstraintName("FK_LogBookPageProducts_NFishSizeCategories");

                entity.HasOne(d => d.OriginDeclarationFish)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.OriginDeclarationFishId)
                    .HasConstraintName("FK_LogBookPageProducts_OriginDeclarationFishes");

                entity.HasOne(d => d.OriginProduct)
                    .WithMany(p => p.InverseOriginProduct)
                    .HasForeignKey(d => d.OriginProductId)
                    .HasConstraintName("FK_LogBookPageProducts_LogBookPageProducts");

                entity.HasOne(d => d.ProductFreshness)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.ProductFreshnessId)
                    .HasConstraintName("FK_LogBookPageProducts_NFishFreshness");

                entity.HasOne(d => d.ProductPresentation)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.ProductPresentationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBookPageProducts_NFishPresentations");

                entity.HasOne(d => d.ProductPurpose)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.ProductPurposeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBookPageProducts_NFishSalePurpose");

                entity.HasOne(d => d.TransportationLogBookPage)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.TransportationLogBookPageId)
                    .HasConstraintName("FK_LogBookPageProducts_TransportationLogBookPages");

                entity.HasOne(d => d.TurbotSizeGroup)
                    .WithMany(p => p.LogBookPageProducts)
                    .HasForeignKey(d => d.TurbotSizeGroupId)
                    .HasConstraintName("FK_LogBookPageProducts_NTurbotSizeGroups");
            });

            modelBuilder.Entity<LogBookPermitLicense>(entity =>
            {
                entity.HasComment("История даден риболовен дневник към кое удостоверение е бил в определен период от време и от коя до коя страница.");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"logbookpermitlicenses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EndPageNum).HasComment("Крайна страница за съответното удостоверение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LogBookId).HasComment("Дневник");

                entity.Property(e => e.LogBookValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.LogBookValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.PermitLicenseRegisterId).HasComment("Удостоверение");

                entity.Property(e => e.StartPageNum).HasComment("Начална страница за съответното удостоверение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.LogBookPermitLicenses)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBookPermitLicense_LogBooks");

                entity.HasOne(d => d.PermitLicenseRegister)
                    .WithMany(p => p.LogBookPermitLicenses)
                    .HasForeignKey(d => d.PermitLicenseRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogBookPermitLicense_PermitLicensesRegister");
            });

            modelBuilder.Entity<MapApplicationTypeDeliveryType>(entity =>
            {
                entity.HasComment("Мапинг за кое заявление кой начин на връчване е позволен");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"mapapplicationtypedeliverytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationTypeId).HasComment("Тип заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryTypeId).HasComment("Тип на връчване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ApplicationType)
                    .WithMany(p => p.MapApplicationTypeDeliveryTypes)
                    .HasForeignKey(d => d.ApplicationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapApplicationTypeDeliveryTypes_NApplicationTypes");

                entity.HasOne(d => d.DeliveryType)
                    .WithMany(p => p.MapApplicationTypeDeliveryTypes)
                    .HasForeignKey(d => d.DeliveryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapApplicationTypeDeliveryTypes_NDeliveryTypes");
            });

            modelBuilder.Entity<MapApplicationTypeSubmittedByRole>(entity =>
            {
                entity.HasComment("Мапинг за кое заявление коя роля на подаващия заявление спрямо получателя е позволена");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('napplicationtypesubmittedbyroles_id_seq'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationTypeId).HasComment("Тип заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.SubmittedByRoleId).HasComment("Роля на подаващ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ApplicationType)
                    .WithMany(p => p.MapApplicationTypeSubmittedByRoles)
                    .HasForeignKey(d => d.ApplicationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapApplicationTypeSubmittedByRoles_NApplicationTypes");

                entity.HasOne(d => d.SubmittedByRole)
                    .WithMany(p => p.MapApplicationTypeSubmittedByRoles)
                    .HasForeignKey(d => d.SubmittedByRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapApplicationTypeSubmittedByRoles_NSubmittedByRoles");
            });

            modelBuilder.Entity<MapStatFormTypesEmployeeStatTypeGroup>(entity =>
            {
                entity.HasComment("Мапинг между групи статистическа информация за заети лица и типове ИСФ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"mapstatformtypesemployeestattypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.EmployeeStatTypeGroup)
                    .WithMany(p => p.MapStatFormTypesEmployeeStatTypeGroups)
                    .HasForeignKey(d => d.EmployeeStatTypeGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapStatFormTypesEmpStatTypeGroups_NEmployeeStatTypeGroups");

                entity.HasOne(d => d.StatFormType)
                    .WithMany(p => p.MapStatFormTypesEmployeeStatTypeGroups)
                    .HasForeignKey(d => d.StatFormTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapStatFormTypesEmpStatTypeGroups_NStatisticalFormTypes");
            });

            modelBuilder.Entity<MapStatFormTypesNumericStatTypeGroup>(entity =>
            {
                entity.HasComment("Мапинг между групи числова статистическа информация и типове ИСФ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"mapstatformtypesnumericstattypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.NumericStatTypeGroup)
                    .WithMany(p => p.MapStatFormTypesNumericStatTypeGroups)
                    .HasForeignKey(d => d.NumericStatTypeGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapStatFormTypesNumStatTypeGrps_NNumericStatTypeGroups");

                entity.HasOne(d => d.StatFormType)
                    .WithMany(p => p.MapStatFormTypesNumericStatTypeGroups)
                    .HasForeignKey(d => d.StatFormTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapStatFormTypesNumStatTypeGrps_NStatisticalFormTypes");
            });

            modelBuilder.Entity<MapTariffFish>(entity =>
            {
                entity.HasComment("Мапинг за коя тарифа, кои видове риба/организми отговарят");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"maptarifffishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.TariffId).HasComment("Тарифа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.MapTariffFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapTariffFishes_NFishes");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.MapTariffFishes)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapTariffFishes_NTariff");
            });

            modelBuilder.Entity<MapTariffFishingGear>(entity =>
            {
                entity.HasComment("Мапинг за коя тарифа, кои видове уреди отговарят");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"maptarifffishinggears_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MarksCalcType)
                    .HasDefaultValueSql("'ByGear'::character varying")
                    .HasComment("Начин на изчисление на количеството марки за тази тарифа - 'ByGear' - за всеки уред по 1 марка, '100m'- на всеки 100м една марка");

                entity.Property(e => e.TariffId).HasComment("Тарифа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.MapTariffFishingGears)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapTariffFishingGears_NFishingGears");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.MapTariffFishingGears)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MapTariffFishingGears_NTariff");
            });

            modelBuilder.Entity<MapWaterTypePermitType>(entity =>
            {
                entity.HasComment("Таблица за Код на вида воден обект по Наредба 7 - връзка между вид разрешително и водни обекти");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"mapwatertypepermittypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на вид воден обект");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PermitTypeId).HasComment("Тип разрешително");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.WaterTypeId).HasComment("Тип воден обект");

                entity.HasOne(d => d.PermitType)
                    .WithMany(p => p.MapWaterTypePermitTypes)
                    .HasForeignKey(d => d.PermitTypeId)
                    .HasConstraintName("FK_MapWaterTypePermitTypes_NCommercialFishingPermitTypes");

                entity.HasOne(d => d.WaterType)
                    .WithMany(p => p.MapWaterTypePermitTypes)
                    .HasForeignKey(d => d.WaterTypeId)
                    .HasConstraintName("FK_MapWaterTypePermitTypes_NWaterTypes");
            });

            modelBuilder.Entity<MdrAcdrCatchStatus>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_ACDR_Catch_Status_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrAgreementType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_Agreement_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrBooleanType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Boolean_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCharteringType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_Chartering_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCommEquipType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Comm_Equip_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrConversionFactor>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Conversion_Factor_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCountryCurrency>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Country_Currency_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCrFishingCategory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_CR_Fishing_Category_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCrLandIndicator>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_CR_Land_Indicator_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCrReportType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_CR_Report_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCrSovWater>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_CR_Sov_Waters_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrCrUnit>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_CR_Unit_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrDataType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_MDM\".\"MDR_Data_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrDeckMachineryType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Deck_Machinery_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrEffortZone>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Effort_Zone_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaBaitType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Bait_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaBftSizeCategory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_BFT_Size_Category_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaBrDef>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_BR_Def_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaBrEu>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_BR_EU_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaCatchType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Catch_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaCharacteristic>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Characteristic_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaDeviceGearAttachment>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Device_Gear_Attachment_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaFishery>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Fishery_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaGearCharacteristic>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Gear_Characteristic_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaGearProblem>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Gear_Problem_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaGearRecovery>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Gear_Recovery_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaGearRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Gear_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaNeafcStock>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_NEAFC_Stock_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaQueryParameter>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Query_Parameter_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaQueryType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Query_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaReasonArrival>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Reason_Arrival_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaReasonDeparture>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Reason_Departure_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaReasonDiscard>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Reason_Discard_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaReasonEntry>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Reason_Entry_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaTripIdType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Trip_Id_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaVesselRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FA_Vessel_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaoFishingArea>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FAO_Fishing_Area_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFaoSpecy>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FAO_species_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFarFishCategory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FAR_Fish_Category_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFarm>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FARM_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishFinderEquipType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FishFinder_Equip_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishFreshness>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Fish_Freshness_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishPackaging>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Fish_Packaging_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishPresentation>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Fish_Presentation_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishPreservation>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Fish_Preservation_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishSizeCategory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Fish_Size_Category_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishSizeClass>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Fish_Size_Class_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFishingTripType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Fishing_Trip_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapCharacteristic>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Characteristic_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapCoastalParty>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Coastal_Party_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapDocType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Doc_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapFlagState>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Flag_State_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapIdType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FLAP_Id_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapQuotaType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Quota_type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapRequestPurpose>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_Request_Purpose_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFlapWfStep>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_FLAP_WF_Steps_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxContactRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Contact_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxFaFmc>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FLUX_FA_FMC_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxFaReportType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FLUX_FA_Report_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxFaType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FLUX_FA_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpMessageId>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Message_Id_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpParty>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Party_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpPurpose>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Purpose_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpResponse>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Response_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpValLevel>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Val_Level_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxGpValType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_GP_Val_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxLocationChar>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_FLUX_Location_Char_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxLocationType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Location_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxMdrQueryType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_MDM\".\"MDR_FLUX_MDR_Query_type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxProcessType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Process_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxSalesPartyIdType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Sales_Party_Id_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxSalesPartyRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Sales_Party_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxSalesQueryParam>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Sales_Query_Param_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxSalesQueryParamRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Sales_Query_Param_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxSalesType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Sales_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxTelecomUse>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Telecom_Use_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxUnit>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Unit_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVehicleIdType>(entity =>
            {
                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_FLUX_Vehicle_Id_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselAdminType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Admin_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselConstrType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Constr_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselDimType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Dim_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselEngineRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Engine_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselGearRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Gear_Role_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselHistChar>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Hist_Char_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselIdType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_FLUX_Vessel_Id_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselPositionType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel_Position\".\"MDR_FLUX_Vessel_Position_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselQueryParam>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Query_Param_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselQueryType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Query_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselRegstrType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Regstr_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselReportType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Report_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrFluxVesselTechType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_FLUX_Vessel_Tech_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrGearType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Gear_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrGender>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Gender_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrGfcmGsa>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_GFCM_GSA_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrLocation>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Location_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrManagementArea>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Management_Area_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrMdmBr>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_MDM\".\"MDR_MDM_BR_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrMdmBrDef>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_MDM\".\"MDR_MDM_BR_Def_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrMemberState>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Member_State_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrNavigEquipType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Navig_Equip_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrProductDestination>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Product_Destination_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrPropellerType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Propeller_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrQuotaLocation>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_Quota_Location_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrQuotaObject>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_ACDR\".\"MDR_Quota_Object_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrRfmo>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_RFMOs_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrSalesBr>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Sales_BR_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrSalesBrDef>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Sales_BR_Def_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrStatRect>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Stat_Rect_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrStorageType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Storage_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrTargetSpeciesGroup>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Target_Species_Group_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrTerritory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Territory_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrUnDataType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_UN_Data_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVehicleType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Sales\".\"MDR_Vehicle_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselActivity>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Vessel_Activity_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselBr>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_BR_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselBrDef>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_BR_Def_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselCategory>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Category_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselCrewType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FLAP\".\"MDR_Vessel_Crew_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselEvent>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Event_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselExportType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Export_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselHullType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Hull_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselPhotoType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Photo_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselPort>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Port_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselPublicAidType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Public_Aid_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselSegment>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_Vessel_Segment_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselStorageType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_FA\".\"MDR_Vessel_Storage_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVesselType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Vessel_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVmsBr>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel_Position\".\"MDR_VMS_BR_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVmsBrDef>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel_Position\".\"MDR_VMS_BR_Def_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVmsBrParam>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel_Position\".\"MDR_VMS_BR_Param_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrVmsSatelliteOper>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_Vessel\".\"MDR_VMS_Satellite_Oper_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<MdrWeightMeasureType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("nextval(('\"FLUX_General\".\"MDR_Weight_Measure_Type_seq\"'::text)::regclass)");

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("'creator'::character varying");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidFrom).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ValidTo).HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone");
            });

            modelBuilder.Entity<NaddressType>(entity =>
            {
                entity.HasComment("Видове адреси");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"naddresstypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NapplicationStatus>(entity =>
            {
                entity.HasComment("Статуси на заявления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.Color).HasComment("Цвят на статуса в интерфейса (и справките)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ExpectedRunTime).HasComment("Очаквано време до завършване на стъпката (в минути)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NapplicationStatusHierarchy>(entity =>
            {
                entity.HasComment("Преходи в процеси на административни услуги");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationstatushierarchy_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationStatusHierTypeId).HasComment("Вид процес за административни услуги");

                entity.Property(e => e.ChildStatusId).HasComment("Към статус");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ExecutionCodeIdentifier).HasComment("Идентификатор на кода, който трябва да се изпълни при прехода");

                entity.Property(e => e.ParentStatusId).HasComment("От статус");

                entity.Property(e => e.ProceedLabelResource).HasComment("Име на ресурс, който да се зареди в бутона за продължаване към следваща стъпка");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.ApplicationStatusHierType)
                    .WithMany(p => p.NapplicationStatusHierarchies)
                    .HasForeignKey(d => d.ApplicationStatusHierTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationStatusHierarchy_NApplicationStatusHierarchyTypes");

                entity.HasOne(d => d.ChildStatus)
                    .WithMany(p => p.NapplicationStatusHierarchyChildStatuses)
                    .HasForeignKey(d => d.ChildStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationStatusHierarchy_NApplicationStatuses_Child");

                entity.HasOne(d => d.ParentStatus)
                    .WithMany(p => p.NapplicationStatusHierarchyParentStatuses)
                    .HasForeignKey(d => d.ParentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationStatusHierarchy_NApplicationStatuses_Parent");
            });

            modelBuilder.Entity<NapplicationStatusHierarchyType>(entity =>
            {
                entity.HasComment("Видове процеси за административни услуги");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationstatushierarchytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NapplicationType>(entity =>
            {
                entity.HasComment("Видове заявления за административни услуги");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GroupId).HasComment("Група на заявлението");

                entity.Property(e => e.IsEas)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали е Електронна Административна Услуга");

                entity.Property(e => e.IsPaid).HasComment("Флаг дали услугата изисква заплащане");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.PageCode).HasComment("Код на форма за обработка на заявления");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NapplicationTypes)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_NApplicationTypes_NApplicationTypeGroups");

                entity.HasOne(d => d.PageCodeNavigation)
                    .WithMany(p => p.NapplicationTypes)
                    .HasForeignKey(d => d.PageCode)
                    .HasConstraintName("FK_NApplicationTypes_NPageCodes");
            });

            modelBuilder.Entity<NapplicationTypeGroup>(entity =>
            {
                entity.HasComment("Групи на видове заявления за административни услуги (за улеснение в UI-а)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationtypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NapplicationTypeHierType>(entity =>
            {
                entity.HasComment("Видове заявления за административни услуги за дадени видове процеси (йерархия на стъпките)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"napplicationtypehiertypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationTypeId).HasComment("Тип заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ApplicationHierType)
                    .WithMany(p => p.NapplicationTypeHierTypes)
                    .HasForeignKey(d => d.ApplicationHierTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationTypeHierTypes_NApplicationStatusHierarchyTypes");

                entity.HasOne(d => d.ApplicationType)
                    .WithMany(p => p.NapplicationTypeHierTypes)
                    .HasForeignKey(d => d.ApplicationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationTypeHierTypes_NApplicationTypes");
            });

            modelBuilder.Entity<NapplicationTypeTariff>(entity =>
            {
                entity.HasComment("Такси за заплащане на видове заявления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('napplicationтypetariff_id_seq'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationTypeId).HasComment("Заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.TariffId).HasComment("Цена от тарифа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.ApplicationType)
                    .WithMany(p => p.NapplicationTypeTariffs)
                    .HasForeignKey(d => d.ApplicationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationTypeTariff_NApplicationTypes");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.NapplicationTypeTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NApplicationТypeTariff_NTariff");
            });

            modelBuilder.Entity<NaquacultureInstallationType>(entity =>
            {
                entity.HasComment("Видове съоръжения към аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"naquacultureinstallationtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NaquaculturePowerSupplyType>(entity =>
            {
                entity.HasComment("Вид захранващ източник на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"naquaculturepowersupplytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NaquacultureStatus>(entity =>
            {
                entity.HasComment("Статуси на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"naquaculturestatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Уникален код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NaquacultureWaterAreaType>(entity =>
            {
                entity.HasComment("Видове водни обекти на аквакултурно стопанство");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"naquaculturewaterareatypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Уникалнo число (1-6) за съставяне на номер по УРОР");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Nauanstatus>(entity =>
            {
                entity.HasComment("Вид отчет на улов (Стандартен улов, Маломерна риба и Изхвърляне)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nauanstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NauditLogActionType>(entity =>
            {
                entity.HasComment("Типове действия, за които се пази детайлен одит лог");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"nauditlogactiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Таблица");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NauditLogTable>(entity =>
            {
                entity.HasComment("Списък с таблици, за които да се пази детайлен лог");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"SysLog\".\"nauditlogtables_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание на таблицата");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsAuditLogEnabled)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали е разрешено детайлното логване на действия");

                entity.Property(e => e.SchemaName).HasComment("Модул на системата (схема)");

                entity.Property(e => e.TableName).HasComment("Таблица");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<NbuyerLicenseType>(entity =>
            {
                entity.HasComment("Типове удостоверения на купувач, ЦПП (Удостоверение по закона за храните, по Закона за ветеринарномедицинска дейност)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"nbuyerlicensetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NbuyerStatus>(entity =>
            {
                entity.HasComment("Статуси на купувачи (Регистриран купувач, ЦПП) (Заявен, Активен, Прекратен)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"nbuyerstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NbuyerType>(entity =>
            {
                entity.HasComment("Типове купувачи (Регистриран купувач, ЦПП)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCPP\".\"nbuyertypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcancellationReason>(entity =>
            {
                entity.HasComment("Причини за прекратяване/заличаване/отказ на регистровия запис");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"ncancellationreasons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Group).HasComment("Група на причините");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcatchFishUnloadType>(entity =>
            {
                entity.HasComment("Видове разтоварване на улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"ncatchfishunloadtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcatchInspectionType>(entity =>
            {
                entity.HasComment("Вид отчет на улов (Стандартен улов, Маломерна риба и Изхвърляне)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ncatchinspectiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcatchType>(entity =>
            {
                entity.HasComment("Състояние на улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"ncatchtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrFaCatchTypeId).HasComment("Връзка с FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrFaCatchType)
                    .WithMany(p => p.NcatchTypes)
                    .HasForeignKey(d => d.MdrFaCatchTypeId)
                    .HasConstraintName("FK_NCatchTypes_MDR_FA_Catch_Type");
            });

            modelBuilder.Entity<NcatchZone>(entity =>
            {
                entity.HasComment("Зони за улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"ncatchzones_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Gfcmquadrant).HasComment("Квадрант по GFCM");

                entity.Property(e => e.QuadrantCoodtinates).HasComment("Координати на квадранта");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.ZoneNum).HasComment("Номер на зона");

                entity.HasOne(d => d.MdrStatRect)
                    .WithMany(p => p.NcatchZones)
                    .HasForeignKey(d => d.MdrStatRectId)
                    .HasConstraintName("FK_NCatchZones_MDR_Stat_Rect");
            });

            modelBuilder.Entity<NchangeOfCircumstancesType>(entity =>
            {
                entity.HasComment("Типове заявки за промяна в обстоятелствата или изтриване/прекратяване на обекти");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"nchangeofcircumstancestypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataType)
                    .HasDefaultValueSql("'FreeText'::character varying")
                    .HasComment("Тип на въвежданите данни ('FreeText', 'Person', 'Legal', 'User', 'Ship', 'Address')");

                entity.Property(e => e.IsDeletion).HasComment("Флаг дали промяната е изтриване/прекратяване или само редакция");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PageCode).HasComment("Страници/заявления в приложението, за които се използва");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.PageCodeNavigation)
                    .WithMany(p => p.NchangeOfCircumstancesTypes)
                    .HasForeignKey(d => d.PageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NChangeOfCircumstancesTypes_NPageCodes");
            });

            modelBuilder.Entity<NcheckResolution>(entity =>
            {
                entity.HasComment("Статуси на резултат от кръстосана проверка");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Checks\".\"ncheckresolutions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcommercialFishingPermitLicenseType>(entity =>
            {
                entity.HasComment("Типове удостоверения за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"ncommercialfishingpermitlicensetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.ShortName).HasComment("Кратко име за показване в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NcommercialFishingPermitType>(entity =>
            {
                entity.HasComment("Видове разрешителни за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"ncommercialfishingpermittypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.ShortName).HasComment("Кратко име за показване в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NconfiscatedAppliance>(entity =>
            {
                entity.HasComment("Видове конфискувани приспособления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nconfiscatedappliances_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NconfiscationAction>(entity =>
            {
                entity.HasComment("Видове предприети действие при конфискуване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nconfiscationactions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ActionGroup).HasComment("Група (за риба или уреди)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NconfiscationInstitution>(entity =>
            {
                entity.HasComment("Институции за принудително събиране");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nconfiscationinstitutions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ncountry>(entity =>
            {
                entity.HasComment("Държави");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"ncountries_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Трибуквен код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrTerritoryId).HasComment("Връзка с FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrTerritory)
                    .WithMany(p => p.Ncountries)
                    .HasForeignKey(d => d.MdrTerritoryId)
                    .HasConstraintName("FK_NCountries_MDR_Territory");
            });

            modelBuilder.Entity<Ncourt>(entity =>
            {
                entity.HasComment("Съдилища");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ncourts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NdeliveryType>(entity =>
            {
                entity.HasComment("Начини за връчване на резултат от завление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"ndeliverytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ndepartment>(entity =>
            {
                entity.HasComment("Отдели в ИАРА");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"ndepartments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ndistrict>(entity =>
            {
                entity.HasComment("Области");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"ndistricts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NdocumentType>(entity =>
            {
                entity.HasComment("Видове документи за самоличност");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"ndocumenttypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NemployeeStatType>(entity =>
            {
                entity.HasComment("Типове статистическа информация за заети лица за дадена група (Възраст: под 15, между 15-24, ...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nemployeestattypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.ValueFrom).HasComment("Начало на интервала от стойности");

                entity.Property(e => e.ValueTo).HasComment("Край на интервала от стойности");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NemployeeStatTypes)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NEmployeeStatTypes_NEmployeeStatTypeGroups");
            });

            modelBuilder.Entity<NemployeeStatTypeGroup>(entity =>
            {
                entity.HasComment("Групи статистическа информация за заети лица (Продължителност на работен ден, Възрасст, Образование...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nemployeestattypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NeventType>(entity =>
            {
                entity.HasComment("Видове събития в корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"neventtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GroupId).HasComment("Група на събитието");

                entity.Property(e => e.MdrVesselEventId).HasComment("FLUX ID");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NeventTypes)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NEventTypes_NEventTypeGroups");

                entity.HasOne(d => d.MdrVesselEvent)
                    .WithMany(p => p.NeventTypes)
                    .HasForeignKey(d => d.MdrVesselEventId)
                    .HasConstraintName("FK_NEventTypes_MDR_Vessel_Event");
            });

            modelBuilder.Entity<NeventTypeGroup>(entity =>
            {
                entity.HasComment("Видове събития в корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"neventtypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.HasComment("Новини");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"News\".\"news_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ContentSummary).HasComment("Обобщение на съдържанието за заглавната страница");

                entity.Property(e => e.Contents).HasComment("Съдържание");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasNotificationsSent).HasComment("Флаг дали са разпратени нотификации за новината до абонатите");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsDistrictLimited).HasComment("Флаг дали новината се отнася за конкретна област. Ако не - значи излиза за всички (праща се до всички абонирани за всички области)");

                entity.Property(e => e.PublishEnd).HasComment("Край на публичност на новината");

                entity.Property(e => e.PublishStart).HasComment("Начало на публикуване на новината");

                entity.Property(e => e.Title).HasComment("Заглавие");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<NewsDistrict>(entity =>
            {
                entity.HasComment("Области, за които се отнася дадена новина");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"News\".\"newsdistricts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.NewsDistricts)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsDistricts_NDistricts");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsDistricts)
                    .HasForeignKey(d => d.NewsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsDistricts_News");
            });

            modelBuilder.Entity<NewsDistrictUserSubscription>(entity =>
            {
                entity.HasComment("Области, за които потребителят е направил абонамент за новини през мобилното приложение");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"News\".\"newsdistrictusersubscriptions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.NewsDistrictUserSubscriptions)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsDistrictUserSubscriptions_NDistricts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NewsDistrictUserSubscriptions)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsDistrictUserSubscriptions_Users");
            });

            modelBuilder.Entity<NewsFile>(entity =>
            {
                entity.HasComment("Прикачени документи към новини");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"News\".\"newsfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.NewsFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.NewsFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.NewsFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsFiles_News");
            });

            modelBuilder.Entity<NfileType>(entity =>
            {
                entity.HasComment("Видове файлове за прикачване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"nfiletypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.IsReadOnly).HasComment("Флаг дали този тип файл може само да се качи и повече не може да се трие и подменя, само да се сваля (използва се за качени подписани PDFи)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Nfish>(entity =>
            {
                entity.HasComment("Водни организми/Риби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на рибата");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishFamilyId).HasComment("Семейство водни организми/Риби");

                entity.Property(e => e.FishGroupId).HasComment("Група водни организми/Риби");

                entity.Property(e => e.IsBlackSea).HasComment("Флаг дали рибата се среща в Черно море");

                entity.Property(e => e.IsDanube).HasComment("Флаг дали рибата се среща в р. Дунав");

                entity.Property(e => e.IsInternal).HasComment("Флаг дали рибата се среща във въртешни водоеми");

                entity.Property(e => e.MdrFaoSpeciesId).HasComment("Идентификатор във FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.NameEn).HasComment("Име на английски");

                entity.Property(e => e.NameLatin).HasComment("Име на латински");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.FishFamily)
                    .WithMany(p => p.Nfishes)
                    .HasForeignKey(d => d.FishFamilyId)
                    .HasConstraintName("FK_ISS_NFishes_ISS_NFishFamilies");

                entity.HasOne(d => d.FishGroup)
                    .WithMany(p => p.Nfishes)
                    .HasForeignKey(d => d.FishGroupId)
                    .HasConstraintName("FK_ISS_NFishes_ISS_NFishGroups");

                entity.HasOne(d => d.MdrFaoSpecies)
                    .WithMany(p => p.Nfishes)
                    .HasForeignKey(d => d.MdrFaoSpeciesId)
                    .HasConstraintName("FK_NFishes_MDR_FAO_species");
            });

            modelBuilder.Entity<NfishFamily>(entity =>
            {
                entity.HasComment("Семейства водни организми/Риби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishfamilies_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FamilyType).HasComment("Тип семейство (за целите на проверки и филтриране по конкретни типове семейства в интерфейса)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.NameEn).HasComment("Име на английски");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishFreshness>(entity =>
            {
                entity.HasComment("Състояние на улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nfishfreshness_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrFishFreshness)
                    .WithMany(p => p.NfishFreshnesses)
                    .HasForeignKey(d => d.MdrFishFreshnessId)
                    .HasConstraintName("FK_NFishFreshness_MDR_Fish_Freshness");
            });

            modelBuilder.Entity<NfishGroup>(entity =>
            {
                entity.HasComment("Групи водни организми/Риби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishgroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.NameEn).HasComment("Име на английски");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishPresentation>(entity =>
            {
                entity.HasComment("Представяне на улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nfishpresentations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrFishPresentation)
                    .WithMany(p => p.NfishPresentations)
                    .HasForeignKey(d => d.MdrFishPresentationId)
                    .HasConstraintName("FK_NCatchFishPresentations_MDR_Fish_Presentation");
            });

            modelBuilder.Entity<NfishSalePurpose>(entity =>
            {
                entity.HasComment("Предназначение на улов от първа продажба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nfishsalepurpose_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishSex>(entity =>
            {
                entity.HasComment("Пол на рибите");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishsex_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishSize>(entity =>
            {
                entity.HasComment("Размер на улов - LCS, BMS (below minimum)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nfishsizes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrFishSizeClassId).HasComment("Връзка с FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrFishSizeClass)
                    .WithMany(p => p.NfishSizes)
                    .HasForeignKey(d => d.MdrFishSizeClassId)
                    .HasConstraintName("FK_NFishSizes_MDR_Fish_Size_Class");
            });

            modelBuilder.Entity<NfishSizeCategory>(entity =>
            {
                entity.HasComment("Размерна група на улов от първа продажба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nfishsizecategories_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrFishSizeCategory)
                    .WithMany(p => p.NfishSizeCategories)
                    .HasForeignKey(d => d.MdrFishSizeCategoryId)
                    .HasConstraintName("FK_NFishSizeCategories_MDR_Fish_Size_Category");
            });

            modelBuilder.Entity<NfishingGear>(entity =>
            {
                entity.HasComment("Риболовни уреди");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishinggears_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Трибуквен код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.GearParametersType)
                    .HasDefaultValueSql("'Common'::character varying")
                    .HasComment("Тип параметри, които се въвеждат за този уред (Common / PoundNet )");

                entity.Property(e => e.GearTypeId).HasComment("Група уред");

                entity.Property(e => e.IsForMutualFishing).HasComment("Флаг дали уредът се използва за съвместен риболов.");

                entity.Property(e => e.IsNetType).HasComment("Флаг дали уредът е от мрежен тип");

                entity.Property(e => e.MdrGearTypeId).HasComment("Идентификатор във FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.GearType)
                    .WithMany(p => p.NfishingGears)
                    .HasForeignKey(d => d.GearTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_NFishingGears_ISS_NFishingGearTypes");

                entity.HasOne(d => d.MdrGearType)
                    .WithMany(p => p.NfishingGears)
                    .HasForeignKey(d => d.MdrGearTypeId)
                    .HasConstraintName("FK_NFishingGears_MDR_Gear_Type");
            });

            modelBuilder.Entity<NfishingGearCheckReason>(entity =>
            {
                entity.HasComment("Причини за маркиране на уреди");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nfishinggearcheckreasons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishingGearMarkStatus>(entity =>
            {
                entity.HasComment("Стауси на марки за риболовен уред");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nfishinggearmarkstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на статус");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishingGearPingerStatus>(entity =>
            {
                entity.HasComment("Стауси на пингери за риболовен уред");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nfishinggearpingerstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на статус");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishingGearRecheckReason>(entity =>
            {
                entity.HasComment("Причина за повторно маркиране на уредите");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nfishinggearrecheckreasons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfishingGearType>(entity =>
            {
                entity.HasComment("Групи риболовни уреди");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfishinggeartypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Трибуквен код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasHooks).HasComment("Флаг - дали типът уред има куки (за да се посочва броят им при стр. от риболовен дневник)");

                entity.Property(e => e.MdrGearTypeId).HasComment("Идентификатор във FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrGearType)
                    .WithMany(p => p.NfishingGearTypes)
                    .HasForeignKey(d => d.MdrGearTypeId)
                    .HasConstraintName("FK_NFishingGearTypes_MDR_Gear_Type");
            });

            modelBuilder.Entity<NfleetType>(entity =>
            {
                entity.HasComment("Видове флот");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nfleettypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasControlCard).HasComment("Флаг дали кораби от този флот имат контролен талон");

                entity.Property(e => e.HasFishingCapacity).HasComment("Флаг дали флотът има риболовен капацитет");

                entity.Property(e => e.HasFitnessCertificate).HasComment("Флаг дали кораби от този флот имат свидетелство за годност");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NfuelType>(entity =>
            {
                entity.HasComment("Видове гориво");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nfueltypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ngender>(entity =>
            {
                entity.HasComment("Пол");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"ngenders_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NgrossTonageStatInterval>(entity =>
            {
                entity.HasComment("Интервали за бруто тегло на кораба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"ngrosstonagestatintervals_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NhatcheryEquipmentType>(entity =>
            {
                entity.HasComment("Видове технологично оборудване в риболюпилнята");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"nhatcheryequipmenttypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NholderGroundsForUseType>(entity =>
            {
                entity.HasComment("Типове основания за ползване на кораб/далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nholdergroundsforusetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на статус");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NhullMaterial>(entity =>
            {
                entity.HasComment("Видове материал на корпуса");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nhullmaterials_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrVesselHullTypeId).HasComment("FLUX ID");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrVesselHullType)
                    .WithMany(p => p.NhullMaterials)
                    .HasForeignKey(d => d.MdrVesselHullTypeId)
                    .HasConstraintName("FK_NHullMaterials_MDR_Vessel_Hull_Type");
            });

            modelBuilder.Entity<NinspDeliveryConfirmationType>(entity =>
            {
                entity.HasComment("Начини за потвърждение за връчване на АУАН/НП");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspdeliveryconfirmationtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Group)
                    .HasDefaultValueSql("'АУАН'::character varying")
                    .HasComment("Група (АУАН или НП)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinspDeliveryType>(entity =>
            {
                entity.HasComment("Начини на връчване на АУАН/НП");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspdeliverytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Group).HasComment("Група (АУАН или НП)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinspectedPersonType>(entity =>
            {
                entity.HasComment("Типове проверявани лица (Собственик, Ползвател, Купувач, Капитан, ...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspectedpersontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinspectionCheckType>(entity =>
            {
                entity.HasComment("Видове инспекции и проверки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspectionchecktypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CheckType)
                    .HasDefaultValueSql("'bool'::character varying")
                    .HasComment("Тип стойности (bool / triple)");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DescriptionLabel).HasComment("Етикет с описание какво се попълва в полето Description");

                entity.Property(e => e.HasDescription).HasComment("Флаг дали срещу тази отметка да има и textbox за допълнителни детайли");

                entity.Property(e => e.InspectionTypeId).HasComment("Тип инспекция");

                entity.Property(e => e.IsMandatory).HasComment("Флаг дали е задължително да се попълни");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.InspectionType)
                    .WithMany(p => p.NinspectionCheckTypes)
                    .HasForeignKey(d => d.InspectionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NInspectionCheckTypes_NInspectionTypes");
            });

            modelBuilder.Entity<NinspectionObservationTextCategory>(entity =>
            {
                entity.HasComment("Мапинг за коя инспекция в коя категория трябва да има поле за Наблюдяния и нарушения");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspectionobservationtextcategories_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.InspectionType)
                    .WithMany(p => p.NinspectionObservationTextCategories)
                    .HasForeignKey(d => d.InspectionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NInspectionObservationTextCategories_NInspectionTypes");
            });

            modelBuilder.Entity<NinspectionState>(entity =>
            {
                entity.HasComment("Статус на доклад ( редакция / завършен / предаден / подписан / ? )");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspectionstates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinspectionType>(entity =>
            {
                entity.HasComment("Видове инспекции и проверки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninspectiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinstallationBasinMaterialType>(entity =>
            {
                entity.HasComment("Видове басейни според материала");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"ninstallationbasinmaterialtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinstallationBasinPurposeType>(entity =>
            {
                entity.HasComment("Видове басейни според предназначението");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"ninstallationbasinpurposetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinstallationCollectorType>(entity =>
            {
                entity.HasComment("Видове колектори");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"ninstallationcollectortypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NinstallationNetCageType>(entity =>
            {
                entity.HasComment("Видове мрежени клетки (садки)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"ninstallationnetcagetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ninstitution>(entity =>
            {
                entity.HasComment("Други институции, с които се провеждат съвместни инспекции");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ninstitutions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NlogBookStatus>(entity =>
            {
                entity.HasComment("Статус на дневника (нов, прекратен, презаверен)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nlogbookstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NlogBookType>(entity =>
            {
                entity.HasComment("Видове дневници (корабен, ЦПП, превоз, приемане)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nlogbooktypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NmobileVersion>(entity =>
            {
                entity.HasComment("Минимални версии на страници в мобилното приложение, за да може да работи. Ако версията е по-малка от посочената, излиза предупреждение че трябва да качи версията до последна.");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('mobileversions_id_seq'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ForceMinBuildNum).HasComment("Минимален номер на версия за тази страница, която може да се поддържа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Ostype).HasComment("Вид операционна система (Android, iOS, UWP)");

                entity.Property(e => e.PageCode).HasComment("Код на страница от приложението или MOBILE_PUBLIC_ALL или MOBILE_INSP_ALL");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PageCodeNavigation)
                    .WithMany(p => p.NmobileVersions)
                    .HasForeignKey(d => d.PageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NMobileVersions_NPageCodes");
            });

            modelBuilder.Entity<Nmunicipality>(entity =>
            {
                entity.HasComment("Общини");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nmunicipalities_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DistrictId).HasComment("Област");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.Nmunicipalities)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NMunicipalities_NRegions");
            });

            modelBuilder.Entity<NnomenclatureGroup>(entity =>
            {
                entity.HasComment("Списък с номенклатури и техните групи за показване в UI за редакция на номенклатури");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nnomenclaturegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Name).HasComment("Група на номенклатура");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<NnomenclatureTable>(entity =>
            {
                entity.HasComment("Списък с номенклатури и техните групи за показване в UI за редакция на номенклатури");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nnomenclaturetables_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CanDeleteRows)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали може да се изтриват записи през интерфейса на приложението");

                entity.Property(e => e.CanEditRows)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали може да се редактира през интерфейса на приложението");

                entity.Property(e => e.CanInsertRows)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали може да се добавят записи през интерфейса на приложението");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataLastEditOn)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Дата на последна редакция/добавяне на данни в тази номенклатура");

                entity.Property(e => e.Description).HasComment("Описание на номенклатурата");

                entity.Property(e => e.GroupId).HasComment("Група номенклатури");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Name).HasComment("Име на таблица");

                entity.Property(e => e.SchemaName).HasComment("Схема в базата");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NnomenclatureTables)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_NNomenclatureTables_NNomenclatureGroups");
            });

            modelBuilder.Entity<NnotificationTemplate>(entity =>
            {
                entity.HasComment("Шаблони за съобщения по мейл/мобилно/web, които да се изпращат");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"nnotificationtemplates_id_seq\"'::text)::regclass)")
                    .HasComment("Идентификатор на съобщение");

                entity.Property(e => e.Body).HasComment("Текст на съобщението");

                entity.Property(e => e.Code).HasComment("Код на шаблон");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DelayMinutes).HasComment("След колко минути след/преди настъпване на събитието (описано в Code) да изпрати нотификация");

                entity.Property(e => e.HasEmailNotification).HasComment("Флаг дали да изпрати нотификация по мейл");

                entity.Property(e => e.HasWebNotification).HasComment("Флаг дали да покаже нотификация в уеб приложението");

                entity.Property(e => e.SubCode).HasComment("Под-тип на шаблон - използва се за вариации на едно и също съобщение като код");

                entity.Property(e => e.Subject).HasComment("Заглавие на съобщението");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NnumericStatType>(entity =>
            {
                entity.HasComment("Типове числова статистическа информация (пр.: Финансова: Приходи от риболов, Приходи от сезонен превоз,...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nnumericstattypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataType).HasComment("Тип на стойността (Numeric, Integer, Money)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.NnumericStatTypes)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NNumericStatTypes_NNumericStatTypeGroups");
            });

            modelBuilder.Entity<NnumericStatTypeGroup>(entity =>
            {
                entity.HasComment("Групи числова статистическа информация (Приходи, Разходи, Стойност на Информация за лица,...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nnumericstattypegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NobservationTool>(entity =>
            {
                entity.HasComment("Вид средство за наблюдение (бинокъл, радар, AIS, VMS, друго...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nobservationtools_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsOnBoardType)
                    .HasDefaultValueSql("'Both'::character varying")
                    .HasComment("Дали инструментът се използва от борда на инспектиращия кораб (OnBoard), или от Център за наблюдение (Center) или и двете (Both)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NotificationsLog>(entity =>
            {
                entity.HasComment("Лог на изпратените нотификации в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"notificationslog_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Message).HasComment("Съобщение ");

                entity.Property(e => e.NotificationId).HasComment("Нотификация");

                entity.Property(e => e.ReceveDateTime).HasComment("Дата и час на прочитане на нотификацията");

                entity.Property(e => e.SentDateTime).HasComment("Дата и час на изпращане на нотификацията");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.NotificationsLogs)
                    .HasForeignKey(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationsLog_NNotificationTemplates");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NotificationsLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationsLog_Users");
            });

            modelBuilder.Entity<NpageCode>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_Admin_NPageCodes");

                entity.HasComment("Видове файлове за прикачване");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpatrolVehicleType>(entity =>
            {
                entity.HasComment("Вид патрулно средство (катер, лодка, въздушен патрул, друго...)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npatrolvehicletypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.VehicleType)
                    .HasDefaultValueSql("'Marine'::character varying")
                    .HasComment("Тип превозно средсство (Морско / Наземно / Въздушно)");
            });

            modelBuilder.Entity<NpaymentStatus>(entity =>
            {
                entity.HasComment("Статуси на плащания");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"npaymentstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpaymentType>(entity =>
            {
                entity.HasComment("Типове плащания (Касово, ePay, PayEGov, ePOS)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"npaymenttypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsOnline)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали плащането се извършва онлайн или на каса");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpenalAuthorityType>(entity =>
            {
                entity.HasComment("Видове наказващи органи");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npenalauthoritytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpenalDecreeSanctionType>(entity =>
            {
                entity.HasComment("Типове сакнции на наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npenaldecreesanctiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpenalDecreeStatusType>(entity =>
            {
                entity.HasComment("Типове статуси на наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npenaldecreestatustypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpenalDecreeType>(entity =>
            {
                entity.HasComment("Типове наказателни постановления (Предупреждение, Споразумение, НП)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npenaldecreetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpenalPointStatus>(entity =>
            {
                entity.HasComment("Типове статуси на обжалване на \r\nнаказателни точки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"npenalpointstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Npermission>(entity =>
            {
                entity.HasComment("Права за достъп");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"npermissions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.PermissionGroupId).HasComment("Група");

                entity.Property(e => e.PermissionTypeId).HasComment("Тип на правото (Read/Add/Edit/Delete/Restore/Other)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.PermissionGroup)
                    .WithMany(p => p.Npermissions)
                    .HasForeignKey(d => d.PermissionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_NPermissions_UsrMgmt_NPermissionGroups");

                entity.HasOne(d => d.PermissionType)
                    .WithMany(p => p.Npermissions)
                    .HasForeignKey(d => d.PermissionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NPermissions_NPermissionTypes");
            });

            modelBuilder.Entity<NpermissionGroup>(entity =>
            {
                entity.HasComment("Групи права за достъп");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"npermissiongroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.ParentGroupId).HasComment("Група родител - за йерархия в UI");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.ParentGroup)
                    .WithMany(p => p.InverseParentGroup)
                    .HasForeignKey(d => d.ParentGroupId)
                    .HasConstraintName("FK_NPermissionGroups_NPermissionGroups");
            });

            modelBuilder.Entity<NpermissionType>(entity =>
            {
                entity.HasComment("Типове права за достъп (Read/Add/Edit/Delete/Restore/Other)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"npermissiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpermitReason>(entity =>
            {
                entity.HasComment("Основания за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"npermitreasons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsLegalReason).HasComment("Флаг дали е правно основание (по чл....)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpermitStatus>(entity =>
            {
                entity.HasComment("Статуси на разрешително за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"npermitstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpopulatedArea>(entity =>
            {
                entity.HasComment("Населени места (градове, села)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"npopulatedareas_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AreaType).HasComment("Град или село или манастир (Г/С/М)");

                entity.Property(e => e.Code).HasComment("код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MunicipalityId).HasComment("Община");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Municipality)
                    .WithMany(p => p.NpopulatedAreas)
                    .HasForeignKey(d => d.MunicipalityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NPopulatedAreas_NMunicipalities");
            });

            modelBuilder.Entity<Nport>(entity =>
            {
                entity.HasComment("Пристанища");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nports_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrLocationId).HasComment("Връзка към FLUX");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PortGroupId).HasComment("Група на пристанище");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrLocation)
                    .WithMany(p => p.Nports)
                    .HasForeignKey(d => d.MdrLocationId)
                    .HasConstraintName("FK_NPorts_MDR_Location");

                entity.HasOne(d => d.PortGroup)
                    .WithMany(p => p.Nports)
                    .HasForeignKey(d => d.PortGroupId)
                    .HasConstraintName("FK_ISS_NPorts_ISS_NPortGroups");
            });

            modelBuilder.Entity<NportGroup>(entity =>
            {
                entity.HasComment("Видове групи пристанища");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nportgroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpoundNetCategoryType>(entity =>
            {
                entity.HasComment("Категория на далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RDal\".\"npoundnetcategorytype_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpoundNetSeasonType>(entity =>
            {
                entity.HasComment("Сезонност на далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RDal\".\"npoundnetseasontype_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpoundNetStatus>(entity =>
            {
                entity.HasComment("Статуси на далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RDal\".\"npoundnetstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NpublicAidType>(entity =>
            {
                entity.HasComment("Код на публична помощ в корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"npublicaidtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrVesselPublicAidTypeId).HasComment("FLUX ID");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrVesselPublicAidType)
                    .WithMany(p => p.NpublicAidTypes)
                    .HasForeignKey(d => d.MdrVesselPublicAidTypeId)
                    .HasConstraintName("FK_NPublicAidTypes_MDR_Vessel_Public_Aid_Type");
            });

            modelBuilder.Entity<NreportParameter>(entity =>
            {
                entity.HasComment("Параметри на справки ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"nreportparameters_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataType).HasComment("Тип на параметъра");

                entity.Property(e => e.DefaultValue).HasComment("Стойност по подразбиране в справката");

                entity.Property(e => e.Description).HasComment("Описание на параметъра");

                entity.Property(e => e.ErrorMessage).HasComment("Съобщение за грешка при невалидни данни");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.NomenclatureSql).HasComment("SQL заявка за попълване на стойности в параметъра");

                entity.Property(e => e.Pattern).HasComment("Регулярен израз за ограничение на стойностите");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NrequiredFileType>(entity =>
            {
                entity.HasComment("Видове изисквани файлове за прикачване според вида документ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"nrequiredfiletypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип файл, който трябва да се качи");

                entity.Property(e => e.IsMandatory).HasComment("Флаг дали този тип файл задъжително трябва да бъде качен към документа");

                entity.Property(e => e.PageCode).HasComment("Код на форма за качване на файлове");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.NrequiredFileTypes)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NRequiredFileTypes_NFileTypes");

                entity.HasOne(d => d.PageCodeNavigation)
                    .WithMany(p => p.NrequiredFileTypes)
                    .HasForeignKey(d => d.PageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NRequiredFileTypes_NPageCodes");
            });

            modelBuilder.Entity<NreworkProductType>(entity =>
            {
                entity.HasComment("Типове продукти за преработка");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nreworkproducttypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NsailArea>(entity =>
            {
                entity.HasComment("Райони на плаване на кораб");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nsailareas_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MaxSeaState).HasComment("Максимално вълнение в БАЛОВЕ");

                entity.Property(e => e.MaxShoreDistance)
                    .HasPrecision(10, 2)
                    .HasComment("Максимално разстояние от брега в МИЛИ");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Nsector>(entity =>
            {
                entity.HasComment("Сектори в ИАРА");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nsectors_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Уникално двуцифрено число (1-27) за съставяне на номер по УРОР");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DepartmentId).HasComment("Отдел");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Nsectors)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NSectors_NDepartments");
            });

            modelBuilder.Entity<Nsegment>(entity =>
            {
                entity.HasComment("Сегмент на публична помощ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nsegments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NshipAssociation>(entity =>
            {
                entity.HasComment("Корабни сдружения (2бр към момента)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nshipassociations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NstatisticalFormType>(entity =>
            {
                entity.HasComment("Типове статистически формуляри (Преработка, Риболовен кораб, Аквакултурно стопанство)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nstatisticalformtypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NsubmittedByRole>(entity =>
            {
                entity.HasComment("Роля на подаващия заявление спрямо получателя");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"nsubmittedbyroles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasLetterOfAttorney).HasComment("Флаг дали този подаващ трябва да въведе данни за пълномощно");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NsuspensionReason>(entity =>
            {
                entity.HasComment("Видове причини за прекратяване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nsuspensionreasons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DurationMonths).HasComment("Продължителността на прекратяването (отнася се само за разрешителни)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.SuspensionType)
                    .WithMany(p => p.NsuspensionReasons)
                    .HasForeignKey(d => d.SuspensionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NSuspensionReasons_NSuspensionTypes");
            });

            modelBuilder.Entity<NsuspensionType>(entity =>
            {
                entity.HasComment("Типове прекратявания");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nsuspensiontypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код - Permanent, Temporary, TemporaryPermit");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsPermit).HasComment("Флаг дали типът на прекратяване се отнася за разрешително или за удостоверение.");

                entity.Property(e => e.IsUnlimited).HasComment("Флаг дали е безсрочно");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NsystemParameter>(entity =>
            {
                entity.HasComment("Системни настройки и параметри");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('systemparameters_id_seq'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DataType).HasComment("Тип на данните (STRING, DATE, DATETIME, INT, NUMERIC)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.ParamValue).HasComment("Стойност на параметъра");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<Ntariff>(entity =>
            {
                entity.HasComment("Тарифа на ИАРА");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Appl\".\"ntariff_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BasedOnPlea).HasComment("Правно основание за таксата");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.IsCalculated).HasComment("Флаг дали тази тарифа се изчислява според параметри в заявлението (true) или винаги се прилага (false)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.Price)
                    .HasPrecision(6, 2)
                    .HasComment("Цена");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NterritoryUnit>(entity =>
            {
                entity.HasComment("Териториални звена");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nterritoryunits_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AquaculturesRegisterSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер за съответното ТЗ, който се ползва в Регистър Аквакултурни стопанства");

                entity.Property(e => e.BuyersRegisterSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер за съответното ТЗ, който се ползва в Регистър Купувачи и ЦПП");

                entity.Property(e => e.Code).HasComment("код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PenaltyDecreeRegisterSequence).HasDefaultValueSql("1");

                entity.Property(e => e.PermitLicenceRegisterSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер за съответното ТЗ, който се ползва в Регистър удостоверения за стопански риболов");

                entity.Property(e => e.PermitRegisterSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер за съответното ТЗ, който се ползва в Регистър разрешителни за стопански риболов");

                entity.Property(e => e.QualifiedFisherRegisterSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер за съответното ТЗ, който се ползва в Регистър правоспособни рибари");

                entity.Property(e => e.SectorId).HasComment("Сектор");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.NterritoryUnits)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NTerritoryUnits_NSectors");
            });

            modelBuilder.Entity<NticketPeriod>(entity =>
            {
                entity.HasComment("Периоди на валидност на билети");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"nticketperiods_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NticketStatus>(entity =>
            {
                entity.HasComment("Статуси на билет (Заявен/Одобрен/Анулиран)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"nticketstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NticketType>(entity =>
            {
                entity.HasComment("Видове билети (любителски, деца под 14г и др.)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"LRib\".\"ntickettypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNo).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NtranslationGroup>(entity =>
            {
                entity.HasComment("Групи ресурси за превод в приложението");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"ntranslationgroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на групата");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.LanguageCode)
                    .IsFixedLength(true)
                    .HasComment("Код на език (BG/EN)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.TranslationType).HasComment("Вид превод (WEB/MOBILE_PUBLIC/MOBILE_INSP)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NtranslationResource>(entity =>
            {
                entity.HasComment("Ресурси за преводи в приложението");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"ntranslationresources_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на ресурса");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ResourceType)
                    .HasDefaultValueSql("'Label'::character varying")
                    .HasComment("Вид ресурс (Label/Help)");

                entity.Property(e => e.TranslationGroupId).HasComment("Група за превод");

                entity.Property(e => e.TranslationValue).HasComment("Стойност на превода на съответния език");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.TranslationGroup)
                    .WithMany(p => p.NtranslationResources)
                    .HasForeignKey(d => d.TranslationGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NTranslations_NTranslationGroups");
            });

            modelBuilder.Entity<NtransportVehicleType>(entity =>
            {
                entity.HasComment("Видове транспортни средства за инспекция");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"ntransportvehicletypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NturbotSizeGroup>(entity =>
            {
                entity.HasComment("Размерни групи за калкан");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"nturbotsizegroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NusageDocumentType>(entity =>
            {
                entity.HasComment("Видове документи за ползване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"nusagedocumenttypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NvesselActivity>(entity =>
            {
                entity.HasComment("Дейности на кораб по време на инспекция ");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nvesselactivities_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.HasAdditionalDescr).HasComment("Флаг дали за тази дейност е позволено въвеждане на допълнително описание");

                entity.Property(e => e.IsFishingActivity).HasComment("Флаг дали дейността е от тип Риболуване");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NvesselLengthStatInterval>(entity =>
            {
                entity.HasComment("Интервали за обща дължина на кораба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"nvessellengthstatintervals_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код на купувач");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NvesselType>(entity =>
            {
                entity.HasComment("Типове кораби в корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"nvesseltypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.MdrVesselTypeId).HasComment("FLUX ID");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.MdrVesselType)
                    .WithMany(p => p.NvesselTypes)
                    .HasForeignKey(d => d.MdrVesselTypeId)
                    .HasConstraintName("FK_NVesselTypes_MDR_Vessel_Type");

                entity.HasOne(d => d.ParentVesselType)
                    .WithMany(p => p.InverseParentVesselType)
                    .HasForeignKey(d => d.ParentVesselTypeId)
                    .HasConstraintName("FK_RS_NVesselTypes_RS_NVesselTypes");
            });

            modelBuilder.Entity<NviolationSignalType>(entity =>
            {
                entity.HasComment("Типове сигнали за нарушения");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Noms\".\"nviolationsignaltypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Трибуквен код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NwaterBodyType>(entity =>
            {
                entity.HasComment("Видове водни обекти");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"nwaterbodytypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NwaterLawCertificateType>(entity =>
            {
                entity.HasComment("Вид разрешително по Закона за водите");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RAquaSt\".\"nwaterlawcertificatetypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<NwaterType>(entity =>
            {
                entity.HasComment("Типове води за риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"nwatertypes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<ObservationAtSea>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_ObservationAtSea");

                entity.HasComment("Наблюдение на кораб в открито море");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Direction).HasComment("Посока N/NE/E, etc. ");

                entity.Property(e => e.HasShipCommunication).HasComment("Флаг дали има комуникация с кораба");

                entity.Property(e => e.HasShipContact).HasComment("Флаг дали има контакт с кораба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ObservedShipCatchZoneId).HasComment("Зона на улов на наблюдаван кораб");

                entity.Property(e => e.ObservedShipCoordinates).HasComment("Координати на наблюдаван");

                entity.Property(e => e.ObservedShipId).HasComment("Кораб на наблюдаван (регистриран)");

                entity.Property(e => e.ObservedShipLocation).HasComment("Местоположение на наблюдаван кораб - свободен текст");

                entity.Property(e => e.ObservedUnregisteredShipId).HasComment("Кораб на наблюдаван (НЕрегистриран)");

                entity.Property(e => e.ShipCommunicationDescr).HasComment("Описание на комуникацията с кораба");

                entity.Property(e => e.Speed)
                    .HasPrecision(5, 2)
                    .HasComment("Скорост във възли");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.ObservationAtSea)
                    .HasForeignKey<ObservationAtSea>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObservationAtSea_InspectionsRegister");

                entity.HasOne(d => d.ObservedShipCatchZone)
                    .WithMany(p => p.ObservationAtSeas)
                    .HasForeignKey(d => d.ObservedShipCatchZoneId)
                    .HasConstraintName("FK_ObservationAtSea_NCatchZones");

                entity.HasOne(d => d.ObservedShip)
                    .WithMany(p => p.ObservationAtSeas)
                    .HasForeignKey(d => d.ObservedShipId)
                    .HasConstraintName("FK_ObservationAtSea_ShipRegister_ObserveD");

                entity.HasOne(d => d.ObservedUnregisteredShip)
                    .WithMany(p => p.ObservationAtSeas)
                    .HasForeignKey(d => d.ObservedUnregisteredShipId)
                    .HasConstraintName("FK_ObservationAtSea_UnregisteredVessels_ObserveD");
            });

            modelBuilder.Entity<OriginDeclaration>(entity =>
            {
                entity.HasComment("Декларации за произход");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"origindeclarations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LogBookPage)
                    .WithOne(p => p.OriginDeclaration)
                    .HasForeignKey<OriginDeclaration>(d => d.LogBookPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_OriginDeclarations_CatchSales_LogBookPages");
            });

            modelBuilder.Entity<OriginDeclarationFish>(entity =>
            {
                entity.HasComment("Декларации за произход");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"origindeclarationfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchFishFreshnessId).HasComment("Състояние на улов");

                entity.Property(e => e.CatchFishPresentationId).HasComment("Представяне на улов");

                entity.Property(e => e.CatchRecordFishId).HasComment("Произхождащ запис от улов в риболовен дневник");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба / морски организъм");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsProcessedOnBoard).HasComment("Флаг дали е преработена на кораба");

                entity.Property(e => e.OriginDeclarationId).HasComment("Декларация за произход");

                entity.Property(e => e.Quantity)
                    .HasPrecision(10, 2)
                    .HasComment("Количество улов в КГ");

                entity.Property(e => e.QuantityConversionFactor)
                    .HasDefaultValueSql("1")
                    .HasComment("Коефициент за приравняване на теглото, ако рибата не е цяла (WHL)");

                entity.Property(e => e.TransboardDateTime).HasComment("Дата и час на трансбордиране");

                entity.Property(e => e.TransboardShipId).HasComment("Кораб, на който е извършено трансбордирането");

                entity.Property(e => e.TransboardTargetPortId).HasComment("Пристанище цел за трансбордиране");

                entity.Property(e => e.UnloadDateTime).HasComment("Дата и час на разтоварване");

                entity.Property(e => e.UnloadPortId).HasComment("Пристанище на разтоварване");

                entity.Property(e => e.UnloadTypeId).HasComment("Вид разтоварване на улов (разтоварено, трансбордиране и др.)");

                entity.Property(e => e.UnloadedProcessedQuantity)
                    .HasPrecision(10, 2)
                    .HasComment("Разтоварен преработен улов в КГ");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchFishFreshness)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.CatchFishFreshnessId)
                    .HasConstraintName("FK_CatchSales_OriginDeclarationFishes_CatchSales_NCatchFishStat");

                entity.HasOne(d => d.CatchFishPresentation)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.CatchFishPresentationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OriginDeclarationFishes_NFishPresentations");

                entity.HasOne(d => d.CatchRecordFish)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.CatchRecordFishId)
                    .HasConstraintName("FK_OriginDeclarationFishes_CatchRecordFishes");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OriginDeclarationFishes_NFishes");

                entity.HasOne(d => d.OriginDeclaration)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.OriginDeclarationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OriginDeclarationFishes_OriginDeclarations");

                entity.HasOne(d => d.TransboardShip)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.TransboardShipId)
                    .HasConstraintName("FK_OriginDeclarationFishes_ShipRegister");

                entity.HasOne(d => d.TransboardTargetPort)
                    .WithMany(p => p.OriginDeclarationFishTransboardTargetPorts)
                    .HasForeignKey(d => d.TransboardTargetPortId)
                    .HasConstraintName("FK_CatchSales_OriginDeclarationFishes_ISS_NPortsTransboardTarge");

                entity.HasOne(d => d.UnloadPort)
                    .WithMany(p => p.OriginDeclarationFishUnloadPorts)
                    .HasForeignKey(d => d.UnloadPortId)
                    .HasConstraintName("FK_CatchSales_OriginDeclarationFishes_ISS_NPortsUnload");

                entity.HasOne(d => d.UnloadType)
                    .WithMany(p => p.OriginDeclarationFishes)
                    .HasForeignKey(d => d.UnloadTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_OriginDeclarationFishes_CatchSales_NCatchFishUnlo");
            });

            modelBuilder.Entity<PenalDecreeFishCompensation>(entity =>
            {
                entity.HasComment("Размер на обезщетението към НП");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreefishcompensations_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PenalDecreeRegisterId).HasComment("Наказателно постановление");

                entity.Property(e => e.TotalPrice)
                    .HasPrecision(10, 2)
                    .HasComment("Бележки");

                entity.Property(e => e.UnitPrice)
                    .HasPrecision(10, 2)
                    .HasComment("Предприето действие");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Weight)
                    .HasPrecision(10, 2)
                    .HasComment("Тегло (кг)");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.PenalDecreeFishCompensations)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeFishCompensations_NFishes");

                entity.HasOne(d => d.PenalDecreeRegister)
                    .WithMany(p => p.PenalDecreeFishCompensations)
                    .HasForeignKey(d => d.PenalDecreeRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeFishCompensations_PenalDecreesRegister");
            });

            modelBuilder.Entity<PenalDecreePaymentSchedule>(entity =>
            {
                entity.HasComment("Погасителен план към наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreepaymentschedule_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Date).HasComment("Година и месец");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OwedAmount)
                    .HasPrecision(10, 2)
                    .HasComment("Дължима сума");

                entity.Property(e => e.PaidAmount)
                    .HasPrecision(10, 2)
                    .HasComment("Изплатена сума");

                entity.Property(e => e.PenalDecreeStatusId).HasComment("Статус на НП");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PenalDecreeStatus)
                    .WithMany(p => p.PenalDecreePaymentSchedules)
                    .HasForeignKey(d => d.PenalDecreeStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreePaymentSchedule_PenalDecreeStatuses");
            });

            modelBuilder.Entity<PenalDecreeSanction>(entity =>
            {
                entity.HasComment("Сакнции на наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreesanctions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PenalDecreeId).HasComment("Наказателно постановление");

                entity.Property(e => e.SanctionTypeId).HasComment("Тип санкция");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PenalDecree)
                    .WithMany(p => p.PenalDecreeSanctions)
                    .HasForeignKey(d => d.PenalDecreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeSanctions_PenalDecreesRegister");

                entity.HasOne(d => d.SanctionType)
                    .WithMany(p => p.PenalDecreeSanctions)
                    .HasForeignKey(d => d.SanctionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeSanctions_NPenalDecreeSanctionTypes");
            });

            modelBuilder.Entity<PenalDecreeSeizedFishingGear>(entity =>
            {
                entity.HasComment("Иззети риболовни уреди към наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreeseizedfishinggear_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.ConfiscationActionId).HasComment("Предприето действие");

                entity.Property(e => e.Count).HasComment("Брой");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PenalDecreeId).HasComment("Наказателно постановление");

                entity.Property(e => e.TerritoryUnitId).HasComment("ТЗ за съхранение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ConfiscationAction)
                    .WithMany(p => p.PenalDecreeSeizedFishingGears)
                    .HasForeignKey(d => d.ConfiscationActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeSeizedFishingGear_NConfiscationActions");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.PenalDecreeSeizedFishingGears)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeSeizedFishingGear_NFishingGears");

                entity.HasOne(d => d.PenalDecree)
                    .WithMany(p => p.PenalDecreeSeizedFishingGears)
                    .HasForeignKey(d => d.PenalDecreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeSeizedFishingGear_PenalDecreesRegister");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.PenalDecreeSeizedFishingGears)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_PenalDecreeSeizedFishingGear_NTerritoryUnits");
            });

            modelBuilder.Entity<PenalDecreeStatus>(entity =>
            {
                entity.HasComment("Статуси на наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreestatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Amendments).HasComment("Поставени изменения");

                entity.Property(e => e.AppealDate).HasComment("Дата на обжалване");

                entity.Property(e => e.CaseNum).HasComment("Номер на дело");

                entity.Property(e => e.ComplaintDueDate).HasComment("Срок за подаване на отговор/жалба");

                entity.Property(e => e.ConfiscationInsitutionId).HasComment("Институция за принудително събиране");

                entity.Property(e => e.CourtId).HasComment("Съдилище");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnactmentDate).HasComment("Дата на влизане в сила/на частично изменение/на отмяна/на предаване за принудително събиране.");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PaidAmount)
                    .HasPrecision(10, 2)
                    .HasComment("Частично изплатена сума (лв.)");

                entity.Property(e => e.PenalAuthorityName).HasComment("Име на наказателен орган");

                entity.Property(e => e.PenalAuthorityTypeId).HasComment("Вид наказващ орган");

                entity.Property(e => e.PenalDecreeId).HasComment("Наказателно постановление");

                entity.Property(e => e.RemunerationAmount)
                    .HasPrecision(10, 2)
                    .HasComment("Размер на възнаграждението (лв.)");

                entity.Property(e => e.StatusTypeId).HasComment("Тип на статуса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ConfiscationInsitution)
                    .WithMany(p => p.PenalDecreeStatuses)
                    .HasForeignKey(d => d.ConfiscationInsitutionId)
                    .HasConstraintName("FK_PenalDecreeStatuses_NConfiscationInstitutions");

                entity.HasOne(d => d.Court)
                    .WithMany(p => p.PenalDecreeStatuses)
                    .HasForeignKey(d => d.CourtId)
                    .HasConstraintName("FK_PenalDecreeStatuses_NCourts");

                entity.HasOne(d => d.PenalAuthorityType)
                    .WithMany(p => p.PenalDecreeStatuses)
                    .HasForeignKey(d => d.PenalAuthorityTypeId)
                    .HasConstraintName("FK_PenalDecreeStatuses_NPenalAuthorityTypes");

                entity.HasOne(d => d.PenalDecree)
                    .WithMany(p => p.PenalDecreeStatuses)
                    .HasForeignKey(d => d.PenalDecreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeStatuses_PenalDecreesRegister");

                entity.HasOne(d => d.StatusType)
                    .WithMany(p => p.PenalDecreeStatuses)
                    .HasForeignKey(d => d.StatusTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreeStatuses_NPenalDecreeStatusTypes");
            });

            modelBuilder.Entity<PenalDecreesRegister>(entity =>
            {
                entity.HasComment("Регистър Наказателни постановления");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreesregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AuanRegisterId).HasComment("АУАН");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.CompensationAmount)
                    .HasPrecision(10, 2)
                    .HasComment("Размер на обезщетението");

                entity.Property(e => e.ConstatationComments).HasComment("Подробно описание от АУАН ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DecreeNum).HasComment("№ на наказателното постановление");

                entity.Property(e => e.DeliveryId).HasComment("Връчване");

                entity.Property(e => e.EffectiveDate).HasComment("Дата на влизане в сила");

                entity.Property(e => e.FineAmount).HasPrecision(10, 2);

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsRecurrentViolation).HasComment("Има установена повтаряемост на нарушението");

                entity.Property(e => e.IssueDate).HasComment("Дата на издаване");

                entity.Property(e => e.IssuerPosition).HasComment("Длъжност на съставител");

                entity.Property(e => e.IssuerUserId).HasComment("Съставител");

                entity.Property(e => e.MinorCircumstancesDescription).HasComment("Описание на обстоятелствата, които сочат за маловажен случай");

                entity.Property(e => e.PenalDecreeTypeId).HasComment("Тип Наказателно постановление (Предупреждение, Споразумение, НП)");

                entity.Property(e => e.SanctionDescription).HasComment("Описание на санкциите");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.AuanRegister)
                    .WithMany(p => p.PenalDecreesRegisters)
                    .HasForeignKey(d => d.AuanRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegister_AUANRegister");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.PenalDecreesRegisters)
                    .HasForeignKey(d => d.DeliveryId)
                    .HasConstraintName("FK_PenalDecreesRegister_InspDelivery");

                entity.HasOne(d => d.IssuerUser)
                    .WithMany(p => p.PenalDecreesRegisters)
                    .HasForeignKey(d => d.IssuerUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegister_Users");

                entity.HasOne(d => d.PenalDecreeType)
                    .WithMany(p => p.PenalDecreesRegisters)
                    .HasForeignKey(d => d.PenalDecreeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegister_NPenalDecreeTypes");
            });

            modelBuilder.Entity<PenalDecreesRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към наказателно постановление");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penaldecreesregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Наказателно постановление");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.PenalDecreesRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.PenalDecreesRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.PenalDecreesRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalDecreesRegisterFiles_PenalDecreesRegister");
            });

            modelBuilder.Entity<PenalPointComplaintStatus>(entity =>
            {
                entity.HasComment("Статуси на обжалване на наказателни точки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penalpointcomplaintstatuses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AppealDate).HasComment("Дата на жалбата");

                entity.Property(e => e.AppealNum).HasComment("Номер на жалбата");

                entity.Property(e => e.CourtId).HasComment("Съдилище");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DecreeDate).HasComment("Дата на съдебно решение");

                entity.Property(e => e.DecreeNum).HasComment("Номер на съдебно решение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PenalPointsId).HasComment("Наказателно постановление");

                entity.Property(e => e.StatusId).HasComment("Тип на статуса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Court)
                    .WithMany(p => p.PenalPointComplaintStatuses)
                    .HasForeignKey(d => d.CourtId)
                    .HasConstraintName("FK_PenalPointsStatuses_NCourts");

                entity.HasOne(d => d.PenalPoints)
                    .WithMany(p => p.PenalPointComplaintStatuses)
                    .HasForeignKey(d => d.PenalPointsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalPointsStatuses_PenalPointsRegister");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PenalPointComplaintStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalPointsStatuses_NPenalPointStatuses");
            });

            modelBuilder.Entity<PenalPointsRegister>(entity =>
            {
                entity.HasComment("Регистър наказателни точки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"penalpointsregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comments).HasComment("Бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DecreeNum).HasComment("№ на заповед");

                entity.Property(e => e.DeliveryDate).HasComment("Дата на връчване");

                entity.Property(e => e.EffectiveDate).HasComment("Дата на влизане в сила");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsIncreasePoints)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали се увеличават или намалят точките");

                entity.Property(e => e.IsPermitOwner).HasComment("Флаг дали собственика на точките е Титуляр на РСР");

                entity.Property(e => e.IssueDate).HasComment("Дата на издаване");

                entity.Property(e => e.Issuer).HasComment("Издател на докладна записка ");

                entity.Property(e => e.PenalRegisterId).HasComment("НП");

                entity.Property(e => e.PermitId).HasComment("РСР");

                entity.Property(e => e.PermitLicenseId).HasComment("УСР");

                entity.Property(e => e.PointsAmount).HasComment("Брой присъдени точки");

                entity.Property(e => e.PointsOwnerLegalId).HasComment("Титуляр на РСР - юридическо лице");

                entity.Property(e => e.PointsOwnerPersonId).HasComment("Титуляр на РСР - физическо лице");

                entity.Property(e => e.PointsType).HasComment("Тип на присъдените точки - за Титуляр на РСР (PermitOwner) или за Капитан на кораб (QualifiedFisher)");

                entity.Property(e => e.QualifiedFisherId).HasComment("Титуляр на УСР - Правоспособен рибар (капитан)");

                entity.Property(e => e.ShipId).HasComment("Кораб");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PenalRegister)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.PenalRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalPointsRegister_PenalDecreesRegister");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.PermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PenalPointsRegister_PermitRegister");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .HasConstraintName("FK_PenalPointsRegister_PermitLicensesRegister");

                entity.HasOne(d => d.PointsOwnerLegal)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.PointsOwnerLegalId)
                    .HasConstraintName("FK_PenalPointsRegister_Legals");

                entity.HasOne(d => d.PointsOwnerPerson)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.PointsOwnerPersonId)
                    .HasConstraintName("FK_PenalPointsRegister_Persons");

                entity.HasOne(d => d.QualifiedFisher)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.QualifiedFisherId)
                    .HasConstraintName("FK_PenalPointsRegister_FishermenRegister");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.PenalPointsRegisters)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_PenalPointsRegister_ShipRegister");
            });

            modelBuilder.Entity<PermitLicenseRegisterFish>(entity =>
            {
                entity.HasComment("Водни организми към удостоверение за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitlicenseregisterfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PortOfUnloadingId).HasComment("Пристанище на разтоварвание на квотирания вид риба.");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.PermitLicenseRegisterFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseRegisterFishes_NFishes");

                entity.HasOne(d => d.PermitLicenseRegister)
                    .WithMany(p => p.PermitLicenseRegisterFishes)
                    .HasForeignKey(d => d.PermitLicenseRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseRegisterFishes_PermitLicensesRegister");

                entity.HasOne(d => d.PortOfUnloading)
                    .WithMany(p => p.PermitLicenseRegisterFishes)
                    .HasForeignKey(d => d.PortOfUnloadingId)
                    .HasConstraintName("FK_PermitLicenseRegisterFishes_NPorts");
            });

            modelBuilder.Entity<PermitLicenseRegisterFishingGear>(entity =>
            {
                entity.HasComment("Риболовни уреди за удостоверение");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitlicenseregisterfishinggears_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PermitLicenseId).HasComment("Удостоверение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.PermitLicenseRegisterFishingGears)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseFishingGears_FishingGearRegister");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.PermitLicenseRegisterFishingGears)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RStR_PermitLicenseFishingGears_RStR_PermitLicenses");
            });

            modelBuilder.Entity<PermitLicenseSuspensionChangeHistory>(entity =>
            {
                entity.HasComment("История на промени по прекратявания на удостоверения");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitlicensesuspensionchangehistory_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnactmentDate).HasComment("Дата и час на влизането в сила на прекратяване на дейността");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ModifiedByUserId).HasComment("Потребител, направил промяната в заявлението (служител на ИАРА).");

                entity.Property(e => e.OrderNumber).HasComment("Номер на заповед");

                entity.Property(e => e.PermitLicenseId).HasComment("Удостоверение");

                entity.Property(e => e.ReasonId).HasComment("Основание за прекратяване на дейността");

                entity.Property(e => e.SuspensionValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.SuspensionValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PermitLicense)
                    .WithMany(p => p.PermitLicenseSuspensionChangeHistories)
                    .HasForeignKey(d => d.PermitLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseSuspChngHist_PermitLicensesRegister");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.PermitLicenseSuspensionChangeHistories)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseSuspChngHist_NSuspensionReasonTypes");
            });

            modelBuilder.Entity<PermitLicensesRegister>(entity =>
            {
                entity.HasComment("Удостоверения към разрешителни за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitlicensesregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание на удостоверението (използва се за идентификацията му в СНРК)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsHolderShipOwner)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали титулярът на заявлението е собственик на кораба. Ако не е, то трябва да бъде попълнено ShipHolderGroundsForUseID");

                entity.Property(e => e.IsQualifiedFisherSameAsSubmittedFor)
                    .HasDefaultValueSql("false")
                    .HasComment("Флаг, указващ дали правоспособният прибар е същият като получателя на удостоверението");

                entity.Property(e => e.IssueDate).HasComment("Дата на издаване");

                entity.Property(e => e.PermitId).HasComment("Разрешително, от което е започнато удостоверението.");

                entity.Property(e => e.PermitLicenseTypeId).HasComment("Тип удостоверениe за стопански риболов");

                entity.Property(e => e.PermitLicenseValidFrom).HasComment("Откога е валидно удостоврението");

                entity.Property(e => e.PermitLicenseValidTo).HasComment("Докога е валидно удостоврението");

                entity.Property(e => e.PoundNetId).HasComment("Далянът, с който ще се извършва стопанския риболо, ако той е със специализиран уред Далян.");

                entity.Property(e => e.QualifiedFisherId).HasComment("Правоспособен рибар (капитан)");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegistrationNum).HasComment("Регистрационен номер генериран по формата на наредбата");

                entity.Property(e => e.ShipGroundsForUseId).HasComment("Основание за ползване на кораб");

                entity.Property(e => e.ShipId).HasComment("Корабът, с който ще се извършва риболовът");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Заявител (титуляр), ако е юридическо лице");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Заявител (титуляр), ако е физическо лице");

                entity.Property(e => e.UnloaderPhoneNumber).HasComment("Мобилен телефон за информиране на инспекторите на ИАРА преди разтоварване.");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WaterTypeId).HasComment("Водите, в които ще се осъществява риболовът.");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_Applications");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.PermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_PermitRegister");

                entity.HasOne(d => d.PermitLicenseType)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.PermitLicenseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_NCommerialFishingPermitLicenseTypes");

                entity.HasOne(d => d.PoundNet)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.PoundNetId)
                    .HasConstraintName("FK_PermitLicensesRegister_PoundNetRegister");

                entity.HasOne(d => d.QualifiedFisher)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.QualifiedFisherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_FishermenRegister");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_PermitLicensesRegister_PermitLicensesRegister");

                entity.HasOne(d => d.ShipGroundsForUse)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.ShipGroundsForUseId)
                    .HasConstraintName("FK_PermitLicensesRegister_HolderGroundsForUse_Ship");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.ShipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_ShipRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_PermitLicensesRegister_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_PermitLicensesRegister_Persons");

                entity.HasOne(d => d.WaterType)
                    .WithMany(p => p.PermitLicensesRegisters)
                    .HasForeignKey(d => d.WaterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegister_NWaterTypes");
            });

            modelBuilder.Entity<PermitLicensesRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към удостоверения за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitlicensesregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Удостоверение");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.PermitLicensesRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicenseFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.PermitLicensesRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.PermitLicensesRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitLicensesRegisterFiles_PermitLicensesRegister");
            });

            modelBuilder.Entity<PermitRegister>(entity =>
            {
                entity.HasComment("Разрешителни за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ElogBookSequence)
                    .HasDefaultValueSql("1")
                    .HasComment("Уникален пореден номер на електронен дневник за съответното разрешително ");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsHolderShipOwner)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали титулярът е собственик на кораба - само за разрешително за далян може да не е собственик");

                entity.Property(e => e.IsPermitUnlimited)
                    .HasDefaultValueSql("false")
                    .HasComment("Флаг дали разрешителното е безрочно, или не.");

                entity.Property(e => e.IsQualifiedFisherSameAsSubmittedFor)
                    .HasDefaultValueSql("false")
                    .HasComment("Флаг, указващ дали правоспособният рибар е същият като получателя на заявлението.");

                entity.Property(e => e.IssueDate).HasComment("Дата на издаване");

                entity.Property(e => e.PermitTypeId).HasComment("Тип разрешително");

                entity.Property(e => e.PermitValidFrom).HasComment("Откога е валидно разрешителното.");

                entity.Property(e => e.PermitValidTo).HasComment("Докога е валидно разрешителното.");

                entity.Property(e => e.PoundNetGroundsForUseId).HasComment("Основания за ползване на далян при разрешително за далян.");

                entity.Property(e => e.PoundNetId).HasComment("Далян, с който ще се извършва стопанския риболов, ако разрешително е със специализиран уред - Далян.");

                entity.Property(e => e.QualifiedFisherId).HasComment("Рибар");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationNum).HasComment("Регистрационен номер генериран по формата на наредбата");

                entity.Property(e => e.ShipGroundsForUseId).HasComment("Основание на ползване на кораб - когато е разрешително за далян");

                entity.Property(e => e.ShipId).HasComment("Кораб");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Получател на заявлението - юридическо лице");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Получател на заявлението - физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WaterTypeId).HasComment("Водите, в които ще се осъществява риболовът.");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegister_Applications");

                entity.HasOne(d => d.PermitType)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.PermitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegister_NCommercialFishingPermitTypes");

                entity.HasOne(d => d.PoundNetGroundsForUse)
                    .WithMany(p => p.PermitRegisterPoundNetGroundsForUses)
                    .HasForeignKey(d => d.PoundNetGroundsForUseId)
                    .HasConstraintName("FK_PermitRegister_HolderGroundsForUsePoundNet");

                entity.HasOne(d => d.PoundNet)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.PoundNetId)
                    .HasConstraintName("FK_PermitRegister_PoundNetRegister");

                entity.HasOne(d => d.QualifiedFisher)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.QualifiedFisherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegister_FishermenRegister");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_PermitRegister_PermitRegister");

                entity.HasOne(d => d.ShipGroundsForUse)
                    .WithMany(p => p.PermitRegisterShipGroundsForUses)
                    .HasForeignKey(d => d.ShipGroundsForUseId)
                    .HasConstraintName("FK_PermitRegister_HolderGroundsForUseShip");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.ShipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegister_ShipRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_PermitRegister_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_PermitRegister_Persons");

                entity.HasOne(d => d.WaterType)
                    .WithMany(p => p.PermitRegisters)
                    .HasForeignKey(d => d.WaterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegister_NWaterTypes");
            });

            modelBuilder.Entity<PermitRegisterFile>(entity =>
            {
                entity.HasComment("Прикачени файлове към заявление/регистър за разрешително за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.PermitRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.PermitRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.PermitRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegisterFiles_PermitRegister");
            });

            modelBuilder.Entity<PermitRegisterFish>(entity =>
            {
                entity.HasComment("Водни организми към разрешително за стопански риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitregisterfishes_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.PermitRegisterFishes)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegisterFishes_NFishes");

                entity.HasOne(d => d.PermitRegister)
                    .WithMany(p => p.PermitRegisterFishes)
                    .HasForeignKey(d => d.PermitRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitRegisterFishes_PermitRegister");
            });

            modelBuilder.Entity<PermitRegisterFishingGear>(entity =>
            {
                entity.HasComment("Риболовни уреди за разрешително");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitregisterfishinggears_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishingGearId).HasComment("Риболовен уред");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PermitId).HasComment("Разрешително");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.PermitRegisterFishingGears)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitFishingGears_FishingGearRegister");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.PermitRegisterFishingGears)
                    .HasForeignKey(d => d.PermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitFishingGears_PermitRegister");
            });

            modelBuilder.Entity<PermitSuspensionChangeHistory>(entity =>
            {
                entity.HasComment("История на промени по прекратявания на разрешително");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RStRib\".\"permitsuspensionchangehistory_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnactmentDate).HasComment("Дата и час на влизането в сила на прекратяване на дейността");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ModifiedByUserId).HasComment("Потребител, направил промяната в заявлението (служител на ИАРА).");

                entity.Property(e => e.OrderNumber).HasComment("Номер на заповед");

                entity.Property(e => e.ReasonId).HasComment("Основание за прекратяване на дейността");

                entity.Property(e => e.SuspensionValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.SuspensionValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.PermitSuspensionChangeHistories)
                    .HasForeignKey(d => d.PermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitSuspensionChangeHistory_PermitRegister");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.PermitSuspensionChangeHistories)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermitSuspensionChangeHistory_NSuspensionReasonTypes");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasComment("Физически лица - историческа таблица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"persons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.BirthDate).HasComment("Дата на раждане");

                entity.Property(e => e.CitizenshipCountryId).HasComment("Гражданство - държава");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EgnLnc).HasComment("Идентификатор на лицето - ЕГН / ЛНЧ");

                entity.Property(e => e.FirstName).HasComment("Име");

                entity.Property(e => e.GenderId).HasComment("Пол");

                entity.Property(e => e.HasBulgarianAddressRegistration).HasComment("Флаг дали притежава булгарска адресна регистрация");

                entity.Property(e => e.IdentifierType)
                    .HasDefaultValueSql("'EGN'::character varying")
                    .HasComment("Тип на идентификатора (ЕГН=EGN / ЛНЧ=LNC / Чужденец=FORID)");

                entity.Property(e => e.LastName).HasComment("Фамилия");

                entity.Property(e => e.MiddleName).HasComment("Бащино име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.CitizenshipCountry)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.CitizenshipCountryId)
                    .HasConstraintName("FK_Legals_PersonsCitizenship_ISS_Countries");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_Persons_NGenders");
            });

            modelBuilder.Entity<PersonAddress>(entity =>
            {
                entity.HasComment("Адреси на физическо лице");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"personaddresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AddressId).HasComment("Адрес");

                entity.Property(e => e.AddressTypeId).HasComment("Тип адрес");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PersonId).HasComment("Физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.PersonAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonAddresses_ISS_Addresses");

                entity.HasOne(d => d.AddressType)
                    .WithMany(p => p.PersonAddresses)
                    .HasForeignKey(d => d.AddressTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonAddresses_ISS_AddressTypes");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonAddresses)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonAddresses_ISS_Persons");
            });

            modelBuilder.Entity<PersonDocument>(entity =>
            {
                entity.HasComment("Лични документи на физическо лице");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"persondocuments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comments).HasComment("Допълнителни коментари и бележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DocumentIssueDate).HasComment("Дата на издаване на документ");

                entity.Property(e => e.DocumentNumber).HasComment("Номер на документ за самоличност");

                entity.Property(e => e.DocumentPublisher).HasComment("Издател на документ");

                entity.Property(e => e.DocumentTypeId).HasComment("Тип документ");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PersonId).HasComment("Физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocuments_NDocumentTypes");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocuments_Persons_Hist");
            });

            modelBuilder.Entity<PersonEmailAddress>(entity =>
            {
                entity.HasComment("E-mail адреси на физическо лице");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"personemailaddresses_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.EmailAddress)
                    .WithMany(p => p.PersonEmailAddresses)
                    .HasForeignKey(d => d.EmailAddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonEmailAddresses_ISS_EmailAddresses");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonEmailAddresses)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonEmailAddresses_ISS_Persons");
            });

            modelBuilder.Entity<PersonFile>(entity =>
            {
                entity.HasComment("Снимка на физическо лице - връзка към Files");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"personfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл на снимката");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.PersonFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.PersonFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.PersonFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFiles_Persons");
            });

            modelBuilder.Entity<PersonPhoneNumber>(entity =>
            {
                entity.HasComment("Телефонни номера на физически лица");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"personphonenumbers_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.PersonId).HasComment("Физическо лице");

                entity.Property(e => e.PhoneId).HasComment("Телефон");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonPhoneNumbers)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonPhoneNumbers_ISS_Persons");

                entity.HasOne(d => d.Phone)
                    .WithMany(p => p.PersonPhoneNumbers)
                    .HasForeignKey(d => d.PhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ISS_PersonPhoneNumbers_ISS_PhoneNumbers");
            });

            modelBuilder.Entity<PhoneNumber>(entity =>
            {
                entity.HasComment("Телефонни номера");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Legals\".\"phonenumbers_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Phone).HasComment("Телефон");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<PoundNetCoordinate>(entity =>
            {
                entity.HasComment("Координати на далян");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RDal\".\"poundnetcoordinates_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Coordinates).HasComment("Координати на точката (WGS84)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsConnectPoint).HasComment("Флаг дали е свързваща точка");

                entity.Property(e => e.PointNum).HasComment("Пореден номер на точката");

                entity.Property(e => e.PoundNetId).HasComment("Далян");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.PoundNet)
                    .WithMany(p => p.PoundNetCoordinates)
                    .HasForeignKey(d => d.PoundNetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PoundNetCoordinates_PoundNetRegister");
            });

            modelBuilder.Entity<PoundNetRegister>(entity =>
            {
                entity.HasComment("Регистър даляни");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RDal\".\"poundnetregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ActivityOrderDate).HasComment("Дата на заповед за определяне на действие");

                entity.Property(e => e.ActivityOrderNum).HasComment("Заповед за определяне на действие");

                entity.Property(e => e.AreaDescription).HasComment("Описание на Зона на действие");

                entity.Property(e => e.BagEyeSize).HasComment("Размер на окото на торбата");

                entity.Property(e => e.CategoryTypeId).HasComment("Категория");

                entity.Property(e => e.Comments).HasComment("Коментари ");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DepthFrom).HasComment("Дълбочина на мястото от");

                entity.Property(e => e.DepthTo).HasComment("Дълбочина на мястото до");

                entity.Property(e => e.DistrictId).HasComment("Област");

                entity.Property(e => e.HouseLength).HasComment("Дължина на къщата");

                entity.Property(e => e.HouseWidth).HasComment("Ширина на къщата");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LocationDescription).HasComment("Описание на местонахождение");

                entity.Property(e => e.MunicipalityId).HasComment("Община");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PermitLicencePrice).HasComment("Цена за годишно УСР");

                entity.Property(e => e.PopulatedAreaId).HasComment("Населено място");

                entity.Property(e => e.PoundNetNum).HasComment("Номер на разрешително");

                entity.Property(e => e.Region).HasComment("Местност");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.SeasonTypeId).HasComment("Сезонност");

                entity.Property(e => e.StatusId).HasComment("Статус");

                entity.Property(e => e.TowelLength).HasComment("Дължина на хавлията");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CategoryType)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.CategoryTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PoundNetRegister_NPoundNetCategoryType");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_PoundNetRegister_NDistricts");

                entity.HasOne(d => d.Municipality)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.MunicipalityId)
                    .HasConstraintName("FK_PoundNetRegister_NMunicipalities");

                entity.HasOne(d => d.PopulatedArea)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.PopulatedAreaId)
                    .HasConstraintName("FK_PoundNetRegister_NPopulatedAreas");

                entity.HasOne(d => d.SeasonType)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.SeasonTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PoundNetRegister_NPoundNetSeasonType");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PoundNetRegisters)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PoundNetRegister_NPoundNetStatuses");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.HasComment("Справки във вид на SQL заявки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"reports_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Цел на проверката");

                entity.Property(e => e.IconName).HasComment("Име на икона в потребителския интерфейс");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LastRunDateTime).HasComment("Дата и час на последно изпълнение");

                entity.Property(e => e.LastRunDurationSec).HasComment("Продължителност на последно изпълнение в секунди");

                entity.Property(e => e.LastRunUserId).HasComment("Потребител, последно изпълнил справката");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер на справката");

                entity.Property(e => e.ReportSql).HasComment("XML на заявката за проверка");

                entity.Property(e => e.ReportType).HasComment("Тип репорт (SQL / Jasper / Check)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.LastRunUser)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.LastRunUserId)
                    .HasConstraintName("FK_Rep_QueryReports_UsrMgmt_Users");

                entity.HasOne(d => d.ReportGroup)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ReportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reports_ReportGroups");
            });

            modelBuilder.Entity<ReportGroup>(entity =>
            {
                entity.HasComment("Група справки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"reportgroups_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.GroupType).HasComment("Тип група (SQL / Jasper / Check)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит (май е излишно тук)");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер в интерфейса");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.Entity<ReportParameter>(entity =>
            {
                entity.HasComment("Връзка между справки и параметри за справки");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"reportparameters_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DefaultValue).HasComment("Стойност по подразбиране в справката");

                entity.Property(e => e.ErrorMessage).HasComment("Съобщение за грешка при невалидни данни");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит (май е излишно тук)");

                entity.Property(e => e.IsMandatory).HasComment("Флаг дали параметъра е задължителен");

                entity.Property(e => e.OrderNum).HasComment("Пореден номер за сортиране");

                entity.Property(e => e.ParameterId).HasComment("Параметър");

                entity.Property(e => e.Pattern).HasComment("Регулярен израз за ограничение на стойностите");

                entity.Property(e => e.ReportId).HasComment("Отчет");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.ReportParameters)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportParameters_NReportParameters");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportParameters)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportParameters_Reports");
            });

            modelBuilder.Entity<ReportRolePermission>(entity =>
            {
                entity.HasComment("Потребителски роли, които могат да изпълняват даден репорт");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"reportrolepermissions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит (май е излишно тук)");

                entity.Property(e => e.ReportId).HasComment("Отчет");

                entity.Property(e => e.RoleId).HasComment("Параметър");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportRolePermissions)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportRolePermissions_Reports");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.ReportRolePermissions)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportRolePermissions_Roles");
            });

            modelBuilder.Entity<ReportUserPermission>(entity =>
            {
                entity.HasComment("Потребители, които могат да изпълняват даден репорт");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Rep\".\"reportuserpermissions_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит (май е излишно тук)");

                entity.Property(e => e.ReportId).HasComment("Отчет");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Параметър");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportUserPermissions)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportUserPermissions_Reports");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ReportUserPermissions)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportUserPermissions_Users");
            });

            modelBuilder.Entity<ReworkForm>(entity =>
            {
                entity.HasComment("ИСФ за преработка");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"reworkforms_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LicenceNum).HasComment("Номер на удостоверение");

                entity.Property(e => e.LicenseDate).HasComment("Дата на удостоверение");

                entity.Property(e => e.StatisticalFormId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VetRegistrationNum).HasComment("Ветеринарен регистрационен номер");

                entity.HasOne(d => d.StatisticalForm)
                    .WithOne(p => p.ReworkForm)
                    .HasForeignKey<ReworkForm>(d => d.StatisticalFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReworkForm_StatisticalFormsRegister");
            });

            modelBuilder.Entity<ReworkProduct>(entity =>
            {
                entity.HasComment("ИСФ за преработка - тегла на преработени продукти");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"reworkproducts_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ProductId).HasComment("Вид риба / суровина");

                entity.Property(e => e.QuantityTons).HasComment("Количество в тонове");

                entity.Property(e => e.ReworkFormId).HasComment("ИСФ за преработка");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ReworkProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReworkProducts_NReworkProductTypes");

                entity.HasOne(d => d.ReworkForm)
                    .WithMany(p => p.ReworkProducts)
                    .HasForeignKey(d => d.ReworkFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReworkProducts_ReworkForms");
            });

            modelBuilder.Entity<ReworkRawMaterial>(entity =>
            {
                entity.HasComment("ИСФ за преработка - тегла на суровини");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"reworkrawmaterials_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CountryZone).HasComment("Страна/Зона");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба / суровина");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.MaterialOrigin).HasComment("Произход (Catch=Улов/Aqua=Аквакултура)");

                entity.Property(e => e.QuantityTons).HasComment("Количество в тонове");

                entity.Property(e => e.ReworkFormId).HasComment("ИСФ за преработка");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.ReworkRawMaterials)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReworkRawMaterials_NFishes");

                entity.HasOne(d => d.ReworkForm)
                    .WithMany(p => p.ReworkRawMaterials)
                    .HasForeignKey(d => d.ReworkFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReworkRawMaterials_ReworkForms");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasComment("Роли в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"roles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Code).HasComment("Код");

                entity.Property(e => e.ConcurrencyStamp).HasComment("A random value that must change whenever a user is persisted to the store");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Description).HasComment("Описание");

                entity.Property(e => e.HasInternalAccess).HasComment("Флаг дали ролята е за вътрешни потребители");

                entity.Property(e => e.HasPublicAccess).HasComment("Флаг дали ролята е за публични потребители");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");
            });

            modelBuilder.Entity<RolePermission>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.PermissionId })
                    .HasName("PK_UsrMgmt_RolePermissions");

                entity.HasComment("Права за достъп за роля");

                entity.Property(e => e.RoleId).HasComment("Роля");

                entity.Property(e => e.PermissionId).HasComment("Право за достъп");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_RolePermissions_UsrMgmt_Permissions");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_RolePermissions_UsrMgmt_Roles");
            });

            modelBuilder.Entity<ScientificPermitOuting>(entity =>
            {
                entity.HasComment("Излети за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"scientificpermitoutings_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OutingDate).HasComment("Дата на излета");

                entity.Property(e => e.ScientificPermitId).HasComment("Резрешително за научен риболов");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WaterAreaDesc).HasComment("Воден обект");

                entity.HasOne(d => d.ScientificPermit)
                    .WithMany(p => p.ScientificPermitOutings)
                    .HasForeignKey(d => d.ScientificPermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitOutings_ScientificPermitRegister");
            });

            modelBuilder.Entity<ScientificPermitOutingCatch>(entity =>
            {
                entity.HasComment("Излети за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"scientificpermitoutingcatches_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Catch100To500).HasComment("Улов бройки 100-500гр");

                entity.Property(e => e.Catch500To1000).HasComment("Улов бройки 500гр- 1000гр");

                entity.Property(e => e.CatchOver1000).HasComment("Улов бройки над 1000гр");

                entity.Property(e => e.CatchUnder100).HasComment("Улов бройки под 100гр");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishId).HasComment("Вид риба");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ScientificPermitOutingId).HasComment("Излет за научен риболов");

                entity.Property(e => e.TotalKeptCount).HasComment("Общ брой на задържаните екземпляри");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Fish)
                    .WithMany(p => p.ScientificPermitOutingCatches)
                    .HasForeignKey(d => d.FishId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitOutingCatches_NFishes");

                entity.HasOne(d => d.ScientificPermitOuting)
                    .WithMany(p => p.ScientificPermitOutingCatches)
                    .HasForeignKey(d => d.ScientificPermitOutingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitOutingCatches_ScientificPermitOutings");
            });

            modelBuilder.Entity<ScientificPermitOwner>(entity =>
            {
                entity.HasComment("Титуляри на разрешителни за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"scientificpermitowners_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.OwnerId).HasComment("Титуляр");

                entity.Property(e => e.RequestedByOrganizationPosition).HasComment("Длъжност в организацията");

                entity.Property(e => e.ScientificPermitId).HasComment("Резрешително за научен риболов");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.ScientificPermitOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitOwners_Persons_Hist");

                entity.HasOne(d => d.ScientificPermit)
                    .WithMany(p => p.ScientificPermitOwners)
                    .HasForeignKey(d => d.ScientificPermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitOwners_ScientificPermitRegister");
            });

            modelBuilder.Entity<ScientificPermitReason>(entity =>
            {
                entity.HasKey(e => new { e.ReasonId, e.ScientificPermitId });

                entity.HasComment("Основания за научен риболов");

                entity.Property(e => e.ReasonId).HasComment("Основание");

                entity.Property(e => e.ScientificPermitId).HasComment("Резрешително за научен риболов");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.ScientificPermitReasons)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitReasons_NPermitReasons");

                entity.HasOne(d => d.ScientificPermit)
                    .WithMany(p => p.ScientificPermitReasons)
                    .HasForeignKey(d => d.ScientificPermitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitReasons_ScientificPermitRegister");
            });

            modelBuilder.Entity<ScientificPermitRegister>(entity =>
            {
                entity.HasComment("Регистър разрешителни за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"scientificpermitregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CancellationDetailsId).HasComment("Детайли за анулиране");

                entity.Property(e => e.CoordinationComments).HasComment("Бележки и коментари от съгласуващия орган");

                entity.Property(e => e.CoordinationCommittee).HasComment("Съгласуващ орган");

                entity.Property(e => e.CoordinationDate).HasComment("Дата на съгласуване");

                entity.Property(e => e.CoordinationLetterNo).HasComment("Номер на съгласувателно писмо");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FishTypesApp4Zbrdesc).HasComment("Видове водни организми от Приложение 4 на ЗБР");

                entity.Property(e => e.FishTypesCrayFish).HasComment("Речни раци и каменнти (поточни) раци");

                entity.Property(e => e.FishTypesDesc).HasComment("Видове водни организми");

                entity.Property(e => e.FishingGearDescr).HasComment("Уреди");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsShipRegistered).HasComment("Флаг дали корабът е регистриран в корабния регистър");

                entity.Property(e => e.PermitRegistrationDateTime).HasComment("Дата на регистрация");

                entity.Property(e => e.PermitStatusId).HasComment("Статус на заявлението (Application/Requested/Approved/Canceled/Expired)");

                entity.Property(e => e.PermitValidFrom).HasComment("Разрешително валидно от");

                entity.Property(e => e.PermitValidTo).HasComment("Разрешително валидно до");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.ResearchGoalsDesc).HasComment("Цели на изследването");

                entity.Property(e => e.ResearchPeriodFrom).HasComment("Начало на период на изследването");

                entity.Property(e => e.ResearchPeriodTo).HasComment("Край на период на изследването");

                entity.Property(e => e.ResearchWaterAreas).HasComment("Водни обекти");

                entity.Property(e => e.ShipCaptainName).HasComment("Име на капитан на кораба (ако не е регистриран в регистъра)");

                entity.Property(e => e.ShipExternalMark).HasComment("Външна маркировка на кораба (ако не е регистриран в регистъра)");

                entity.Property(e => e.ShipId).HasComment("Регистриран кораб");

                entity.Property(e => e.ShipName).HasComment("Име на кораба (ако не е регистриран в регистъра)");

                entity.Property(e => e.SubmittedByPersonPosition).HasComment("Заявител - длъжност в организацията");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Заявител - Научна организация");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ScientificPermitRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegister_Applications");

                entity.HasOne(d => d.CancellationDetails)
                    .WithMany(p => p.ScientificPermitRegisters)
                    .HasForeignKey(d => d.CancellationDetailsId)
                    .HasConstraintName("FK_ScientificPermitRegister_CancellationDetails");

                entity.HasOne(d => d.PermitStatus)
                    .WithMany(p => p.ScientificPermitRegisters)
                    .HasForeignKey(d => d.PermitStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegister_NPermitStatuses");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_ScientificPermitRegister_ScientificPermitRegister");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.ScientificPermitRegisters)
                    .HasForeignKey(d => d.ShipId)
                    .HasConstraintName("FK_ScientificPermitRegister_RS_ShipRegister");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.ScientificPermitRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegister_Legals_Hist");
            });

            modelBuilder.Entity<ScientificPermitRegisterFile>(entity =>
            {
                entity.HasComment("Файлове за разрешителни за научен риболов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RNauR\".\"scientificpermitregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Прикачен файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Разрешително");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ScientificPermitRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegisterFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.ScientificPermitRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.ScientificPermitRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScientificPermitRegisterFiles_ScientificPermitRegister");
            });

            modelBuilder.Entity<ShipCapacityRegister>(entity =>
            {
                entity.HasComment("Риболовен капацитет на кораби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RCap\".\"shipcapacityregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност на главния двигател (kW)");

                entity.Property(e => e.GrossTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Бруто тонаж");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.ShipId).HasComment("Кораб");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.ShipCapacityRegisters)
                    .HasForeignKey(d => d.ShipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipCapacityRegister_ShipRegister");
            });

            modelBuilder.Entity<ShipCatchQuota>(entity =>
            {
                entity.HasComment("Квоти за улов на кораб");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"shipcatchquotas_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CatchQuotaId).HasComment("Квота за период");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.ShipId).HasComment("Кораб");

                entity.Property(e => e.ShipQuotaSize)
                    .HasPrecision(10, 2)
                    .HasComment("Количество улов за кораба");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CatchQuota)
                    .WithMany(p => p.ShipCatchQuota)
                    .HasForeignKey(d => d.CatchQuotaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipCatchQuotas_CatchQuotas");

                entity.HasOne(d => d.Ship)
                    .WithMany(p => p.ShipCatchQuota)
                    .HasForeignKey(d => d.ShipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RQuo_ShipCatchQuotas_RS_ShipRegister");
            });

            modelBuilder.Entity<ShipCatchQuotasHist>(entity =>
            {
                entity.HasComment("История на промени в квоти за улов");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RQuo\".\"shipcatchquotas_hist_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IncrementReason).HasComment("Основание за промяна ");

                entity.Property(e => e.ShipCatchQuotaId).HasComment("Квота на кораб за период");

                entity.Property(e => e.ShipQuotaIncrement)
                    .HasPrecision(10, 2)
                    .HasComment("Разлика с предишната квота");

                entity.Property(e => e.ShipQuotaSize)
                    .HasPrecision(10, 2)
                    .HasComment("Количество улов за кораба - обновено");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.ShipCatchQuota)
                    .WithMany(p => p.ShipCatchQuotasHists)
                    .HasForeignKey(d => d.ShipCatchQuotaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RQuo_ShipCatchQuotas_Hist_RQuo_ShipCatchQuotas");
            });

            modelBuilder.Entity<ShipInspection>(entity =>
            {
                entity.HasComment("Инспекции на риболовен кораб в открито море, на пристанище или при трансбордиране");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"shipinspections_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CaptainComment).HasComment("Коментар на капитан");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InspectedShipCatchZoneId).HasComment("Зона за улов на инспектиран кораб");

                entity.Property(e => e.InspectedShipCoordinates).HasComment("Координати на наблюдаван");

                entity.Property(e => e.InspectedShipLocation).HasComment("Описание в свободен текст - местоположение на инспектиран кораб");

                entity.Property(e => e.InspectedShipType)
                    .HasDefaultValueSql("'Inspected'::character varying")
                    .HasComment("Вид на иснпектирания кораб (Inspected / TransboardSender / TransbroardReceiver )");

                entity.Property(e => e.InspectedUnregisteredShipId).HasComment("Кораб на инспектиращ (НЕрегистриран) -> UnregisteredVessel");

                entity.Property(e => e.InspectiedShipId).HasComment("Координати на инспектиращ кораб");

                entity.Property(e => e.InspectionId).HasComment("Инспекция");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.NnnshipStatus).HasComment("Статус на РК в зоните за РУОР/списъците за ННН риболов");

                entity.Property(e => e.PreliminaryNoticeNumber).HasComment("Номер на предварително уведомление");

                entity.Property(e => e.PreliminaryNoticePurpose).HasComment("Цел на уведомлението");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.InspectedShipCatchZone)
                    .WithMany(p => p.ShipInspections)
                    .HasForeignKey(d => d.InspectedShipCatchZoneId)
                    .HasConstraintName("FK_ShipInspections_NCatchZones");

                entity.HasOne(d => d.InspectedUnregisteredShip)
                    .WithMany(p => p.ShipInspections)
                    .HasForeignKey(d => d.InspectedUnregisteredShipId)
                    .HasConstraintName("FK_ShipInspections_UnregisteredVessels_InspecteD");

                entity.HasOne(d => d.InspectiedShip)
                    .WithMany(p => p.ShipInspections)
                    .HasForeignKey(d => d.InspectiedShipId)
                    .HasConstraintName("FK_ShipInspections_ShipRegister_InspecteDShip");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.ShipInspections)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipInspections_InspectionRegister");
            });

            modelBuilder.Entity<ShipLogBookPage>(entity =>
            {
                entity.HasComment("Страници от корабни риболовни дневници");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"shiplogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ArrivePortId).HasComment("Пристанище на връщане");

                entity.Property(e => e.CancelationReason).HasComment("Причина за анулиране на страницата");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DepartPortId).HasComment("Пристанище на тръгване");

                entity.Property(e => e.FishTripEndDateTime).HasComment("Дата и час на връщане на риболовен излет");

                entity.Property(e => e.FishTripStartDateTime).HasComment("Дата и час на тръгване на риболовен излет");

                entity.Property(e => e.FishingGearCount).HasComment("Брой риболовни уреди от посочения тип.");

                entity.Property(e => e.FishingGearHooksCount).HasComment("Брой куки, закачени за риболовния уред, ако е приложимо за съответния тип уред.");

                entity.Property(e => e.FishingGearRegisterId).HasComment("Риболовен уред");

                entity.Property(e => e.IaraacceptanceDateTime).HasComment("Дата на приемане в ИАРА");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LogBookPermitLicenceId).HasComment("Удостоверение към дневник");

                entity.Property(e => e.PageFillDate).HasComment("Дата на попълване");

                entity.Property(e => e.PageNum).HasComment("Номер на страница от дневник");

                entity.Property(e => e.PartnerShipId).HasComment("Партниращ кораб при съвместен риболов");

                entity.Property(e => e.Status).HasComment("Статус на страницата (InProgress, Submitted, Canceled, Missing)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.ArrivePort)
                    .WithMany(p => p.ShipLogBookPageArrivePorts)
                    .HasForeignKey(d => d.ArrivePortId)
                    .HasConstraintName("FK_CatchSales_ShipLogBookPages_ISS_NPortArrive");

                entity.HasOne(d => d.DepartPort)
                    .WithMany(p => p.ShipLogBookPageDepartPorts)
                    .HasForeignKey(d => d.DepartPortId)
                    .HasConstraintName("FK_CatchSales_ShipLogBookPages_ISS_NPortDepart");

                entity.HasOne(d => d.FishingGearRegister)
                    .WithMany(p => p.ShipLogBookPages)
                    .HasForeignKey(d => d.FishingGearRegisterId)
                    .HasConstraintName("FK_ShipLogBookPages_FishingGearRegister");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.ShipLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipLogBookPages_LogBooks");

                entity.HasOne(d => d.LogBookPermitLicence)
                    .WithMany(p => p.ShipLogBookPages)
                    .HasForeignKey(d => d.LogBookPermitLicenceId)
                    .HasConstraintName("FK_ShipLogBookPages_LogBookPermitLicenses");

                entity.HasOne(d => d.PartnerShip)
                    .WithMany(p => p.ShipLogBookPages)
                    .HasForeignKey(d => d.PartnerShipId)
                    .HasConstraintName("FK_ShipLogBookPages_ShipRegister");
            });

            modelBuilder.Entity<ShipLogBookPageFile>(entity =>
            {
                entity.HasComment("Файлове към страници от корабен риболовен дневник");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"shiplogbookpagefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от риболовен дневник");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ShipLogBookPageFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_ShipLogBookPage_Files_ISS_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.ShipLogBookPageFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipLogBookPageFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.ShipLogBookPageFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatchSales_ShipLogBookPageFiles_ShipLogBookPages");
            });

            modelBuilder.Entity<ShipOwner>(entity =>
            {
                entity.HasComment("Собственици на кораби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"shipowners_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsShipHolder).HasComment("Флаг дали това лице е Титуляр на кораба");

                entity.Property(e => e.OwnerIsPerson).HasComment("Флаг дали собственика е физическо лице (True=ФЛ / False=ЮЛ)");

                entity.Property(e => e.OwnerLegalId).HasComment("Собственик юридическо лице");

                entity.Property(e => e.OwnerPersonId).HasComment("Собственик физическо лице");

                entity.Property(e => e.ShipRegisterId).HasComment("Кораб");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.OwnerLegal)
                    .WithMany(p => p.ShipOwners)
                    .HasForeignKey(d => d.OwnerLegalId)
                    .HasConstraintName("FK_RS_ShipOwners_ISS_Legals");

                entity.HasOne(d => d.OwnerPerson)
                    .WithMany(p => p.ShipOwners)
                    .HasForeignKey(d => d.OwnerPersonId)
                    .HasConstraintName("FK_RS_ShipOwners_ISS_Persons");

                entity.HasOne(d => d.ShipRegister)
                    .WithMany(p => p.ShipOwners)
                    .HasForeignKey(d => d.ShipRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipOwners_ShipRegister");
            });

            modelBuilder.Entity<ShipRegister>(entity =>
            {
                entity.HasComment("Регистър риболовни кораби");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"shipregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AdditionalFishingGearId).HasComment("Допълнителен риболовен уред");

                entity.Property(e => e.AdminDecisionDate).HasComment("Дата на административно решение");

                entity.Property(e => e.AdminDecisionNum).HasComment("Номер на административно решение");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.AuxiliaryEnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност на спомагателния двигател (kW)");

                entity.Property(e => e.BoardHeight)
                    .HasPrecision(10, 2)
                    .HasComment("Височина на борда");

                entity.Property(e => e.BuildPlace).HasComment("Място на построяване");

                entity.Property(e => e.BuildYear).HasComment("Година на построяване");

                entity.Property(e => e.CancellationDetailsId).HasComment("Причинa за отписване/унищожаване на кораб");

                entity.Property(e => e.Cfr).HasComment("CFR");

                entity.Property(e => e.Comments).HasComment("Коментари и бележки");

                entity.Property(e => e.ControlCardDate).HasComment("Дата на контролен талон");

                entity.Property(e => e.ControlCardDateOfLastAttestation).HasComment("Дата на последна заверка");

                entity.Property(e => e.ControlCardNum).HasComment("Номер на контролен талон");

                entity.Property(e => e.ControlCardValidityCertificateDate).HasComment("Дата на свидетелство за годност");

                entity.Property(e => e.ControlCardValidityCertificateNum).HasComment("№ на свидетелство за годност");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.CrewCount).HasComment("Брой екипаж");

                entity.Property(e => e.EventDate).HasComment("Дата на събитието");

                entity.Property(e => e.EventTypeId).HasComment("Събитие");

                entity.Property(e => e.ExploitationStartDate).HasComment("Дата на влизане в експлоатация");

                entity.Property(e => e.ExportCountryId).HasComment("Страна на износ");

                entity.Property(e => e.ExportType).HasComment("Вид износ (ExportOrTransferInEU, ExportJointVenture)");

                entity.Property(e => e.ExternalMark).HasComment("Външна маркировка");

                entity.Property(e => e.FlagCountryId).HasComment("Флаг на регистрация");

                entity.Property(e => e.FleetSegmentId).HasComment("Сегмент на флота");

                entity.Property(e => e.FleetTypeId).HasComment("Флот");

                entity.Property(e => e.FoodLawLicenseDate).HasComment("Дата на удостоверение по Закона за храните");

                entity.Property(e => e.FoodLawLicenseNum).HasComment("Номер на удостоверение по Закона за храните");

                entity.Property(e => e.ForbiddenEndDate).HasComment("Крайна дата на забрана за издаване на нови РСР и отчитане на улов");

                entity.Property(e => e.ForbiddenReason).HasComment("Причина за забраняване за издаване на РСР и отчитане на улов");

                entity.Property(e => e.ForbiddenStartDate).HasComment("Начална дата на забрана за издаване на нови РСР и отчитане на улов");

                entity.Property(e => e.FuelTypeId).HasComment("Вид гориво");

                entity.Property(e => e.GrossTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Бруто тонаж");

                entity.Property(e => e.HasAis).HasComment("Флаг дали има AIS");

                entity.Property(e => e.HasControlCard).HasComment("Флаг дали корабът притежава контролен талон");

                entity.Property(e => e.HasErs).HasComment("Флаг дали има ERS");

                entity.Property(e => e.HasFoodLawLicense).HasComment("Флаг дали има удостоверение по Закона за храните");

                entity.Property(e => e.HasValidityCertificate).HasComment("Флаг дали корабът притежава свидетелство за годност");

                entity.Property(e => e.HasVms).HasComment("Система за наблюдение VMS");

                entity.Property(e => e.HullMaterialId).HasComment("Материал на корпуса");

                entity.Property(e => e.ImportCountryId).HasComment("Страна на внос");

                entity.Property(e => e.IrcscallSign).HasComment("IRCS Позивна");

                entity.Property(e => e.HasFishingPermit).HasComment("Флаг за наличие на активно РСР за кораба");

                entity.Property(e => e.IsForbidden).HasComment("Забранен за издаване на нови РСР и отчитане на улов ");

                entity.Property(e => e.IsThirdPartyShip).HasComment("Флаг дали корабът е от трета страна");

                entity.Property(e => e.LengthBetweenPerpendiculars)
                    .HasPrecision(10, 2)
                    .HasComment("Дължина между перпендикулярите - LBP");

                entity.Property(e => e.MainEngineModel).HasComment("Марка на главния двигател");

                entity.Property(e => e.MainEngineNum).HasComment("№ на главния двигател");

                entity.Property(e => e.MainEnginePower)
                    .HasPrecision(10, 2)
                    .HasComment("Мощност на главния двигател (kW)");

                entity.Property(e => e.MainFishingGearId).HasComment("Основен риболовен уред");

                entity.Property(e => e.Mmsi).HasComment("MMSI");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.NetTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Нето тонаж");

                entity.Property(e => e.OtherTonnage)
                    .HasPrecision(10, 2)
                    .HasComment("Друг тонаж");

                entity.Property(e => e.PortId).HasComment("Пристанище");

                entity.Property(e => e.PublicAidTypeId).HasComment("Код на публична помощ");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegLicenceNum).HasComment("Номер на свидетелство за регистрация");

                entity.Property(e => e.RegLicenseDate).HasComment("Дата на свидетелство за регистрация");

                entity.Property(e => e.RegLicensePublishNum).HasComment("Номер на свидетелство за регистрация");

                entity.Property(e => e.RegLicensePublishPage).HasComment("Страница на свидетелство за регистрация");

                entity.Property(e => e.RegLicensePublishVolume).HasComment("Том на свидетелство за регистрация");

                entity.Property(e => e.RegLicensePublisher).HasComment("Издател на свидетелство за регистрация");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.RegistrationNum).HasComment("Регистрационен номер на кораба");

                entity.Property(e => e.SailAreaId).HasComment("Район на плаване");

                entity.Property(e => e.ShipAssociationId).HasComment("Корабно сдружение");

                entity.Property(e => e.ShipDraught)
                    .HasPrecision(10, 2)
                    .HasComment("Газене");

                entity.Property(e => e.ShipUid)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"shipregister_shipuid_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор на кораба (вътрешен за системата)");

                entity.Property(e => e.StayPortId).HasComment("Лодкостоянка");

                entity.Property(e => e.TotalLength)
                    .HasPrecision(10, 2)
                    .HasComment("Обща дължина - LOA (м)");

                entity.Property(e => e.TotalPassengerCapacity).HasComment("Обща човековместимост");

                entity.Property(e => e.TotalWidth)
                    .HasPrecision(10, 2)
                    .HasComment("Ширина");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Uvi).HasComment("UVI");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.Property(e => e.VesselTypeId).HasComment("Тип кораб");

                entity.HasOne(d => d.AdditionalFishingGear)
                    .WithMany(p => p.ShipRegisterAdditionalFishingGears)
                    .HasForeignKey(d => d.AdditionalFishingGearId)
                    .HasConstraintName("FK_ShipRegister_NFishingGears_Additional");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_ShipRegister_Applications");

                entity.HasOne(d => d.CancellationDetails)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.CancellationDetailsId)
                    .HasConstraintName("FK_ShipRegister_CancellationDetails");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RS_ShipRegister_RS_EventTypes");

                entity.HasOne(d => d.ExportCountry)
                    .WithMany(p => p.ShipRegisterExportCountries)
                    .HasForeignKey(d => d.ExportCountryId)
                    .HasConstraintName("FK_ShipRegister_NCountries_Export");

                entity.HasOne(d => d.FlagCountry)
                    .WithMany(p => p.ShipRegisterFlagCountries)
                    .HasForeignKey(d => d.FlagCountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_NCountries_Flag");

                entity.HasOne(d => d.FleetSegment)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.FleetSegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_NSegments");

                entity.HasOne(d => d.FleetType)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.FleetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RS_ShipRegister_RS_FleetTypes");

                entity.HasOne(d => d.FuelType)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.FuelTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_NFuelTypes");

                entity.HasOne(d => d.HullMaterial)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.HullMaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_NHullMaterials");

                entity.HasOne(d => d.ImportCountry)
                    .WithMany(p => p.ShipRegisterImportCountries)
                    .HasForeignKey(d => d.ImportCountryId)
                    .HasConstraintName("FK_ShipRegister_NCountries_Import");

                entity.HasOne(d => d.MainFishingGear)
                    .WithMany(p => p.ShipRegisterMainFishingGears)
                    .HasForeignKey(d => d.MainFishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_NFishingGears");

                entity.HasOne(d => d.Port)
                    .WithMany(p => p.ShipRegisterPorts)
                    .HasForeignKey(d => d.PortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RS_ShipRegister_RS_Ports");

                entity.HasOne(d => d.PublicAidType)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.PublicAidTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RS_ShipRegister_RS_PublicHelpCodes");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_ShipRegister_ShipRegister");

                entity.HasOne(d => d.SailArea)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.SailAreaId)
                    .HasConstraintName("FK_RS_ShipRegister_RS_NSailAreas");

                entity.HasOne(d => d.ShipAssociation)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.ShipAssociationId)
                    .HasConstraintName("FK_ShipRegister_NShipAssociations");

                entity.HasOne(d => d.StayPort)
                    .WithMany(p => p.ShipRegisterStayPorts)
                    .HasForeignKey(d => d.StayPortId)
                    .HasConstraintName("FK_ShipRegister_NPorts");

                entity.HasOne(d => d.VesselType)
                    .WithMany(p => p.ShipRegisters)
                    .HasForeignKey(d => d.VesselTypeId)
                    .HasConstraintName("FK_RS_ShipRegister_RS_NVesselTypes");
            });

            modelBuilder.Entity<ShipRegisterFile>(entity =>
            {
                entity.HasComment("Прикачени файлове за корабен регистър");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RShips\".\"shipregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ShipRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RS_ShipRegister_Files_Comm_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.ShipRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegisterFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.ShipRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipRegister_Files_ShipRegister");
            });

            modelBuilder.Entity<StatisticalFormsRegister>(entity =>
            {
                entity.HasComment("Регистър купувачи и центрове за първа продажба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"statisticalformsregister_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.ApplicationId).HasComment("Заявление");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ForYear).HasComment("Година на подаване");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("'Application'::character varying")
                    .HasComment("Тип на запис - заявление или регистров :  Application / Register");

                entity.Property(e => e.RegisterApplicationId).HasComment("Заявление, от което е създаден регистровия запис - само при ApplicationStatus = 'Register'");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация");

                entity.Property(e => e.RegistrationNum).HasComment("Регистрационен номер генериран по формата на наредбата");

                entity.Property(e => e.StatisticalFormTypeId).HasComment("Тип купувач (регистриран, ЦПП)");

                entity.Property(e => e.SubmitPersonWorkPosition).HasComment("Длъжност на подаващ формуляра");

                entity.Property(e => e.SubmittedForLegalId).HasComment("Титуляр - юридическо  лице");

                entity.Property(e => e.SubmittedForPersonId).HasComment("Титуляр, ако е физическо лице");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.StatisticalFormsRegisters)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatisticalFormsRegister_Applications");

                entity.HasOne(d => d.RegisterApplication)
                    .WithMany(p => p.InverseRegisterApplication)
                    .HasForeignKey(d => d.RegisterApplicationId)
                    .HasConstraintName("FK_StatisticalFormsRegister_StatisticalFormsRegister");

                entity.HasOne(d => d.StatisticalFormType)
                    .WithMany(p => p.StatisticalFormsRegisters)
                    .HasForeignKey(d => d.StatisticalFormTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatisticalFormsRegister_NStatisticalFormTypes");

                entity.HasOne(d => d.SubmittedForLegal)
                    .WithMany(p => p.StatisticalFormsRegisters)
                    .HasForeignKey(d => d.SubmittedForLegalId)
                    .HasConstraintName("FK_StatisticalFormsRegister_Legals");

                entity.HasOne(d => d.SubmittedForPerson)
                    .WithMany(p => p.StatisticalFormsRegisters)
                    .HasForeignKey(d => d.SubmittedForPersonId)
                    .HasConstraintName("FK_StatisticalFormsRegister_Persons");
            });

            modelBuilder.Entity<StatisticalFormsRegisterFile>(entity =>
            {
                entity.HasComment("Файлове към страници от дневник за първа продажба");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"statisticalformsregisterfiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от дневник за приемане");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.StatisticalFormsRegisterFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatisticalFormFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.StatisticalFormsRegisterFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatisticalFormFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.StatisticalFormsRegisterFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatisticalFormFiles_StatisticalFormsRegister");
            });

            modelBuilder.Entity<TransportVehicleInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_TransportVehicleInspections");

                entity.HasComment("Инспекции на транспортно средство");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CountryId).HasComment("Националност");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.InpectionLocationCoordinates).HasComment("Локация на инспекцията - координати");

                entity.Property(e => e.InspectionLocation).HasComment("Локация на инспекцията - описание");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsSealedVehicle).HasComment("Пломбирано транспортно средство");

                entity.Property(e => e.SealCondition).HasComment("Състояние на пломбите");

                entity.Property(e => e.SealInstitutionId).HasComment("Орган, поставил пломбите");

                entity.Property(e => e.TractorBrand).HasComment("Марка на транспортното средство");

                entity.Property(e => e.TractorLicensePlateNum).HasComment("Регистрационен номер на влекач / камион");

                entity.Property(e => e.TractorModel).HasComment("Модел на транспортното средство");

                entity.Property(e => e.TrailerLicensePlateNum).HasComment("Регистрационен номер на ремарке");

                entity.Property(e => e.TransporterComment).HasComment("Коментар на превозвач");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VehicleTypeId).HasComment("Вид превозно средство");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.TransportVehicleInspections)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_TransportVehicleInspections_NCountries");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.TransportVehicleInspection)
                    .HasForeignKey<TransportVehicleInspection>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportVehicleInspections_InspectionRegister");

                entity.HasOne(d => d.SealInstitution)
                    .WithMany(p => p.TransportVehicleInspections)
                    .HasForeignKey(d => d.SealInstitutionId)
                    .HasConstraintName("FK_TransportVehicleInspections_NInstitutions");

                entity.HasOne(d => d.VehicleType)
                    .WithMany(p => p.TransportVehicleInspections)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK_TransportVehicleInspections_NTransportVehicleTypes");
            });

            modelBuilder.Entity<TransportationLogBookPage>(entity =>
            {
                entity.HasComment("Страници от дневник за превоз (докуемнт за Превоз)");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"transportationlogbookpages_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CancelationReason).HasComment("Причина за анулиране (при статус Canceled)");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeliveryLocation).HasComment("Място на доставка");

                entity.Property(e => e.ImportPlace).HasComment("Място на внос (когато вносът е осъществен по начин, различен от внос с кораб)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsImportNotByShip).HasComment("Флаг дали вносът е осъществен по начин, различен от внос с кораб");

                entity.Property(e => e.LoadingDate).HasComment("Дата на товарене");

                entity.Property(e => e.LoadingLocation).HasComment("Място на товарене");

                entity.Property(e => e.LogBookId).HasComment("Дневник");

                entity.Property(e => e.LogBookPermitLicenseId).HasComment("Удостоверение към дневник");

                entity.Property(e => e.OriginDeclarationId).HasComment("Декларация за произход");

                entity.Property(e => e.PageNum).HasComment("Номер на страница");

                entity.Property(e => e.Status).HasComment("Статус на страницата (InProgress, Submitted, Canceled, Missing)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VehicleNumber).HasComment("Идентификатор на превозно средство");

                entity.HasOne(d => d.LogBook)
                    .WithMany(p => p.TransportationLogBookPages)
                    .HasForeignKey(d => d.LogBookId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportationLogBookPages_LogBooks");

                entity.HasOne(d => d.LogBookPermitLicense)
                    .WithMany(p => p.TransportationLogBookPages)
                    .HasForeignKey(d => d.LogBookPermitLicenseId)
                    .HasConstraintName("FK_TransportationLogBookPages_LogBookPermitLicenses");

                entity.HasOne(d => d.OriginDeclaration)
                    .WithMany(p => p.TransportationLogBookPages)
                    .HasForeignKey(d => d.OriginDeclarationId)
                    .HasConstraintName("FK_TransportationLogBookPages_OriginDeclarations");
            });

            modelBuilder.Entity<TransportationLogBookPageFile>(entity =>
            {
                entity.HasComment("Файлове към страници от дневник за превоз");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"CatchSales\".\"transportationlogbookpagefiles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.FileId).HasComment("Файл");

                entity.Property(e => e.FileTypeId).HasComment("Тип на файла");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RecordId).HasComment("Страница от дневник за превоз");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.TransportationLogBookPageFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportationLogBookPageFiles_Files");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.TransportationLogBookPageFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportationLogBookPageFiles_NFileTypes");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.TransportationLogBookPageFiles)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportationLogBookPageFiles_TransportationLogBookPages");
            });

            modelBuilder.Entity<UnregisteredPerson>(entity =>
            {
                entity.HasComment("Физически лица - без идентификационни данни");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"unregisteredpersons_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Address).HasComment("Адрес");

                entity.Property(e => e.CitizenshipCountryId).HasComment("Гражданство - държава");

                entity.Property(e => e.Comments).HasComment("Забележки");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EgnLnc).HasComment("Идентификатор на лицето - ЕГН / ЛНЧ");

                entity.Property(e => e.FirstName).HasComment("Име");

                entity.Property(e => e.HasBulgarianAddressRegistration).HasComment("Флаг дали притежава булгарска адресна регистрация");

                entity.Property(e => e.IdentifierType)
                    .HasDefaultValueSql("'EGN'::character varying")
                    .HasComment("Тип на идентификатора (ЕГН=EGN / ЛНЧ=LNC / Чужденец=FORID / Юридическо лице=LEGAL)");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.LastName).HasComment("Фамилия");

                entity.Property(e => e.MiddleName).HasComment("Бащино име");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.CitizenshipCountry)
                    .WithMany(p => p.UnregisteredPeople)
                    .HasForeignKey(d => d.CitizenshipCountryId)
                    .HasConstraintName("FK_UnregisteredPersons_NCountries");
            });

            modelBuilder.Entity<UnregisteredVessel>(entity =>
            {
                entity.HasComment("Нерегистрирани кораби в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInsp\".\"unregisteredvessels_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Cfr).HasComment("CFR");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.ExternalMark).HasComment("Външна маркировка");

                entity.Property(e => e.FlagCountryId).HasComment("Флаг");

                entity.Property(e => e.InstitutionId).HasComment("Институция");

                entity.Property(e => e.IrcscallSign).HasComment("IRCS Позивна");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Mmsi).HasComment("MMSI");

                entity.Property(e => e.Name).HasComment("Име");

                entity.Property(e => e.PatrolVehicleTypeId).HasComment("Тип патрулно средство");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Uvi).HasComment("UVI / IMO номер");

                entity.Property(e => e.VesselTypeId).HasComment("Тип кораб");

                entity.HasOne(d => d.FlagCountry)
                    .WithMany(p => p.UnregisteredVessels)
                    .HasForeignKey(d => d.FlagCountryId)
                    .HasConstraintName("FK_UnregisteredVessels_NCountries");

                entity.HasOne(d => d.Institution)
                    .WithMany(p => p.UnregisteredVessels)
                    .HasForeignKey(d => d.InstitutionId)
                    .HasConstraintName("FK_UnregisteredVessels_NInstitutions");

                entity.HasOne(d => d.PatrolVehicleType)
                    .WithMany(p => p.UnregisteredVessels)
                    .HasForeignKey(d => d.PatrolVehicleTypeId)
                    .HasConstraintName("FK_UnregisteredVessels_NPatrolVehicleTypes");

                entity.HasOne(d => d.VesselType)
                    .WithMany(p => p.UnregisteredVessels)
                    .HasForeignKey(d => d.VesselTypeId)
                    .HasConstraintName("FK_UnregisteredVessels_NVesselTypes");
            });

            modelBuilder.Entity<UsageDocument>(entity =>
            {
                entity.HasComment("Документи за ползване");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('iss.\"usagedocuments_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.Comments).HasComment("Коментар");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DocumentNum).HasComment("Номер на документа");

                entity.Property(e => e.DocumentTypeId).HasComment("Тип на документа");

                entity.Property(e => e.DocumentValidFrom).HasComment("Начална дата на валидност на документа");

                entity.Property(e => e.DocumentValidTo).HasComment("Крайна дата на валидност на документа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.IsLessorPerson).HasComment("Дали наемодателят/концесионерът е физическо лице (NULL, ако няма такъв)");

                entity.Property(e => e.LessorLegalId).HasComment("Юридическо лице - наемодател или концесионер");

                entity.Property(e => e.LessorPersonId).HasComment("Физическо лице - наемодател");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.UsageDocuments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsageDocuments_NUsageDocumentTypes");

                entity.HasOne(d => d.LessorLegal)
                    .WithMany(p => p.UsageDocuments)
                    .HasForeignKey(d => d.LessorLegalId)
                    .HasConstraintName("FK_UsageDocuments_Legals");

                entity.HasOne(d => d.LessorPerson)
                    .WithMany(p => p.UsageDocuments)
                    .HasForeignKey(d => d.LessorPersonId)
                    .HasConstraintName("FK_UsageDocuments_Persons");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasComment("Потребители");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"users_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.Email).HasComment("E-mail");

                entity.Property(e => e.HasEauthLogin).HasComment("Флаг дали потребителя влиза през eAuth");

                entity.Property(e => e.HasUserPassLogin).HasComment("Флаг дали потребителя влиза с Username/Password");

                entity.Property(e => e.IsInternalUser).HasComment("Флаг дали портебителят в вътрешен за ИАРА или публичен посетител");

                entity.Property(e => e.Password).HasComment("Парола (хеш) - a salted and hashed representation of the password for this user.");

                entity.Property(e => e.PersonId).HasComment("Физическо лице за този потребител");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.Username).HasComment("Потребителско име");

                entity.Property(e => e.ValidFrom)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Начална дата на валидност на записа");

                entity.Property(e => e.ValidTo)
                    .HasDefaultValueSql("'9999-01-01 00:00:00'::timestamp without time zone")
                    .HasComment("Крайна дата на валидност на записа");

                entity.HasOne(d => d.Person)
                    .WithOne(p => p.User)
                    .HasForeignKey<User>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_Users_ISS_Persons");
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_UsrMgmt_UserInfos");

                entity.HasComment("Допълнителна информация за потребители");

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasComment("Потребител");

                entity.Property(e => e.ConfirmEmailKey).HasComment("GUID за потвръждение на мейла");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DepartmentId).HasComment("Отдел в ИАРА (за вътрешни потребители)");

                entity.Property(e => e.EmailKeyValidTo).HasComment("Краен срок за потвърждаване на мейла");

                entity.Property(e => e.FailedLoginCount).HasComment("Брой неуспешни опити за вход");

                entity.Property(e => e.HasFishLawConfirmation)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали потвърждава, че е запознат със ЗРА");

                entity.Property(e => e.HasTermsAgreementConfirmation)
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг дали потвърждава, че е запознат с общите условия");

                entity.Property(e => e.IsEmailConfirmed).HasComment("Флаг дали мейл адреса на потребителя е потвърден");

                entity.Property(e => e.IsLocked).HasComment("Флаг дали достъпа на потребителя до системата е спрян (акаунта е заключен)");

                entity.Property(e => e.LastFailedLoginAttempt).HasComment("Последен неуспешен опит за вход");

                entity.Property(e => e.LastLoginDate).HasComment("Дата на последен успешен опит за вход");

                entity.Property(e => e.NewsSubscriptionType)
                    .HasDefaultValueSql("'None'::character varying")
                    .HasComment("Тип абонамент за новини през мобилното приложение (None/Districts/ALL)");

                entity.Property(e => e.Position).HasComment("Длъжност");

                entity.Property(e => e.RegistrationDate).HasComment("Дата на регистрация на потребителя");

                entity.Property(e => e.SectorId).HasComment("Сектор в ИАРА (за вътрешни потребители)");

                entity.Property(e => e.TerritoryUnitId).HasComment("Териториално звено (за вътрешни потребители)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserMustChangePassword).HasComment("Флаг дали потребителят трябва да смени паролата си за вход");

                entity.Property(e => e.UserMustResetProfileData).HasComment("Флаг дали целия профил на user-a трябва да се въведе наново - вкл. смяна на email, ЕГН и т.н.");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.UserInfos)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_UserInfos_NDepartments");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.UserInfos)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_UserInfos_NSectors");

                entity.HasOne(d => d.TerritoryUnit)
                    .WithMany(p => p.UserInfos)
                    .HasForeignKey(d => d.TerritoryUnitId)
                    .HasConstraintName("FK_UserInfos_NTerritoryUnits");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserInfo)
                    .HasForeignKey<UserInfo>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserInfos_Users");
            });

            modelBuilder.Entity<UserLegal>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LegalId, e.RoleId })
                    .HasName("PK_UsrMgmt_UserLegals");

                entity.HasComment("Потребители за юридическо лице");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.Property(e => e.LegalId).HasComment("Юридическо лице");

                entity.Property(e => e.RoleId).HasComment("Роля в юридическото лице");

                entity.Property(e => e.AccessValidFrom).HasComment("Начална дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.AccessValidTo).HasComment("Крайна дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Status).HasComment("Статус на лицето във фирмата (Requested/Approved/Blocked)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.HasOne(d => d.Legal)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.LegalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Legals_Hist");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLegals)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLegals_Users");
            });

            modelBuilder.Entity<UserMobileDevice>(entity =>
            {
                entity.HasComment("Мобилни устройства към потребител");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"usermobiledevices_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AccessStatus).HasComment("Статус на устройството (Requested/Approved/Blocked)");

                entity.Property(e => e.AppVersion).HasComment("Номер на версията на приложението, която използват");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DeviceModel).HasComment("Модел на устройството");

                entity.Property(e => e.DeviceType).HasComment("Вид устройство Phone/Tablet/..");

                entity.Property(e => e.FirebaseTokenKey).HasComment("Firebase токен за изпращане на нотификации");

                entity.Property(e => e.Imei).HasComment("IMEI номер");

                entity.Property(e => e.IsActive)
                    .HasComment("GUID за ресетване на паролата");

                entity.Property(e => e.LastLoginDate).HasComment("Дата на последен успешен опит за вход");

                entity.Property(e => e.Osversion).HasComment("Операционна система и номер версия");

                entity.Property(e => e.RequestAccessDate).HasComment("Дата и час на заявка за достъп");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserMobileDevices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserMobileDevices_Users");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasComment("Роли на потребители");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"UsrMgmt\".\"userroles_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AccessValidFrom).HasComment("Начална дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.AccessValidTo).HasComment("Крайна дата и час на валидност на достъп до привилегиите на ролята");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.RoleId).HasComment("Роля");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.UserId).HasComment("Потребител");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRoles_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrMgmt_UserRoles_UsrMgmt_Users");
            });

            modelBuilder.Entity<VesselDaysAtSea>(entity =>
            {
                entity.HasComment("Дни на море");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"RInfStat\".\"vesseldaysatsea_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.DaysAtSea).HasComment("Дни на море");

                entity.Property(e => e.FishingGearId).HasComment("Уред от удостоверение");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.VesselFormId).HasComment("Формуляр за кораб");

                entity.HasOne(d => d.FishingGear)
                    .WithMany(p => p.VesselDaysAtSeas)
                    .HasForeignKey(d => d.FishingGearId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VesselDaysAtSea_FishingGearRegister");

                entity.HasOne(d => d.VesselForm)
                    .WithMany(p => p.VesselDaysAtSeas)
                    .HasForeignKey(d => d.VesselFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VesselDaysAtSea_FishVesselsForms");
            });

            modelBuilder.Entity<WaterObjectCheck>(entity =>
            {
                entity.HasKey(e => e.InspectionId)
                    .HasName("PK_RInsp_WaterObjectChecks");

                entity.HasComment("Проверки на воден обект без извършване на инспекция");

                entity.Property(e => e.InspectionId)
                    .ValueGeneratedNever()
                    .HasComment("Инспекция");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.Name).HasComment("Име на водния обект");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");

                entity.Property(e => e.WaterObjectCoordinates).HasComment("Координати на воден обект");

                entity.Property(e => e.WaterObjectTypeId).HasComment("Вид водeн обект");

                entity.HasOne(d => d.Inspection)
                    .WithOne(p => p.WaterObjectCheck)
                    .HasForeignKey<WaterObjectCheck>(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WaterObjectChecks_InspectionRegister");

                entity.HasOne(d => d.WaterObjectType)
                    .WithMany(p => p.WaterObjectChecks)
                    .HasForeignKey(d => d.WaterObjectTypeId)
                    .HasConstraintName("FK_WaterObjectChecks_NWaterBodyTypes");
            });

            modelBuilder.Entity<WorkerQueue>(entity =>
            {
                entity.HasComment("Опашка от заявки за фонова обработка в системата");

                entity.Property(e => e.Id)
                    .HasDefaultValueSql("nextval(('\"Admin\".\"workerqueues_id_seq\"'::text)::regclass)")
                    .HasComment("Уникален идентификатор");

                entity.Property(e => e.AcquiredTime).HasComment("Дата и час на стартиране на изпълнение");

                entity.Property(e => e.CreatedBy).HasComment("Потребител създал записа");

                entity.Property(e => e.CreatedOn).HasComment("Дата и час на създаване на записа");

                entity.Property(e => e.EnqueueTime)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("Дата и час на добавяне в опашката");

                entity.Property(e => e.FinishTime).HasComment("Дата и час на приключване");

                entity.Property(e => e.InvocationData).HasComment("Данни за изпълнение");

                entity.Property(e => e.IsAcquired).HasComment("Флаг дали е стартиран");

                entity.Property(e => e.IsActive)
                    .HasComment("Флаг дали записът е активен или изтрит");

                entity.Property(e => e.NotBeforeTime).HasComment("Дата и час преди които не може да се стартира този елемент");

                entity.Property(e => e.Priority).HasComment("Приоритетна група");

                entity.Property(e => e.QueueName).HasComment("Име на типа опашка");

                entity.Property(e => e.StartTime).HasComment("Дата и час в който трябва да се стартира = COALESCE(NotBeforeTime, EnqueueTime)");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("'PENDING'::character varying")
                    .HasComment("Статус на обработката (PENDING/PROCESSING/FINISHED/ERROR)");

                entity.Property(e => e.UpdatedBy).HasComment("Потребител последно актуализирал записа");

                entity.Property(e => e.UpdatedOn).HasComment("Дата и час на последна актуализация на записа");
            });

            modelBuilder.HasSequence("acquiredcapacitycertificates_id_seq", "RCap");

            modelBuilder.HasSequence("acquiredcapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("addresses_id_seq", "Legals");

            modelBuilder.HasSequence("admissionlogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("admissionlogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("applicationchangehistory_id_seq", "Appl");

            modelBuilder.HasSequence("applicationchangehistoryfiles_id_seq", "Appl");

            modelBuilder.HasSequence("applicationchangeofcircumstances_id_seq", "Appl");

            modelBuilder.HasSequence("applicationdelivery_id_seq", "Appl");

            modelBuilder.HasSequence("applicationfiles_id_seq", "Appl");

            modelBuilder.HasSequence("applicationpayments_id_seq", "Appl");

            modelBuilder.HasSequence("applicationpaymenttariffs_id_seq", "Appl");

            modelBuilder.HasSequence("applicationregixcache_id_seq", "Appl");

            modelBuilder.HasSequence("applicationregixchecks_id_seq", "Appl");

            modelBuilder.HasSequence("applications_id_seq", "Appl");

            modelBuilder.HasSequence("aquaculturebabhcertificates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilitycoordinates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityfishes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityinstallations_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityregister_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityregister_regnum_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilityregisterfiles_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturefacilitystatuses_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureformfullsysteminstallations_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacultureformnonfullsysteminstallations_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquaculturehatcheryequipment_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationbasins_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationcollectors_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationnetcages_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationrafts_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureinstallationrecirculatorysystems_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturelogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("aquaculturelogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("aquacultureovoscertificates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacultureusagedocuments_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquaculturewaterlawcertificates_id_seq", "RAquaSt");

            modelBuilder.HasSequence("aquacutlureformbroodstocks_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureformgivenmedicines_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("aquacutlureformstockingmaterials_id_seq", "RInfStat");

            modelBuilder.HasSequence("auanconfiscatedfish_id_seq", "RInsp");

            modelBuilder.HasSequence("auanconfiscatedfishinggear_id_seq", "RInsp");

            modelBuilder.HasSequence("auanregister_id_seq", "RInsp");

            modelBuilder.HasSequence("auanregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("auanviolatedregulations_id_seq", "RInsp");

            modelBuilder.HasSequence("auanwitnesses_id_seq", "RInsp");

            modelBuilder.HasSequence("auditlog_id_seq", "SysLog");

            modelBuilder.HasSequence("buyerlicensefiles_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerlicenses_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerpremiseusagedocuments_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerregister_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerregister_regnum_seq", "RCPP");

            modelBuilder.HasSequence("buyerregisterfiles_id_seq", "RCPP");

            modelBuilder.HasSequence("buyerregisterstatuses_id_seq", "RCPP");

            modelBuilder.HasSequence("cancellationdetails_id_seq", "iss");

            modelBuilder.HasSequence("capacitycertificatesregister_id_seq", "RCap");

            modelBuilder.HasSequence("capacitycertificatesregister_regnum_seq", "RCap");

            modelBuilder.HasSequence("capacitychangehistory_id_seq", "RCap");

            modelBuilder.HasSequence("capacitychangehistorycertificates_id_seq", "RCap");

            modelBuilder.HasSequence("catchquotafiles_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotas_hist_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotas_id_seq", "RQuo");

            modelBuilder.HasSequence("catchquotaunloadports_id_seq", "RQuo");

            modelBuilder.HasSequence("catchrecordfishes_id_seq", "CatchSales");

            modelBuilder.HasSequence("catchrecords_id_seq", "CatchSales");

            modelBuilder.HasSequence("countrycapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("crosscheckresults_id_seq", "Checks");

            modelBuilder.HasSequence("crosschecks_id_seq", "Checks");

            modelBuilder.HasSequence("duplicatesregister_id_seq", "Appl");

            modelBuilder.HasSequence("duplicatesregisterfiles_id_seq", "Appl");

            modelBuilder.HasSequence("emailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("employeestatcounts_id_seq", "RInfStat");

            modelBuilder.HasSequence("employeestatnumericvalues_id_seq", "RInfStat");

            modelBuilder.HasSequence("errorlog_id_seq", "SysLog");

            modelBuilder.HasSequence("files_id_seq", "iss");

            modelBuilder.HasSequence("firstsalelogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("firstsalelogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("fishermenregister_id_seq", "RPravRib");

            modelBuilder.HasSequence("fishermenregister_registrationnum_seq", "RPravRib");

            modelBuilder.HasSequence("fishermenregisterfiles_id_seq", "RPravRib");

            modelBuilder.HasSequence("fishingassociationfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingassociationmembers_id_seq", "LRib");

            modelBuilder.HasSequence("fishingassociations_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecordfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecordfishes_id_seq", "LRib");

            modelBuilder.HasSequence("fishingcatchrecords_id_seq", "LRib");

            modelBuilder.HasSequence("fishinggearmarks_id_seq", "RStRib");

            modelBuilder.HasSequence("fishinggearpingers_id_seq", "RStRib");

            modelBuilder.HasSequence("fishinggearregister_id_seq", "RStRib");

            modelBuilder.HasSequence("fishingticketfiles_id_seq", "LRib");

            modelBuilder.HasSequence("fishingtickets_id_seq", "LRib");

            modelBuilder.HasSequence("fishvesselsforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("fluxfvmsrequests_id_seq", "iss");

            modelBuilder.HasSequence("fvmsfishingactivityreportlogbookpage_id_seq", "CatchSales");

            modelBuilder.HasSequence("fvmsfishingactivityreports_id_seq", "CatchSales");

            modelBuilder.HasSequence("holdergroundsforuse_id_seq", "RStRib");

            modelBuilder.HasSequence("inspdelivery_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectedfishinggears_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectedpersons_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectioncatchmeasures_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionchecks_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionengines_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectioninspectors_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionlastportvisits_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionlogbookpages_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionobservationtexts_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionobservationtools_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionpatrolvehicles_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionpermitlicenses_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionregister_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionvesselactivities_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectionvessels_id_seq", "RInsp");

            modelBuilder.HasSequence("inspectors_id_seq", "RInsp");

            modelBuilder.HasSequence("installationaquariums_id_seq", "RAquaSt");

            modelBuilder.HasSequence("installationbasins_id_seq", "RAquaSt");

            modelBuilder.HasSequence("installationdams_id_seq", "RAquaSt");

            modelBuilder.HasSequence("legalemailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("legalfiles_id_seq", "Legals");

            modelBuilder.HasSequence("legalphonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("legals_id_seq", "Legals");

            modelBuilder.HasSequence("legalsaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("letterofattorney_id_seq", "Appl");

            modelBuilder.HasSequence("logbookpageproducts_id_seq", "CatchSales");

            modelBuilder.HasSequence("logbookpermitlicenses_id_seq", "CatchSales");

            modelBuilder.HasSequence("logbooks_admission_seq", "CatchSales");

            modelBuilder.HasSequence("logbooks_id_seq", "CatchSales");

            modelBuilder.HasSequence("logbooks_transportation_seq", "CatchSales");

            modelBuilder.HasSequence("mapapplicationtypedeliverytypes_id_seq", "Appl");

            modelBuilder.HasSequence("mapstatformtypesemployeestattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("mapstatformtypesnumericstattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("maptarifffishes_id_seq", "Appl");

            modelBuilder.HasSequence("maptarifffishinggears_id_seq", "Appl");

            modelBuilder.HasSequence("mapwatertypepermittypes_id_seq", "RStRib");

            modelBuilder.HasSequence("MDR_ACDR_Catch_Status_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Agreement_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Boolean_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Chartering_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Comm_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Conversion_Factor_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Country_Currency_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_CR_Fishing_Category_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Land_Indicator_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Report_Type_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Sov_Waters_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_CR_Unit_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Data_Type_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_Deck_Machinery_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Effort_Zone_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Bait_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BFT_Size_Category_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BR_Def_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_BR_EU_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Catch_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Characteristic_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Device_Gear_Attachment_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Fishery_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Characteristic_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Problem_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Recovery_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Gear_Role_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_NEAFC_Stock_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Query_Parameter_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Query_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Arrival_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Departure_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Discard_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Reason_Entry_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Trip_Id_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FA_Vessel_Role_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FAO_Fishing_Area_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FAO_species_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FAR_Fish_Category_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FARM_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Fish_Freshness_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Packaging_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Fish_Presentation_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Preservation_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Fish_Size_Category_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Fish_Size_Class_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FishFinder_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Fishing_Trip_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLAP_Characteristic_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Coastal_Party_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Doc_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Flag_State_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Id_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLAP_Quota_type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_Request_Purpose_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLAP_WF_Steps_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_FLUX_Contact_Role_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_FA_FMC_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_FA_Report_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_FA_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_GP_Message_Id_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Party_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Purpose_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Response_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Val_Level_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_GP_Val_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Location_Char_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_FLUX_Location_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_MDR_Query_type_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_FLUX_Process_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Party_Id_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Party_Role_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Query_Param_Role_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Query_Param_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Sales_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Telecom_Use_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Unit_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Vehicle_Id_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Admin_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Constr_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Dim_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Engine_Role_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Gear_Role_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Hist_Char_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Id_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Position_Type_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Query_Param_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Query_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Regstr_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Report_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_FLUX_Vessel_Tech_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Gear_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Gender_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_GFCM_GSA_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Location_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Management_Area_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_MDM_BR_Def_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_MDM_BR_seq", "FLUX_MDM");

            modelBuilder.HasSequence("MDR_Member_State_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Navig_Equip_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Product_Destination_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Propeller_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Quota_Location_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_Quota_Object_seq", "FLUX_ACDR");

            modelBuilder.HasSequence("MDR_RFMOs_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Sales_BR_Def_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Sales_BR_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Stat_Rect_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Storage_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Target_Species_Group_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Territory_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_UN_Data_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Vehicle_Type_seq", "FLUX_Sales");

            modelBuilder.HasSequence("MDR_Vessel_Activity_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_Vessel_BR_Def_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_BR_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Category_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Crew_Type_seq", "FLUX_FLAP");

            modelBuilder.HasSequence("MDR_Vessel_Event_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Export_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Hull_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Photo_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Port_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Public_Aid_Type_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Segment_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Vessel_Storage_Type_seq", "FLUX_FA");

            modelBuilder.HasSequence("MDR_Vessel_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("MDR_VMS_BR_Def_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_BR_Param_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_BR_seq", "FLUX_Vessel_Position");

            modelBuilder.HasSequence("MDR_VMS_Satellite_Oper_seq", "FLUX_Vessel");

            modelBuilder.HasSequence("MDR_Weight_Measure_Type_seq", "FLUX_General");

            modelBuilder.HasSequence("mobileversions_id_seq", "Admin");

            modelBuilder.HasSequence("naddresstypes_id_seq", "Legals");

            modelBuilder.HasSequence("napplicationstatuses_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationstatushierarchy_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationstatushierarchytypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypegroups_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypehiertypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypes_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationtypesubmittedbyroles_id_seq", "Appl");

            modelBuilder.HasSequence("napplicationтypetariff_id_seq", "Appl");

            modelBuilder.HasSequence("naquacultureinstallationtypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("naquaculturepowersupplytypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("naquaculturestatuses_id_seq", "RAquaSt");

            modelBuilder.HasSequence("naquaculturewaterareatypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nauanstatuses_id_seq", "RInsp");

            modelBuilder.HasSequence("nauditlogactiontypes_id_seq", "SysLog");

            modelBuilder.HasSequence("nauditlogtables_id_seq", "SysLog");

            modelBuilder.HasSequence("nbuyerlicensetypes_id_seq", "RCPP");

            modelBuilder.HasSequence("nbuyerstatuses_id_seq", "RCPP");

            modelBuilder.HasSequence("nbuyertypes_id_seq", "RCPP");

            modelBuilder.HasSequence("ncancellationreasons_id_seq", "iss");

            modelBuilder.HasSequence("ncatchfishunloadtypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("ncatchinspectiontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ncatchtypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("ncatchzones_id_seq", "CatchSales");

            modelBuilder.HasSequence("nchangeofcircumstancestypes_id_seq", "Appl");

            modelBuilder.HasSequence("ncheckresolutions_id_seq", "Checks");

            modelBuilder.HasSequence("ncommercialfishingpermitlicensetypes_id_seq", "RStRib");

            modelBuilder.HasSequence("ncommercialfishingpermittypes_id_seq", "RStRib");

            modelBuilder.HasSequence("nconfiscatedappliances_id_seq", "RInsp");

            modelBuilder.HasSequence("nconfiscationactions_id_seq", "RInsp");

            modelBuilder.HasSequence("nconfiscationinstitutions_id_seq", "RInsp");

            modelBuilder.HasSequence("ncountries_id_seq", "Noms");

            modelBuilder.HasSequence("ncourts_id_seq", "RInsp");

            modelBuilder.HasSequence("ndeliverytypes_id_seq", "Appl");

            modelBuilder.HasSequence("ndepartments_id_seq", "Noms");

            modelBuilder.HasSequence("ndistricts_id_seq", "Noms");

            modelBuilder.HasSequence("ndocumenttypes_id_seq", "Legals");

            modelBuilder.HasSequence("nemployeestattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("nemployeestattypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("neventtypegroups_id_seq", "RShips");

            modelBuilder.HasSequence("neventtypes_id_seq", "RShips");

            modelBuilder.HasSequence("news_id_seq", "News");

            modelBuilder.HasSequence("newsdistricts_id_seq", "News");

            modelBuilder.HasSequence("newsdistrictusersubscriptions_id_seq", "News");

            modelBuilder.HasSequence("newsfiles_id_seq", "News");

            modelBuilder.HasSequence("nfiletypes_id_seq", "iss");

            modelBuilder.HasSequence("nfishes_id_seq", "Noms");

            modelBuilder.HasSequence("nfishfamilies_id_seq", "Noms");

            modelBuilder.HasSequence("nfishfreshness_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishgroups_id_seq", "Noms");

            modelBuilder.HasSequence("nfishinggearcheckreasons_id_seq", "RInsp");

            modelBuilder.HasSequence("nfishinggearmarkstatuses_id_seq", "RStRib");

            modelBuilder.HasSequence("nfishinggearpingerstatuses_id_seq", "RStRib");

            modelBuilder.HasSequence("nfishinggearrecheckreasons_id_seq", "RInsp");

            modelBuilder.HasSequence("nfishinggears_id_seq", "Noms");

            modelBuilder.HasSequence("nfishinggeartypes_id_seq", "Noms");

            modelBuilder.HasSequence("nfishpresentations_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsalepurpose_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsex_id_seq", "Noms");

            modelBuilder.HasSequence("nfishsizecategories_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfishsizes_id_seq", "CatchSales");

            modelBuilder.HasSequence("nfleettypes_id_seq", "RShips");

            modelBuilder.HasSequence("nfueltypes_id_seq", "Noms");

            modelBuilder.HasSequence("ngenders_id_seq", "Legals");

            modelBuilder.HasSequence("ngrosstonagestatintervals_id_seq", "RInfStat");

            modelBuilder.HasSequence("nhatcheryequipmenttypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nholdergroundsforusetypes_id_seq", "RStRib");

            modelBuilder.HasSequence("nhullmaterials_id_seq", "RShips");

            modelBuilder.HasSequence("ninspdeliveryconfirmationtypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspdeliverytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectedpersontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionchecktypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionobservationtextcategories_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectionstates_id_seq", "RInsp");

            modelBuilder.HasSequence("ninspectiontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("ninstallationbasinmaterialtypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationbasinpurposetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationcollectortypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstallationnetcagetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("ninstitutions_id_seq", "RInsp");

            modelBuilder.HasSequence("nlogbookstatuses_id_seq", "CatchSales");

            modelBuilder.HasSequence("nlogbooktypes_id_seq", "CatchSales");

            modelBuilder.HasSequence("nmunicipalities_id_seq", "Noms");

            modelBuilder.HasSequence("nnomenclaturegroups_id_seq", "Noms");

            modelBuilder.HasSequence("nnomenclaturetables_id_seq", "Noms");

            modelBuilder.HasSequence("nnotificationtemplates_id_seq", "Admin");

            modelBuilder.HasSequence("nnumericstattypegroups_id_seq", "RInfStat");

            modelBuilder.HasSequence("nnumericstattypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nobservationtools_id_seq", "RInsp");

            modelBuilder.HasSequence("notificationslog_id_seq", "Admin");

            modelBuilder.HasSequence("npatrolvehicletypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npaymentstatuses_id_seq", "Appl");

            modelBuilder.HasSequence("npaymenttypes_id_seq", "Appl");

            modelBuilder.HasSequence("npenalauthoritytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npenaldecreesanctiontypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npenaldecreestatustypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npenaldecreetypes_id_seq", "RInsp");

            modelBuilder.HasSequence("npenalpointstatuses_id_seq", "RInsp");

            modelBuilder.HasSequence("npermissiongroups_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("npermissions_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("npermissiontypes_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("npermitreasons_id_seq", "RNauR");

            modelBuilder.HasSequence("npermitstatuses_id_seq", "RNauR");

            modelBuilder.HasSequence("npopulatedareas_id_seq", "Noms");

            modelBuilder.HasSequence("nportgroups_id_seq", "Noms");

            modelBuilder.HasSequence("nports_id_seq", "Noms");

            modelBuilder.HasSequence("npoundnetcategorytype_id_seq", "RDal");

            modelBuilder.HasSequence("npoundnetseasontype_id_seq", "RDal");

            modelBuilder.HasSequence("npoundnetstatuses_id_seq", "RDal");

            modelBuilder.HasSequence("npublicaidtypes_id_seq", "RShips");

            modelBuilder.HasSequence("nreportparameters_id_seq", "Rep");

            modelBuilder.HasSequence("nrequiredfiletypes_id_seq", "iss");

            modelBuilder.HasSequence("nreworkproducttypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nsailareas_id_seq", "RShips");

            modelBuilder.HasSequence("nsectors_id_seq", "Noms");

            modelBuilder.HasSequence("nsegments_id_seq", "RShips");

            modelBuilder.HasSequence("nshipassociations_id_seq", "RShips");

            modelBuilder.HasSequence("nstatisticalformtypes_id_seq", "RInfStat");

            modelBuilder.HasSequence("nsubmittedbyroles_id_seq", "Appl");

            modelBuilder.HasSequence("nsuspensionreasons_id_seq", "RStRib");

            modelBuilder.HasSequence("nsuspensiontypes_id_seq", "RStRib");

            modelBuilder.HasSequence("ntariff_id_seq", "Appl");

            modelBuilder.HasSequence("nterritoryunits_id_seq", "Noms");

            modelBuilder.HasSequence("nticketperiods_id_seq", "LRib");

            modelBuilder.HasSequence("nticketstatuses_id_seq", "LRib");

            modelBuilder.HasSequence("ntickettypes_id_seq", "LRib");

            modelBuilder.HasSequence("ntranslationgroups_id_seq", "Admin");

            modelBuilder.HasSequence("ntranslationresources_id_seq", "Admin");

            modelBuilder.HasSequence("ntransportvehicletypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nturbotsizegroups_id_seq", "CatchSales");

            modelBuilder.HasSequence("nusagedocumenttypes_id_seq", "iss");

            modelBuilder.HasSequence("nvesselactivities_id_seq", "RInsp");

            modelBuilder.HasSequence("nvessellengthstatintervals_id_seq", "RInfStat");

            modelBuilder.HasSequence("nvesseltypes_id_seq", "RShips");

            modelBuilder.HasSequence("nviolationsignaltypes_id_seq", "Noms");

            modelBuilder.HasSequence("nwaterbodytypes_id_seq", "RInsp");

            modelBuilder.HasSequence("nwaterlawcertificatetypes_id_seq", "RAquaSt");

            modelBuilder.HasSequence("nwatertypes_id_seq", "RStRib");

            modelBuilder.HasSequence("origindeclarationfishes_id_seq", "CatchSales");

            modelBuilder.HasSequence("origindeclarations_id_seq", "CatchSales");

            modelBuilder.HasSequence("penaldecreefishcompensations_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreepaymentschedule_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreesanctions_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreeseizedfishinggear_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreesregister_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreesregisterfiles_id_seq", "RInsp");

            modelBuilder.HasSequence("penaldecreestatuses_id_seq", "RInsp");

            modelBuilder.HasSequence("penalpointcomplaintstatuses_id_seq", "RInsp");

            modelBuilder.HasSequence("penalpointsregister_id_seq", "RInsp");

            modelBuilder.HasSequence("permitlicenseregisterfishes_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicenseregisterfishinggears_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesregister_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesregisterfiles_id_seq", "RStRib");

            modelBuilder.HasSequence("permitlicensesuspensionchangehistory_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregister_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfiles_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfishes_id_seq", "RStRib");

            modelBuilder.HasSequence("permitregisterfishinggears_id_seq", "RStRib");

            modelBuilder.HasSequence("permitsuspensionchangehistory_id_seq", "RStRib");

            modelBuilder.HasSequence("personaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("persondocuments_id_seq", "Legals");

            modelBuilder.HasSequence("personemailaddresses_id_seq", "Legals");

            modelBuilder.HasSequence("personfiles_id_seq", "Legals");

            modelBuilder.HasSequence("personphonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("persons_id_seq", "Legals");

            modelBuilder.HasSequence("phonenumbers_id_seq", "Legals");

            modelBuilder.HasSequence("poundnetcoordinates_id_seq", "RDal");

            modelBuilder.HasSequence("poundnetregister_id_seq", "RDal");

            modelBuilder.HasSequence("reportgroups_id_seq", "Rep");

            modelBuilder.HasSequence("reportparameters_id_seq", "Rep");

            modelBuilder.HasSequence("reportrolepermissions_id_seq", "Rep");

            modelBuilder.HasSequence("reports_id_seq", "Rep");

            modelBuilder.HasSequence("reportuserpermissions_id_seq", "Rep");

            modelBuilder.HasSequence("reworkforms_id_seq", "RInfStat");

            modelBuilder.HasSequence("reworkproducts_id_seq", "RInfStat");

            modelBuilder.HasSequence("reworkrawmaterials_id_seq", "RInfStat");

            modelBuilder.HasSequence("roles_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("scientificpermitoutingcatches_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitoutings_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitowners_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitregister_id_seq", "RNauR");

            modelBuilder.HasSequence("scientificpermitregisterfiles_id_seq", "RNauR");

            modelBuilder.HasSequence("shipcapacityregister_id_seq", "RCap");

            modelBuilder.HasSequence("shipcatchquotas_hist_id_seq", "RQuo");

            modelBuilder.HasSequence("shipcatchquotas_id_seq", "RQuo");

            modelBuilder.HasSequence("shipinspections_id_seq", "RInsp");

            modelBuilder.HasSequence("shiplogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("shiplogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("shipowners_id_seq", "RShips");

            modelBuilder.HasSequence("shipregister_id_seq", "RShips");

            modelBuilder.HasSequence("shipregister_shipuid_seq", "RShips");

            modelBuilder.HasSequence("shipregisterfiles_id_seq", "RShips");

            modelBuilder.HasSequence("statisticalformsregister_id_seq", "RInfStat");

            modelBuilder.HasSequence("statisticalformsregister_regnum_seq", "RInfStat");

            modelBuilder.HasSequence("statisticalformsregisterfiles_id_seq", "RInfStat");

            modelBuilder.HasSequence("systemparameters_id_seq", "Admin");

            modelBuilder.HasSequence("transportationlogbookpagefiles_id_seq", "CatchSales");

            modelBuilder.HasSequence("transportationlogbookpages_id_seq", "CatchSales");

            modelBuilder.HasSequence("unregisteredpersons_id_seq", "RInsp");

            modelBuilder.HasSequence("unregisteredvessels_id_seq", "RInsp");

            modelBuilder.HasSequence("usagedocuments_id_seq", "iss");

            modelBuilder.HasSequence("userloginproviders_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("userlogintokens_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("usermobiledevices_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("userroles_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("users_id_seq", "UsrMgmt");

            modelBuilder.HasSequence("vesseldaysatsea_id_seq", "RInfStat");

            modelBuilder.HasSequence("workerqueues_id_seq", "Admin");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
